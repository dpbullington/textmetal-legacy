//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by:
// TextMetal 5.0.6.35568;
// 		Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
//		Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
//		Project URL: https://github.com/dpbullington/textmetal
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------

/*
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Linq;
using System.Linq;
using System.Xml;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
using TextMetal.Common.Data.LinqToSql;

using TextMetal.HostImpl.AspNetSample.DomainModel.Tables;
using TextMetal.HostImpl.AspNetSample.DomainModel.Views;

namespace TextMetal.HostImpl.AspNetSample.DomainModel
{
	public partial class Repository
	{		
		#region Methods/Operators

		public UserHistory LoadUserHistory(Int64 @userHistoryId)
		{
			UserHistory @userHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@userHistory = this.LoadUserHistory(unitOfWork, @userHistoryId);

					unitOfWork.Complete();
				}
			}
			else
				@userHistory = this.LoadUserHistory(UnitOfWork.Current, @userHistoryId);
			
			return @userHistory;
		}
		
		public UserHistory LoadUserHistory(IUnitOfWork unitOfWork, Int64 @userHistoryId)
		{			
			UserHistory @userHistory;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.UserHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.UserHistories.SingleOrDefault(lo => lo.@UserHistoryId == @userHistoryId);

				if ((object)query == null)
					return null; // does not exist
				
				@userHistory = new UserHistory()
								{
									// map result to POCO from L2S object
									@UserHistoryId = query.@UserHistoryId,
									@UserHistoryTs = query.@UserHistoryTs,
									@UserId = query.@UserId,
									@EmailAddress = query.@EmailAddress,
									@UserName = query.@UserName,
									@SaltValue = query.@SaltValue,
									@PasswordHash = query.@PasswordHash,
									@Question = query.@Question,
									@AnswerHash = query.@AnswerHash,
									@LastLoginSuccessTimestamp = query.@LastLoginSuccessTimestamp,
									@LastLoginFailureTimestamp = query.@LastLoginFailureTimestamp,
									@FailedLoginCount = query.@FailedLoginCount,
									@MustChangePassword = query.@MustChangePassword,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectUserHistory(unitOfWork, @userHistory);

				return @userHistory;
			}
		}
		
		public IEnumerable<UserHistory> FindUserHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.UserHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.UserHistory>> callback)
		{
			IEnumerable<UserHistory> @userHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@userHistories = this.FindUserHistories(unitOfWork, callback);

					@userHistories = @userHistories.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@userHistories = this.FindUserHistories(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @userHistories;
		}
		
		public IEnumerable<UserHistory> FindUserHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.UserHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.UserHistory>> callback)
		{
			IEnumerable<UserHistory> @userHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.UserHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@UserHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@userHistories = queryable.Select(lo => new UserHistory()
												 {
													// map results to POCOs from L2S objects
													@UserHistoryId = lo.@UserHistoryId,
													@UserHistoryTs = lo.@UserHistoryTs,
													@UserId = lo.@UserId,
													@EmailAddress = lo.@EmailAddress,
													@UserName = lo.@UserName,
													@SaltValue = lo.@SaltValue,
													@PasswordHash = lo.@PasswordHash,
													@Question = lo.@Question,
													@AnswerHash = lo.@AnswerHash,
													@LastLoginSuccessTimestamp = lo.@LastLoginSuccessTimestamp,
													@LastLoginFailureTimestamp = lo.@LastLoginFailureTimestamp,
													@FailedLoginCount = lo.@FailedLoginCount,
													@MustChangePassword = lo.@MustChangePassword,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (UserHistory @userHistory in @userHistories)
				{
					this.OnSelectUserHistory(unitOfWork, @userHistory);
					
					yield return @userHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveUserHistory(UserHistory @userHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveUserHistory(unitOfWork, @userHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveUserHistory(UnitOfWork.Current, @userHistory);
			
			return retval;
		}
		
		public bool SaveUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.UserHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@userHistory == null)
				throw new ArgumentNullException("userHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @userHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertUserHistory(unitOfWork, @userHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.UserHistory();

					wrapper.Disposable.UserHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateUserHistory(unitOfWork, @userHistory);
					
					query = wrapper.Disposable.UserHistories.SingleOrDefault(lo => lo.@UserHistoryId == @userHistory.@UserHistoryId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@UserHistoryId = @userHistory.@UserHistoryId;
				query.@UserHistoryTs = @userHistory.@UserHistoryTs;
				query.@UserId = @userHistory.@UserId;
				query.@EmailAddress = @userHistory.@EmailAddress;
				query.@UserName = @userHistory.@UserName;
				query.@SaltValue = @userHistory.@SaltValue;
				query.@PasswordHash = @userHistory.@PasswordHash;
				query.@Question = @userHistory.@Question;
				query.@AnswerHash = @userHistory.@AnswerHash;
				query.@LastLoginSuccessTimestamp = @userHistory.@LastLoginSuccessTimestamp;
				query.@LastLoginFailureTimestamp = @userHistory.@LastLoginFailureTimestamp;
				query.@FailedLoginCount = @userHistory.@FailedLoginCount;
				query.@MustChangePassword = @userHistory.@MustChangePassword;
				query.@SortOrder = @userHistory.@SortOrder;
				query.@CreationTimestamp = @userHistory.@CreationTimestamp;
				query.@ModificationTimestamp = @userHistory.@ModificationTimestamp;
				query.@CreationUserId = @userHistory.@CreationUserId;
				query.@ModificationUserId = @userHistory.@ModificationUserId;
				query.@LogicalDelete = @userHistory.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictUserHistory(unitOfWork, @userHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@userHistory.@UserHistoryId = query.@UserHistoryId;
				@userHistory.@UserHistoryTs = query.@UserHistoryTs;
				@userHistory.@UserId = query.@UserId;
				@userHistory.@EmailAddress = query.@EmailAddress;
				@userHistory.@UserName = query.@UserName;
				@userHistory.@SaltValue = query.@SaltValue;
				@userHistory.@PasswordHash = query.@PasswordHash;
				@userHistory.@Question = query.@Question;
				@userHistory.@AnswerHash = query.@AnswerHash;
				@userHistory.@LastLoginSuccessTimestamp = query.@LastLoginSuccessTimestamp;
				@userHistory.@LastLoginFailureTimestamp = query.@LastLoginFailureTimestamp;
				@userHistory.@FailedLoginCount = query.@FailedLoginCount;
				@userHistory.@MustChangePassword = query.@MustChangePassword;
				@userHistory.@SortOrder = query.@SortOrder;
				@userHistory.@CreationTimestamp = query.@CreationTimestamp;
				@userHistory.@ModificationTimestamp = query.@ModificationTimestamp;
				@userHistory.@CreationUserId = query.@CreationUserId;
				@userHistory.@ModificationUserId = query.@ModificationUserId;
				@userHistory.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertUserHistory(unitOfWork, @userHistory);
				}
				else
				{
					this.OnPostUpdateUserHistory(unitOfWork, @userHistory);
				}

				return true;
			}
		}
		
		public bool DiscardUserHistory(UserHistory @userHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardUserHistory(unitOfWork, @userHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardUserHistory(UnitOfWork.Current, @userHistory);
			
			return retval;
		}
		
		public bool DiscardUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.UserHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@userHistory == null)
				throw new ArgumentNullException("userHistory");
				
			if (@userHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteUserHistory(unitOfWork, @userHistory);
				
				query = wrapper.Disposable.@UserHistories.SingleOrDefault(lo => lo.@UserHistoryId == @userHistory.@UserHistoryId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@UserHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictUserHistory(unitOfWork, @userHistory);
					
					return false;
				}

				this.OnPostDeleteUserHistory(unitOfWork, @userHistory);
				
				@userHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);
		
		partial void OnPostInsertUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);
		
		partial void OnPreUpdateUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);
		
		partial void OnPostUpdateUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);
		
		partial void OnPreDeleteUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);
		
		partial void OnPostDeleteUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);
		
		partial void OnSaveConflictUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);
		
		partial void OnDiscardConflictUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);
		
		partial void OnSelectUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);		

		public PropertyBagHistory LoadPropertyBagHistory(Int64 @propertyBagHistoryId)
		{
			PropertyBagHistory @propertyBagHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@propertyBagHistory = this.LoadPropertyBagHistory(unitOfWork, @propertyBagHistoryId);

					unitOfWork.Complete();
				}
			}
			else
				@propertyBagHistory = this.LoadPropertyBagHistory(UnitOfWork.Current, @propertyBagHistoryId);
			
			return @propertyBagHistory;
		}
		
		public PropertyBagHistory LoadPropertyBagHistory(IUnitOfWork unitOfWork, Int64 @propertyBagHistoryId)
		{			
			PropertyBagHistory @propertyBagHistory;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBagHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.PropertyBagHistories.SingleOrDefault(lo => lo.@PropertyBagHistoryId == @propertyBagHistoryId);

				if ((object)query == null)
					return null; // does not exist
				
				@propertyBagHistory = new PropertyBagHistory()
								{
									// map result to POCO from L2S object
									@PropertyBagHistoryId = query.@PropertyBagHistoryId,
									@PropertyBagHistoryTs = query.@PropertyBagHistoryTs,
									@PropertyBagId = query.@PropertyBagId,
									@PropertyKey = query.@PropertyKey,
									@PropertyType = query.@PropertyType,
									@PropertyValue = query.@PropertyValue,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectPropertyBagHistory(unitOfWork, @propertyBagHistory);

				return @propertyBagHistory;
			}
		}
		
		public IEnumerable<PropertyBagHistory> FindPropertyBagHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBagHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBagHistory>> callback)
		{
			IEnumerable<PropertyBagHistory> @propertyBagHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@propertyBagHistories = this.FindPropertyBagHistories(unitOfWork, callback);

					@propertyBagHistories = @propertyBagHistories.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@propertyBagHistories = this.FindPropertyBagHistories(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @propertyBagHistories;
		}
		
		public IEnumerable<PropertyBagHistory> FindPropertyBagHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBagHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBagHistory>> callback)
		{
			IEnumerable<PropertyBagHistory> @propertyBagHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBagHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@PropertyBagHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@propertyBagHistories = queryable.Select(lo => new PropertyBagHistory()
												 {
													// map results to POCOs from L2S objects
													@PropertyBagHistoryId = lo.@PropertyBagHistoryId,
													@PropertyBagHistoryTs = lo.@PropertyBagHistoryTs,
													@PropertyBagId = lo.@PropertyBagId,
													@PropertyKey = lo.@PropertyKey,
													@PropertyType = lo.@PropertyType,
													@PropertyValue = lo.@PropertyValue,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (PropertyBagHistory @propertyBagHistory in @propertyBagHistories)
				{
					this.OnSelectPropertyBagHistory(unitOfWork, @propertyBagHistory);
					
					yield return @propertyBagHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SavePropertyBagHistory(PropertyBagHistory @propertyBagHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SavePropertyBagHistory(unitOfWork, @propertyBagHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SavePropertyBagHistory(UnitOfWork.Current, @propertyBagHistory);
			
			return retval;
		}
		
		public bool SavePropertyBagHistory(IUnitOfWork unitOfWork, PropertyBagHistory @propertyBagHistory)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBagHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@propertyBagHistory == null)
				throw new ArgumentNullException("propertyBagHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @propertyBagHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertPropertyBagHistory(unitOfWork, @propertyBagHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBagHistory();

					wrapper.Disposable.PropertyBagHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdatePropertyBagHistory(unitOfWork, @propertyBagHistory);
					
					query = wrapper.Disposable.PropertyBagHistories.SingleOrDefault(lo => lo.@PropertyBagHistoryId == @propertyBagHistory.@PropertyBagHistoryId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@PropertyBagHistoryId = @propertyBagHistory.@PropertyBagHistoryId;
				query.@PropertyBagHistoryTs = @propertyBagHistory.@PropertyBagHistoryTs;
				query.@PropertyBagId = @propertyBagHistory.@PropertyBagId;
				query.@PropertyKey = @propertyBagHistory.@PropertyKey;
				query.@PropertyType = @propertyBagHistory.@PropertyType;
				query.@PropertyValue = @propertyBagHistory.@PropertyValue;
				query.@SortOrder = @propertyBagHistory.@SortOrder;
				query.@CreationTimestamp = @propertyBagHistory.@CreationTimestamp;
				query.@ModificationTimestamp = @propertyBagHistory.@ModificationTimestamp;
				query.@CreationUserId = @propertyBagHistory.@CreationUserId;
				query.@ModificationUserId = @propertyBagHistory.@ModificationUserId;
				query.@LogicalDelete = @propertyBagHistory.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictPropertyBagHistory(unitOfWork, @propertyBagHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@propertyBagHistory.@PropertyBagHistoryId = query.@PropertyBagHistoryId;
				@propertyBagHistory.@PropertyBagHistoryTs = query.@PropertyBagHistoryTs;
				@propertyBagHistory.@PropertyBagId = query.@PropertyBagId;
				@propertyBagHistory.@PropertyKey = query.@PropertyKey;
				@propertyBagHistory.@PropertyType = query.@PropertyType;
				@propertyBagHistory.@PropertyValue = query.@PropertyValue;
				@propertyBagHistory.@SortOrder = query.@SortOrder;
				@propertyBagHistory.@CreationTimestamp = query.@CreationTimestamp;
				@propertyBagHistory.@ModificationTimestamp = query.@ModificationTimestamp;
				@propertyBagHistory.@CreationUserId = query.@CreationUserId;
				@propertyBagHistory.@ModificationUserId = query.@ModificationUserId;
				@propertyBagHistory.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertPropertyBagHistory(unitOfWork, @propertyBagHistory);
				}
				else
				{
					this.OnPostUpdatePropertyBagHistory(unitOfWork, @propertyBagHistory);
				}

				return true;
			}
		}
		
		public bool DiscardPropertyBagHistory(PropertyBagHistory @propertyBagHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardPropertyBagHistory(unitOfWork, @propertyBagHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardPropertyBagHistory(UnitOfWork.Current, @propertyBagHistory);
			
			return retval;
		}
		
		public bool DiscardPropertyBagHistory(IUnitOfWork unitOfWork, PropertyBagHistory @propertyBagHistory)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBagHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@propertyBagHistory == null)
				throw new ArgumentNullException("propertyBagHistory");
				
			if (@propertyBagHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeletePropertyBagHistory(unitOfWork, @propertyBagHistory);
				
				query = wrapper.Disposable.@PropertyBagHistories.SingleOrDefault(lo => lo.@PropertyBagHistoryId == @propertyBagHistory.@PropertyBagHistoryId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@PropertyBagHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictPropertyBagHistory(unitOfWork, @propertyBagHistory);
					
					return false;
				}

				this.OnPostDeletePropertyBagHistory(unitOfWork, @propertyBagHistory);
				
				@propertyBagHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertPropertyBagHistory(IUnitOfWork unitOfWork, PropertyBagHistory @propertyBagHistory);
		
		partial void OnPostInsertPropertyBagHistory(IUnitOfWork unitOfWork, PropertyBagHistory @propertyBagHistory);
		
		partial void OnPreUpdatePropertyBagHistory(IUnitOfWork unitOfWork, PropertyBagHistory @propertyBagHistory);
		
		partial void OnPostUpdatePropertyBagHistory(IUnitOfWork unitOfWork, PropertyBagHistory @propertyBagHistory);
		
		partial void OnPreDeletePropertyBagHistory(IUnitOfWork unitOfWork, PropertyBagHistory @propertyBagHistory);
		
		partial void OnPostDeletePropertyBagHistory(IUnitOfWork unitOfWork, PropertyBagHistory @propertyBagHistory);
		
		partial void OnSaveConflictPropertyBagHistory(IUnitOfWork unitOfWork, PropertyBagHistory @propertyBagHistory);
		
		partial void OnDiscardConflictPropertyBagHistory(IUnitOfWork unitOfWork, PropertyBagHistory @propertyBagHistory);
		
		partial void OnSelectPropertyBagHistory(IUnitOfWork unitOfWork, PropertyBagHistory @propertyBagHistory);		

		public EventLogHistory LoadEventLogHistory(Int64 @eventLogHistoryId)
		{
			EventLogHistory @eventLogHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@eventLogHistory = this.LoadEventLogHistory(unitOfWork, @eventLogHistoryId);

					unitOfWork.Complete();
				}
			}
			else
				@eventLogHistory = this.LoadEventLogHistory(UnitOfWork.Current, @eventLogHistoryId);
			
			return @eventLogHistory;
		}
		
		public EventLogHistory LoadEventLogHistory(IUnitOfWork unitOfWork, Int64 @eventLogHistoryId)
		{			
			EventLogHistory @eventLogHistory;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.EventLogHistories.SingleOrDefault(lo => lo.@EventLogHistoryId == @eventLogHistoryId);

				if ((object)query == null)
					return null; // does not exist
				
				@eventLogHistory = new EventLogHistory()
								{
									// map result to POCO from L2S object
									@EventLogHistoryId = query.@EventLogHistoryId,
									@EventLogHistoryTs = query.@EventLogHistoryTs,
									@EventLogId = query.@EventLogId,
									@EventText = query.@EventText,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEventLogHistory(unitOfWork, @eventLogHistory);

				return @eventLogHistory;
			}
		}
		
		public IEnumerable<EventLogHistory> FindEventLogHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogHistory>> callback)
		{
			IEnumerable<EventLogHistory> @eventLogHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@eventLogHistories = this.FindEventLogHistories(unitOfWork, callback);

					@eventLogHistories = @eventLogHistories.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@eventLogHistories = this.FindEventLogHistories(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @eventLogHistories;
		}
		
		public IEnumerable<EventLogHistory> FindEventLogHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogHistory>> callback)
		{
			IEnumerable<EventLogHistory> @eventLogHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@EventLogHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@eventLogHistories = queryable.Select(lo => new EventLogHistory()
												 {
													// map results to POCOs from L2S objects
													@EventLogHistoryId = lo.@EventLogHistoryId,
													@EventLogHistoryTs = lo.@EventLogHistoryTs,
													@EventLogId = lo.@EventLogId,
													@EventText = lo.@EventText,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (EventLogHistory @eventLogHistory in @eventLogHistories)
				{
					this.OnSelectEventLogHistory(unitOfWork, @eventLogHistory);
					
					yield return @eventLogHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveEventLogHistory(EventLogHistory @eventLogHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveEventLogHistory(unitOfWork, @eventLogHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveEventLogHistory(UnitOfWork.Current, @eventLogHistory);
			
			return retval;
		}
		
		public bool SaveEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@eventLogHistory == null)
				throw new ArgumentNullException("eventLogHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @eventLogHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEventLogHistory(unitOfWork, @eventLogHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogHistory();

					wrapper.Disposable.EventLogHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEventLogHistory(unitOfWork, @eventLogHistory);
					
					query = wrapper.Disposable.EventLogHistories.SingleOrDefault(lo => lo.@EventLogHistoryId == @eventLogHistory.@EventLogHistoryId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@EventLogHistoryId = @eventLogHistory.@EventLogHistoryId;
				query.@EventLogHistoryTs = @eventLogHistory.@EventLogHistoryTs;
				query.@EventLogId = @eventLogHistory.@EventLogId;
				query.@EventText = @eventLogHistory.@EventText;
				query.@SortOrder = @eventLogHistory.@SortOrder;
				query.@CreationTimestamp = @eventLogHistory.@CreationTimestamp;
				query.@ModificationTimestamp = @eventLogHistory.@ModificationTimestamp;
				query.@CreationUserId = @eventLogHistory.@CreationUserId;
				query.@ModificationUserId = @eventLogHistory.@ModificationUserId;
				query.@LogicalDelete = @eventLogHistory.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEventLogHistory(unitOfWork, @eventLogHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@eventLogHistory.@EventLogHistoryId = query.@EventLogHistoryId;
				@eventLogHistory.@EventLogHistoryTs = query.@EventLogHistoryTs;
				@eventLogHistory.@EventLogId = query.@EventLogId;
				@eventLogHistory.@EventText = query.@EventText;
				@eventLogHistory.@SortOrder = query.@SortOrder;
				@eventLogHistory.@CreationTimestamp = query.@CreationTimestamp;
				@eventLogHistory.@ModificationTimestamp = query.@ModificationTimestamp;
				@eventLogHistory.@CreationUserId = query.@CreationUserId;
				@eventLogHistory.@ModificationUserId = query.@ModificationUserId;
				@eventLogHistory.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEventLogHistory(unitOfWork, @eventLogHistory);
				}
				else
				{
					this.OnPostUpdateEventLogHistory(unitOfWork, @eventLogHistory);
				}

				return true;
			}
		}
		
		public bool DiscardEventLogHistory(EventLogHistory @eventLogHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardEventLogHistory(unitOfWork, @eventLogHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardEventLogHistory(UnitOfWork.Current, @eventLogHistory);
			
			return retval;
		}
		
		public bool DiscardEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@eventLogHistory == null)
				throw new ArgumentNullException("eventLogHistory");
				
			if (@eventLogHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEventLogHistory(unitOfWork, @eventLogHistory);
				
				query = wrapper.Disposable.@EventLogHistories.SingleOrDefault(lo => lo.@EventLogHistoryId == @eventLogHistory.@EventLogHistoryId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@EventLogHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEventLogHistory(unitOfWork, @eventLogHistory);
					
					return false;
				}

				this.OnPostDeleteEventLogHistory(unitOfWork, @eventLogHistory);
				
				@eventLogHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);
		
		partial void OnPostInsertEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);
		
		partial void OnPreUpdateEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);
		
		partial void OnPostUpdateEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);
		
		partial void OnPreDeleteEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);
		
		partial void OnPostDeleteEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);
		
		partial void OnSaveConflictEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);
		
		partial void OnDiscardConflictEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);
		
		partial void OnSelectEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);		

		public EmailMessageHistory LoadEmailMessageHistory(Int64 @emailMessageHistoryId)
		{
			EmailMessageHistory @emailMessageHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@emailMessageHistory = this.LoadEmailMessageHistory(unitOfWork, @emailMessageHistoryId);

					unitOfWork.Complete();
				}
			}
			else
				@emailMessageHistory = this.LoadEmailMessageHistory(UnitOfWork.Current, @emailMessageHistoryId);
			
			return @emailMessageHistory;
		}
		
		public EmailMessageHistory LoadEmailMessageHistory(IUnitOfWork unitOfWork, Int64 @emailMessageHistoryId)
		{			
			EmailMessageHistory @emailMessageHistory;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessageHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.EmailMessageHistories.SingleOrDefault(lo => lo.@EmailMessageHistoryId == @emailMessageHistoryId);

				if ((object)query == null)
					return null; // does not exist
				
				@emailMessageHistory = new EmailMessageHistory()
								{
									// map result to POCO from L2S object
									@EmailMessageHistoryId = query.@EmailMessageHistoryId,
									@EmailMessageHistoryTs = query.@EmailMessageHistoryTs,
									@EmailMessageId = query.@EmailMessageId,
									@From = query.@From,
									@Sender = query.@Sender,
									@ReplyTo = query.@ReplyTo,
									@To = query.@To,
									@CarbonCopy = query.@CarbonCopy,
									@BlindCarbonCopy = query.@BlindCarbonCopy,
									@Subject = query.@Subject,
									@IsBodyHtml = query.@IsBodyHtml,
									@Body = query.@Body,
									@Processed = query.@Processed,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEmailMessageHistory(unitOfWork, @emailMessageHistory);

				return @emailMessageHistory;
			}
		}
		
		public IEnumerable<EmailMessageHistory> FindEmailMessageHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessageHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessageHistory>> callback)
		{
			IEnumerable<EmailMessageHistory> @emailMessageHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@emailMessageHistories = this.FindEmailMessageHistories(unitOfWork, callback);

					@emailMessageHistories = @emailMessageHistories.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@emailMessageHistories = this.FindEmailMessageHistories(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @emailMessageHistories;
		}
		
		public IEnumerable<EmailMessageHistory> FindEmailMessageHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessageHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessageHistory>> callback)
		{
			IEnumerable<EmailMessageHistory> @emailMessageHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessageHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@EmailMessageHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@emailMessageHistories = queryable.Select(lo => new EmailMessageHistory()
												 {
													// map results to POCOs from L2S objects
													@EmailMessageHistoryId = lo.@EmailMessageHistoryId,
													@EmailMessageHistoryTs = lo.@EmailMessageHistoryTs,
													@EmailMessageId = lo.@EmailMessageId,
													@From = lo.@From,
													@Sender = lo.@Sender,
													@ReplyTo = lo.@ReplyTo,
													@To = lo.@To,
													@CarbonCopy = lo.@CarbonCopy,
													@BlindCarbonCopy = lo.@BlindCarbonCopy,
													@Subject = lo.@Subject,
													@IsBodyHtml = lo.@IsBodyHtml,
													@Body = lo.@Body,
													@Processed = lo.@Processed,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (EmailMessageHistory @emailMessageHistory in @emailMessageHistories)
				{
					this.OnSelectEmailMessageHistory(unitOfWork, @emailMessageHistory);
					
					yield return @emailMessageHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveEmailMessageHistory(EmailMessageHistory @emailMessageHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveEmailMessageHistory(unitOfWork, @emailMessageHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveEmailMessageHistory(UnitOfWork.Current, @emailMessageHistory);
			
			return retval;
		}
		
		public bool SaveEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessageHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@emailMessageHistory == null)
				throw new ArgumentNullException("emailMessageHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @emailMessageHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEmailMessageHistory(unitOfWork, @emailMessageHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessageHistory();

					wrapper.Disposable.EmailMessageHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEmailMessageHistory(unitOfWork, @emailMessageHistory);
					
					query = wrapper.Disposable.EmailMessageHistories.SingleOrDefault(lo => lo.@EmailMessageHistoryId == @emailMessageHistory.@EmailMessageHistoryId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@EmailMessageHistoryId = @emailMessageHistory.@EmailMessageHistoryId;
				query.@EmailMessageHistoryTs = @emailMessageHistory.@EmailMessageHistoryTs;
				query.@EmailMessageId = @emailMessageHistory.@EmailMessageId;
				query.@From = @emailMessageHistory.@From;
				query.@Sender = @emailMessageHistory.@Sender;
				query.@ReplyTo = @emailMessageHistory.@ReplyTo;
				query.@To = @emailMessageHistory.@To;
				query.@CarbonCopy = @emailMessageHistory.@CarbonCopy;
				query.@BlindCarbonCopy = @emailMessageHistory.@BlindCarbonCopy;
				query.@Subject = @emailMessageHistory.@Subject;
				query.@IsBodyHtml = @emailMessageHistory.@IsBodyHtml;
				query.@Body = @emailMessageHistory.@Body;
				query.@Processed = @emailMessageHistory.@Processed;
				query.@SortOrder = @emailMessageHistory.@SortOrder;
				query.@CreationTimestamp = @emailMessageHistory.@CreationTimestamp;
				query.@ModificationTimestamp = @emailMessageHistory.@ModificationTimestamp;
				query.@CreationUserId = @emailMessageHistory.@CreationUserId;
				query.@ModificationUserId = @emailMessageHistory.@ModificationUserId;
				query.@LogicalDelete = @emailMessageHistory.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEmailMessageHistory(unitOfWork, @emailMessageHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@emailMessageHistory.@EmailMessageHistoryId = query.@EmailMessageHistoryId;
				@emailMessageHistory.@EmailMessageHistoryTs = query.@EmailMessageHistoryTs;
				@emailMessageHistory.@EmailMessageId = query.@EmailMessageId;
				@emailMessageHistory.@From = query.@From;
				@emailMessageHistory.@Sender = query.@Sender;
				@emailMessageHistory.@ReplyTo = query.@ReplyTo;
				@emailMessageHistory.@To = query.@To;
				@emailMessageHistory.@CarbonCopy = query.@CarbonCopy;
				@emailMessageHistory.@BlindCarbonCopy = query.@BlindCarbonCopy;
				@emailMessageHistory.@Subject = query.@Subject;
				@emailMessageHistory.@IsBodyHtml = query.@IsBodyHtml;
				@emailMessageHistory.@Body = query.@Body;
				@emailMessageHistory.@Processed = query.@Processed;
				@emailMessageHistory.@SortOrder = query.@SortOrder;
				@emailMessageHistory.@CreationTimestamp = query.@CreationTimestamp;
				@emailMessageHistory.@ModificationTimestamp = query.@ModificationTimestamp;
				@emailMessageHistory.@CreationUserId = query.@CreationUserId;
				@emailMessageHistory.@ModificationUserId = query.@ModificationUserId;
				@emailMessageHistory.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEmailMessageHistory(unitOfWork, @emailMessageHistory);
				}
				else
				{
					this.OnPostUpdateEmailMessageHistory(unitOfWork, @emailMessageHistory);
				}

				return true;
			}
		}
		
		public bool DiscardEmailMessageHistory(EmailMessageHistory @emailMessageHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardEmailMessageHistory(unitOfWork, @emailMessageHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardEmailMessageHistory(UnitOfWork.Current, @emailMessageHistory);
			
			return retval;
		}
		
		public bool DiscardEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessageHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@emailMessageHistory == null)
				throw new ArgumentNullException("emailMessageHistory");
				
			if (@emailMessageHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEmailMessageHistory(unitOfWork, @emailMessageHistory);
				
				query = wrapper.Disposable.@EmailMessageHistories.SingleOrDefault(lo => lo.@EmailMessageHistoryId == @emailMessageHistory.@EmailMessageHistoryId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@EmailMessageHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEmailMessageHistory(unitOfWork, @emailMessageHistory);
					
					return false;
				}

				this.OnPostDeleteEmailMessageHistory(unitOfWork, @emailMessageHistory);
				
				@emailMessageHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);
		
		partial void OnPostInsertEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);
		
		partial void OnPreUpdateEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);
		
		partial void OnPostUpdateEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);
		
		partial void OnPreDeleteEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);
		
		partial void OnPostDeleteEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);
		
		partial void OnSaveConflictEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);
		
		partial void OnDiscardConflictEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);
		
		partial void OnSelectEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);		

		public EmailAttachmentHistory LoadEmailAttachmentHistory(Int64 @emailAttachmentHistoryId)
		{
			EmailAttachmentHistory @emailAttachmentHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@emailAttachmentHistory = this.LoadEmailAttachmentHistory(unitOfWork, @emailAttachmentHistoryId);

					unitOfWork.Complete();
				}
			}
			else
				@emailAttachmentHistory = this.LoadEmailAttachmentHistory(UnitOfWork.Current, @emailAttachmentHistoryId);
			
			return @emailAttachmentHistory;
		}
		
		public EmailAttachmentHistory LoadEmailAttachmentHistory(IUnitOfWork unitOfWork, Int64 @emailAttachmentHistoryId)
		{			
			EmailAttachmentHistory @emailAttachmentHistory;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachmentHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.EmailAttachmentHistories.SingleOrDefault(lo => lo.@EmailAttachmentHistoryId == @emailAttachmentHistoryId);

				if ((object)query == null)
					return null; // does not exist
				
				@emailAttachmentHistory = new EmailAttachmentHistory()
								{
									// map result to POCO from L2S object
									@EmailAttachmentHistoryId = query.@EmailAttachmentHistoryId,
									@EmailAttachmentHistoryTs = query.@EmailAttachmentHistoryTs,
									@EmailMessageId = query.@EmailMessageId,
									@EmailAttachmentId = query.@EmailAttachmentId,
									@FileName = query.@FileName,
									@FileSize = query.@FileSize,
									@MimeType = query.@MimeType,
									@AttachmentBits = (object)query.AttachmentBits != null ? query.@AttachmentBits.ToArray() : null,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);

				return @emailAttachmentHistory;
			}
		}
		
		public IEnumerable<EmailAttachmentHistory> FindEmailAttachmentHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachmentHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachmentHistory>> callback)
		{
			IEnumerable<EmailAttachmentHistory> @emailAttachmentHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@emailAttachmentHistories = this.FindEmailAttachmentHistories(unitOfWork, callback);

					@emailAttachmentHistories = @emailAttachmentHistories.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@emailAttachmentHistories = this.FindEmailAttachmentHistories(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @emailAttachmentHistories;
		}
		
		public IEnumerable<EmailAttachmentHistory> FindEmailAttachmentHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachmentHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachmentHistory>> callback)
		{
			IEnumerable<EmailAttachmentHistory> @emailAttachmentHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachmentHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@EmailAttachmentHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@emailAttachmentHistories = queryable.Select(lo => new EmailAttachmentHistory()
												 {
													// map results to POCOs from L2S objects
													@EmailAttachmentHistoryId = lo.@EmailAttachmentHistoryId,
													@EmailAttachmentHistoryTs = lo.@EmailAttachmentHistoryTs,
													@EmailMessageId = lo.@EmailMessageId,
													@EmailAttachmentId = lo.@EmailAttachmentId,
													@FileName = lo.@FileName,
													@FileSize = lo.@FileSize,
													@MimeType = lo.@MimeType,
													@AttachmentBits = (object)lo.@AttachmentBits != null ? lo.@AttachmentBits.ToArray() : null,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (EmailAttachmentHistory @emailAttachmentHistory in @emailAttachmentHistories)
				{
					this.OnSelectEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
					
					yield return @emailAttachmentHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveEmailAttachmentHistory(EmailAttachmentHistory @emailAttachmentHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveEmailAttachmentHistory(UnitOfWork.Current, @emailAttachmentHistory);
			
			return retval;
		}
		
		public bool SaveEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachmentHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@emailAttachmentHistory == null)
				throw new ArgumentNullException("emailAttachmentHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @emailAttachmentHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachmentHistory();

					wrapper.Disposable.EmailAttachmentHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
					
					query = wrapper.Disposable.EmailAttachmentHistories.SingleOrDefault(lo => lo.@EmailAttachmentHistoryId == @emailAttachmentHistory.@EmailAttachmentHistoryId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@EmailAttachmentHistoryId = @emailAttachmentHistory.@EmailAttachmentHistoryId;
				query.@EmailAttachmentHistoryTs = @emailAttachmentHistory.@EmailAttachmentHistoryTs;
				query.@EmailMessageId = @emailAttachmentHistory.@EmailMessageId;
				query.@EmailAttachmentId = @emailAttachmentHistory.@EmailAttachmentId;
				query.@FileName = @emailAttachmentHistory.@FileName;
				query.@FileSize = @emailAttachmentHistory.@FileSize;
				query.@MimeType = @emailAttachmentHistory.@MimeType;
				query.@AttachmentBits = @emailAttachmentHistory.@AttachmentBits;
				query.@SortOrder = @emailAttachmentHistory.@SortOrder;
				query.@CreationTimestamp = @emailAttachmentHistory.@CreationTimestamp;
				query.@ModificationTimestamp = @emailAttachmentHistory.@ModificationTimestamp;
				query.@CreationUserId = @emailAttachmentHistory.@CreationUserId;
				query.@ModificationUserId = @emailAttachmentHistory.@ModificationUserId;
				query.@LogicalDelete = @emailAttachmentHistory.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@emailAttachmentHistory.@EmailAttachmentHistoryId = query.@EmailAttachmentHistoryId;
				@emailAttachmentHistory.@EmailAttachmentHistoryTs = query.@EmailAttachmentHistoryTs;
				@emailAttachmentHistory.@EmailMessageId = query.@EmailMessageId;
				@emailAttachmentHistory.@EmailAttachmentId = query.@EmailAttachmentId;
				@emailAttachmentHistory.@FileName = query.@FileName;
				@emailAttachmentHistory.@FileSize = query.@FileSize;
				@emailAttachmentHistory.@MimeType = query.@MimeType;
				@emailAttachmentHistory.@AttachmentBits = (object)query.@AttachmentBits != null ? query.@AttachmentBits.ToArray() : null;
				@emailAttachmentHistory.@SortOrder = query.@SortOrder;
				@emailAttachmentHistory.@CreationTimestamp = query.@CreationTimestamp;
				@emailAttachmentHistory.@ModificationTimestamp = query.@ModificationTimestamp;
				@emailAttachmentHistory.@CreationUserId = query.@CreationUserId;
				@emailAttachmentHistory.@ModificationUserId = query.@ModificationUserId;
				@emailAttachmentHistory.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
				}
				else
				{
					this.OnPostUpdateEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
				}

				return true;
			}
		}
		
		public bool DiscardEmailAttachmentHistory(EmailAttachmentHistory @emailAttachmentHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardEmailAttachmentHistory(UnitOfWork.Current, @emailAttachmentHistory);
			
			return retval;
		}
		
		public bool DiscardEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachmentHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@emailAttachmentHistory == null)
				throw new ArgumentNullException("emailAttachmentHistory");
				
			if (@emailAttachmentHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
				
				query = wrapper.Disposable.@EmailAttachmentHistories.SingleOrDefault(lo => lo.@EmailAttachmentHistoryId == @emailAttachmentHistory.@EmailAttachmentHistoryId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@EmailAttachmentHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
					
					return false;
				}

				this.OnPostDeleteEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
				
				@emailAttachmentHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnPostInsertEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnPreUpdateEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnPostUpdateEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnPreDeleteEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnPostDeleteEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnSaveConflictEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnDiscardConflictEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnSelectEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);		
		public EventLogExtent LoadEventLogExtent(DateTime @minCreationTimestamp, Int32 @avgDifferenceTimestamps, DateTime @maxModificationTimestamp)
		{
			EventLogExtent @eventLogExtent;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@eventLogExtent = this.LoadEventLogExtent(unitOfWork, @minCreationTimestamp, @avgDifferenceTimestamps, @maxModificationTimestamp);

					unitOfWork.Complete();
				}
			}
			else
				@eventLogExtent = this.LoadEventLogExtent(UnitOfWork.Current, @minCreationTimestamp, @avgDifferenceTimestamps, @maxModificationTimestamp);
			
			return @eventLogExtent;
		}
		
		public EventLogExtent LoadEventLogExtent(IUnitOfWork unitOfWork, DateTime @minCreationTimestamp, Int32 @avgDifferenceTimestamps, DateTime @maxModificationTimestamp)
		{			
			EventLogExtent @eventLogExtent;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.EventLogExtents.SingleOrDefault(lo => lo.@MinCreationTimestamp == @minCreationTimestamp && lo.@AvgDifferenceTimestamps == @avgDifferenceTimestamps && lo.@MaxModificationTimestamp == @maxModificationTimestamp);

				if ((object)query == null)
					return null; // does not exist
				
				@eventLogExtent = new EventLogExtent()
								{
									// map result to POCO from L2S object
									@MinCreationTimestamp = query.@MinCreationTimestamp,
									@AvgDifferenceTimestamps = query.@AvgDifferenceTimestamps,
									@MaxModificationTimestamp = query.@MaxModificationTimestamp
								};	

				this.OnSelectEventLogExtent(unitOfWork, @eventLogExtent);

				return @eventLogExtent;
			}
		}
		
		public IEnumerable<EventLogExtent> FindEventLogExtents(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent>> callback)
		{
			IEnumerable<EventLogExtent> @eventLogExtents;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@eventLogExtents = this.FindEventLogExtents(unitOfWork, callback);

					@eventLogExtents = @eventLogExtents.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@eventLogExtents = this.FindEventLogExtents(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @eventLogExtents;
		}
		
		public IEnumerable<EventLogExtent> FindEventLogExtents(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent>> callback)
		{
			IEnumerable<EventLogExtent> @eventLogExtents;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@EventLogExtents);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@eventLogExtents = queryable.Select(lo => new EventLogExtent()
												 {
													// map results to POCOs from L2S objects
													@MinCreationTimestamp = lo.@MinCreationTimestamp,
													@AvgDifferenceTimestamps = lo.@AvgDifferenceTimestamps,
													@MaxModificationTimestamp = lo.@MaxModificationTimestamp
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (EventLogExtent @eventLogExtent in @eventLogExtents)
				{
					this.OnSelectEventLogExtent(unitOfWork, @eventLogExtent);
					
					yield return @eventLogExtent; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveEventLogExtent(EventLogExtent @eventLogExtent)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveEventLogExtent(unitOfWork, @eventLogExtent);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveEventLogExtent(UnitOfWork.Current, @eventLogExtent);
			
			return retval;
		}
		
		public bool SaveEventLogExtent(IUnitOfWork unitOfWork, EventLogExtent @eventLogExtent)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@eventLogExtent == null)
				throw new ArgumentNullException("eventLogExtent");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @eventLogExtent.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEventLogExtent(unitOfWork, @eventLogExtent);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent();

					wrapper.Disposable.EventLogExtents.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEventLogExtent(unitOfWork, @eventLogExtent);
					
					query = wrapper.Disposable.EventLogExtents.SingleOrDefault(lo => lo.@MinCreationTimestamp == @eventLogExtent.@MinCreationTimestamp && lo.@AvgDifferenceTimestamps == @eventLogExtent.@AvgDifferenceTimestamps && lo.@MaxModificationTimestamp == @eventLogExtent.@MaxModificationTimestamp);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@MinCreationTimestamp = @eventLogExtent.@MinCreationTimestamp;
				query.@AvgDifferenceTimestamps = @eventLogExtent.@AvgDifferenceTimestamps;
				query.@MaxModificationTimestamp = @eventLogExtent.@MaxModificationTimestamp;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEventLogExtent(unitOfWork, @eventLogExtent);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@eventLogExtent.@MinCreationTimestamp = query.@MinCreationTimestamp;
				@eventLogExtent.@AvgDifferenceTimestamps = query.@AvgDifferenceTimestamps;
				@eventLogExtent.@MaxModificationTimestamp = query.@MaxModificationTimestamp;
						
				if (wasNew)
				{
					this.OnPostInsertEventLogExtent(unitOfWork, @eventLogExtent);
				}
				else
				{
					this.OnPostUpdateEventLogExtent(unitOfWork, @eventLogExtent);
				}

				return true;
			}
		}
		
		public bool DiscardEventLogExtent(EventLogExtent @eventLogExtent)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardEventLogExtent(unitOfWork, @eventLogExtent);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardEventLogExtent(UnitOfWork.Current, @eventLogExtent);
			
			return retval;
		}
		
		public bool DiscardEventLogExtent(IUnitOfWork unitOfWork, EventLogExtent @eventLogExtent)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@eventLogExtent == null)
				throw new ArgumentNullException("eventLogExtent");
				
			if (@eventLogExtent.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEventLogExtent(unitOfWork, @eventLogExtent);
				
				query = wrapper.Disposable.@EventLogExtents.SingleOrDefault(lo => lo.@MinCreationTimestamp == @eventLogExtent.@MinCreationTimestamp && lo.@AvgDifferenceTimestamps == @eventLogExtent.@AvgDifferenceTimestamps && lo.@MaxModificationTimestamp == @eventLogExtent.@MaxModificationTimestamp);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@EventLogExtents.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEventLogExtent(unitOfWork, @eventLogExtent);
					
					return false;
				}

				this.OnPostDeleteEventLogExtent(unitOfWork, @eventLogExtent);
				
				@eventLogExtent.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEventLogExtent(IUnitOfWork unitOfWork, EventLogExtent @eventLogExtent);
		
		partial void OnPostInsertEventLogExtent(IUnitOfWork unitOfWork, EventLogExtent @eventLogExtent);
		
		partial void OnPreUpdateEventLogExtent(IUnitOfWork unitOfWork, EventLogExtent @eventLogExtent);
		
		partial void OnPostUpdateEventLogExtent(IUnitOfWork unitOfWork, EventLogExtent @eventLogExtent);
		
		partial void OnPreDeleteEventLogExtent(IUnitOfWork unitOfWork, EventLogExtent @eventLogExtent);
		
		partial void OnPostDeleteEventLogExtent(IUnitOfWork unitOfWork, EventLogExtent @eventLogExtent);
		
		partial void OnSaveConflictEventLogExtent(IUnitOfWork unitOfWork, EventLogExtent @eventLogExtent);
		
		partial void OnDiscardConflictEventLogExtent(IUnitOfWork unitOfWork, EventLogExtent @eventLogExtent);
		
		partial void OnSelectEventLogExtent(IUnitOfWork unitOfWork, EventLogExtent @eventLogExtent);		
		public User LoadUser(Int32 @userId)
		{
			User @user;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@user = this.LoadUser(unitOfWork, @userId);

					unitOfWork.Complete();
				}
			}
			else
				@user = this.LoadUser(UnitOfWork.Current, @userId);
			
			return @user;
		}
		
		public User LoadUser(IUnitOfWork unitOfWork, Int32 @userId)
		{			
			User @user;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.User query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.Users.SingleOrDefault(lo => lo.@UserId == @userId);

				if ((object)query == null)
					return null; // does not exist
				
				@user = new User()
								{
									// map result to POCO from L2S object
									@UserId = query.@UserId,
									@EmailAddress = query.@EmailAddress,
									@UserName = query.@UserName,
									@SaltValue = query.@SaltValue,
									@PasswordHash = query.@PasswordHash,
									@Question = query.@Question,
									@AnswerHash = query.@AnswerHash,
									@LastLoginSuccessTimestamp = query.@LastLoginSuccessTimestamp,
									@LastLoginFailureTimestamp = query.@LastLoginFailureTimestamp,
									@FailedLoginCount = query.@FailedLoginCount,
									@MustChangePassword = query.@MustChangePassword,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectUser(unitOfWork, @user);

				return @user;
			}
		}
		
		public IEnumerable<User> FindUsers(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.User>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.User>> callback)
		{
			IEnumerable<User> @users;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@users = this.FindUsers(unitOfWork, callback);

					@users = @users.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@users = this.FindUsers(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @users;
		}
		
		public IEnumerable<User> FindUsers(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.User>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.User>> callback)
		{
			IEnumerable<User> @users;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.User> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@Users);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@users = queryable.Select(lo => new User()
												 {
													// map results to POCOs from L2S objects
													@UserId = lo.@UserId,
													@EmailAddress = lo.@EmailAddress,
													@UserName = lo.@UserName,
													@SaltValue = lo.@SaltValue,
													@PasswordHash = lo.@PasswordHash,
													@Question = lo.@Question,
													@AnswerHash = lo.@AnswerHash,
													@LastLoginSuccessTimestamp = lo.@LastLoginSuccessTimestamp,
													@LastLoginFailureTimestamp = lo.@LastLoginFailureTimestamp,
													@FailedLoginCount = lo.@FailedLoginCount,
													@MustChangePassword = lo.@MustChangePassword,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (User @user in @users)
				{
					this.OnSelectUser(unitOfWork, @user);
					
					yield return @user; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveUser(User @user)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveUser(unitOfWork, @user);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveUser(UnitOfWork.Current, @user);
			
			return retval;
		}
		
		public bool SaveUser(IUnitOfWork unitOfWork, User @user)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.User query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@user == null)
				throw new ArgumentNullException("user");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @user.IsNew;

				if (wasNew)
				{
					this.OnPreInsertUser(unitOfWork, @user);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.User();

					wrapper.Disposable.Users.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateUser(unitOfWork, @user);
					
					query = wrapper.Disposable.Users.SingleOrDefault(lo => lo.@UserId == @user.@UserId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@UserId = @user.@UserId;
				query.@EmailAddress = @user.@EmailAddress;
				query.@UserName = @user.@UserName;
				query.@SaltValue = @user.@SaltValue;
				query.@PasswordHash = @user.@PasswordHash;
				query.@Question = @user.@Question;
				query.@AnswerHash = @user.@AnswerHash;
				query.@LastLoginSuccessTimestamp = @user.@LastLoginSuccessTimestamp;
				query.@LastLoginFailureTimestamp = @user.@LastLoginFailureTimestamp;
				query.@FailedLoginCount = @user.@FailedLoginCount;
				query.@MustChangePassword = @user.@MustChangePassword;
				query.@SortOrder = @user.@SortOrder;
				query.@CreationTimestamp = @user.@CreationTimestamp;
				query.@ModificationTimestamp = @user.@ModificationTimestamp;
				query.@CreationUserId = @user.@CreationUserId;
				query.@ModificationUserId = @user.@ModificationUserId;
				query.@LogicalDelete = @user.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictUser(unitOfWork, @user);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@user.@UserId = query.@UserId;
				@user.@EmailAddress = query.@EmailAddress;
				@user.@UserName = query.@UserName;
				@user.@SaltValue = query.@SaltValue;
				@user.@PasswordHash = query.@PasswordHash;
				@user.@Question = query.@Question;
				@user.@AnswerHash = query.@AnswerHash;
				@user.@LastLoginSuccessTimestamp = query.@LastLoginSuccessTimestamp;
				@user.@LastLoginFailureTimestamp = query.@LastLoginFailureTimestamp;
				@user.@FailedLoginCount = query.@FailedLoginCount;
				@user.@MustChangePassword = query.@MustChangePassword;
				@user.@SortOrder = query.@SortOrder;
				@user.@CreationTimestamp = query.@CreationTimestamp;
				@user.@ModificationTimestamp = query.@ModificationTimestamp;
				@user.@CreationUserId = query.@CreationUserId;
				@user.@ModificationUserId = query.@ModificationUserId;
				@user.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertUser(unitOfWork, @user);
				}
				else
				{
					this.OnPostUpdateUser(unitOfWork, @user);
				}

				return true;
			}
		}
		
		public bool DiscardUser(User @user)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardUser(unitOfWork, @user);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardUser(UnitOfWork.Current, @user);
			
			return retval;
		}
		
		public bool DiscardUser(IUnitOfWork unitOfWork, User @user)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.User query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@user == null)
				throw new ArgumentNullException("user");
				
			if (@user.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteUser(unitOfWork, @user);
				
				query = wrapper.Disposable.@Users.SingleOrDefault(lo => lo.@UserId == @user.@UserId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@Users.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictUser(unitOfWork, @user);
					
					return false;
				}

				this.OnPostDeleteUser(unitOfWork, @user);
				
				@user.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertUser(IUnitOfWork unitOfWork, User @user);
		
		partial void OnPostInsertUser(IUnitOfWork unitOfWork, User @user);
		
		partial void OnPreUpdateUser(IUnitOfWork unitOfWork, User @user);
		
		partial void OnPostUpdateUser(IUnitOfWork unitOfWork, User @user);
		
		partial void OnPreDeleteUser(IUnitOfWork unitOfWork, User @user);
		
		partial void OnPostDeleteUser(IUnitOfWork unitOfWork, User @user);
		
		partial void OnSaveConflictUser(IUnitOfWork unitOfWork, User @user);
		
		partial void OnDiscardConflictUser(IUnitOfWork unitOfWork, User @user);
		
		partial void OnSelectUser(IUnitOfWork unitOfWork, User @user);		

		public PropertyBag LoadPropertyBag(Int32 @propertyBagId)
		{
			PropertyBag @propertyBag;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@propertyBag = this.LoadPropertyBag(unitOfWork, @propertyBagId);

					unitOfWork.Complete();
				}
			}
			else
				@propertyBag = this.LoadPropertyBag(UnitOfWork.Current, @propertyBagId);
			
			return @propertyBag;
		}
		
		public PropertyBag LoadPropertyBag(IUnitOfWork unitOfWork, Int32 @propertyBagId)
		{			
			PropertyBag @propertyBag;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBag query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.PropertyBags.SingleOrDefault(lo => lo.@PropertyBagId == @propertyBagId);

				if ((object)query == null)
					return null; // does not exist
				
				@propertyBag = new PropertyBag()
								{
									// map result to POCO from L2S object
									@PropertyBagId = query.@PropertyBagId,
									@PropertyKey = query.@PropertyKey,
									@PropertyType = query.@PropertyType,
									@PropertyValue = query.@PropertyValue,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectPropertyBag(unitOfWork, @propertyBag);

				return @propertyBag;
			}
		}
		
		public IEnumerable<PropertyBag> FindPropertyBags(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBag>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBag>> callback)
		{
			IEnumerable<PropertyBag> @propertyBags;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@propertyBags = this.FindPropertyBags(unitOfWork, callback);

					@propertyBags = @propertyBags.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@propertyBags = this.FindPropertyBags(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @propertyBags;
		}
		
		public IEnumerable<PropertyBag> FindPropertyBags(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBag>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBag>> callback)
		{
			IEnumerable<PropertyBag> @propertyBags;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBag> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@PropertyBags);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@propertyBags = queryable.Select(lo => new PropertyBag()
												 {
													// map results to POCOs from L2S objects
													@PropertyBagId = lo.@PropertyBagId,
													@PropertyKey = lo.@PropertyKey,
													@PropertyType = lo.@PropertyType,
													@PropertyValue = lo.@PropertyValue,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (PropertyBag @propertyBag in @propertyBags)
				{
					this.OnSelectPropertyBag(unitOfWork, @propertyBag);
					
					yield return @propertyBag; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SavePropertyBag(PropertyBag @propertyBag)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SavePropertyBag(unitOfWork, @propertyBag);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SavePropertyBag(UnitOfWork.Current, @propertyBag);
			
			return retval;
		}
		
		public bool SavePropertyBag(IUnitOfWork unitOfWork, PropertyBag @propertyBag)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBag query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@propertyBag == null)
				throw new ArgumentNullException("propertyBag");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @propertyBag.IsNew;

				if (wasNew)
				{
					this.OnPreInsertPropertyBag(unitOfWork, @propertyBag);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBag();

					wrapper.Disposable.PropertyBags.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdatePropertyBag(unitOfWork, @propertyBag);
					
					query = wrapper.Disposable.PropertyBags.SingleOrDefault(lo => lo.@PropertyBagId == @propertyBag.@PropertyBagId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@PropertyBagId = @propertyBag.@PropertyBagId;
				query.@PropertyKey = @propertyBag.@PropertyKey;
				query.@PropertyType = @propertyBag.@PropertyType;
				query.@PropertyValue = @propertyBag.@PropertyValue;
				query.@SortOrder = @propertyBag.@SortOrder;
				query.@CreationTimestamp = @propertyBag.@CreationTimestamp;
				query.@ModificationTimestamp = @propertyBag.@ModificationTimestamp;
				query.@CreationUserId = @propertyBag.@CreationUserId;
				query.@ModificationUserId = @propertyBag.@ModificationUserId;
				query.@LogicalDelete = @propertyBag.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictPropertyBag(unitOfWork, @propertyBag);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@propertyBag.@PropertyBagId = query.@PropertyBagId;
				@propertyBag.@PropertyKey = query.@PropertyKey;
				@propertyBag.@PropertyType = query.@PropertyType;
				@propertyBag.@PropertyValue = query.@PropertyValue;
				@propertyBag.@SortOrder = query.@SortOrder;
				@propertyBag.@CreationTimestamp = query.@CreationTimestamp;
				@propertyBag.@ModificationTimestamp = query.@ModificationTimestamp;
				@propertyBag.@CreationUserId = query.@CreationUserId;
				@propertyBag.@ModificationUserId = query.@ModificationUserId;
				@propertyBag.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertPropertyBag(unitOfWork, @propertyBag);
				}
				else
				{
					this.OnPostUpdatePropertyBag(unitOfWork, @propertyBag);
				}

				return true;
			}
		}
		
		public bool DiscardPropertyBag(PropertyBag @propertyBag)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardPropertyBag(unitOfWork, @propertyBag);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardPropertyBag(UnitOfWork.Current, @propertyBag);
			
			return retval;
		}
		
		public bool DiscardPropertyBag(IUnitOfWork unitOfWork, PropertyBag @propertyBag)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.PropertyBag query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@propertyBag == null)
				throw new ArgumentNullException("propertyBag");
				
			if (@propertyBag.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeletePropertyBag(unitOfWork, @propertyBag);
				
				query = wrapper.Disposable.@PropertyBags.SingleOrDefault(lo => lo.@PropertyBagId == @propertyBag.@PropertyBagId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@PropertyBags.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictPropertyBag(unitOfWork, @propertyBag);
					
					return false;
				}

				this.OnPostDeletePropertyBag(unitOfWork, @propertyBag);
				
				@propertyBag.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertPropertyBag(IUnitOfWork unitOfWork, PropertyBag @propertyBag);
		
		partial void OnPostInsertPropertyBag(IUnitOfWork unitOfWork, PropertyBag @propertyBag);
		
		partial void OnPreUpdatePropertyBag(IUnitOfWork unitOfWork, PropertyBag @propertyBag);
		
		partial void OnPostUpdatePropertyBag(IUnitOfWork unitOfWork, PropertyBag @propertyBag);
		
		partial void OnPreDeletePropertyBag(IUnitOfWork unitOfWork, PropertyBag @propertyBag);
		
		partial void OnPostDeletePropertyBag(IUnitOfWork unitOfWork, PropertyBag @propertyBag);
		
		partial void OnSaveConflictPropertyBag(IUnitOfWork unitOfWork, PropertyBag @propertyBag);
		
		partial void OnDiscardConflictPropertyBag(IUnitOfWork unitOfWork, PropertyBag @propertyBag);
		
		partial void OnSelectPropertyBag(IUnitOfWork unitOfWork, PropertyBag @propertyBag);		

		public EventLog LoadEventLog(Int32 @eventLogId)
		{
			EventLog @eventLog;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@eventLog = this.LoadEventLog(unitOfWork, @eventLogId);

					unitOfWork.Complete();
				}
			}
			else
				@eventLog = this.LoadEventLog(UnitOfWork.Current, @eventLogId);
			
			return @eventLog;
		}
		
		public EventLog LoadEventLog(IUnitOfWork unitOfWork, Int32 @eventLogId)
		{			
			EventLog @eventLog;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLog query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.EventLogs.SingleOrDefault(lo => lo.@EventLogId == @eventLogId);

				if ((object)query == null)
					return null; // does not exist
				
				@eventLog = new EventLog()
								{
									// map result to POCO from L2S object
									@EventLogId = query.@EventLogId,
									@EventText = query.@EventText,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEventLog(unitOfWork, @eventLog);

				return @eventLog;
			}
		}
		
		public IEnumerable<EventLog> FindEventLogs(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLog>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLog>> callback)
		{
			IEnumerable<EventLog> @eventLogs;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@eventLogs = this.FindEventLogs(unitOfWork, callback);

					@eventLogs = @eventLogs.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@eventLogs = this.FindEventLogs(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @eventLogs;
		}
		
		public IEnumerable<EventLog> FindEventLogs(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLog>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLog>> callback)
		{
			IEnumerable<EventLog> @eventLogs;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLog> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@EventLogs);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@eventLogs = queryable.Select(lo => new EventLog()
												 {
													// map results to POCOs from L2S objects
													@EventLogId = lo.@EventLogId,
													@EventText = lo.@EventText,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (EventLog @eventLog in @eventLogs)
				{
					this.OnSelectEventLog(unitOfWork, @eventLog);
					
					yield return @eventLog; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveEventLog(EventLog @eventLog)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveEventLog(unitOfWork, @eventLog);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveEventLog(UnitOfWork.Current, @eventLog);
			
			return retval;
		}
		
		public bool SaveEventLog(IUnitOfWork unitOfWork, EventLog @eventLog)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLog query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@eventLog == null)
				throw new ArgumentNullException("eventLog");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @eventLog.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEventLog(unitOfWork, @eventLog);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLog();

					wrapper.Disposable.EventLogs.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEventLog(unitOfWork, @eventLog);
					
					query = wrapper.Disposable.EventLogs.SingleOrDefault(lo => lo.@EventLogId == @eventLog.@EventLogId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@EventLogId = @eventLog.@EventLogId;
				query.@EventText = @eventLog.@EventText;
				query.@SortOrder = @eventLog.@SortOrder;
				query.@CreationTimestamp = @eventLog.@CreationTimestamp;
				query.@ModificationTimestamp = @eventLog.@ModificationTimestamp;
				query.@CreationUserId = @eventLog.@CreationUserId;
				query.@ModificationUserId = @eventLog.@ModificationUserId;
				query.@LogicalDelete = @eventLog.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEventLog(unitOfWork, @eventLog);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@eventLog.@EventLogId = query.@EventLogId;
				@eventLog.@EventText = query.@EventText;
				@eventLog.@SortOrder = query.@SortOrder;
				@eventLog.@CreationTimestamp = query.@CreationTimestamp;
				@eventLog.@ModificationTimestamp = query.@ModificationTimestamp;
				@eventLog.@CreationUserId = query.@CreationUserId;
				@eventLog.@ModificationUserId = query.@ModificationUserId;
				@eventLog.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEventLog(unitOfWork, @eventLog);
				}
				else
				{
					this.OnPostUpdateEventLog(unitOfWork, @eventLog);
				}

				return true;
			}
		}
		
		public bool DiscardEventLog(EventLog @eventLog)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardEventLog(unitOfWork, @eventLog);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardEventLog(UnitOfWork.Current, @eventLog);
			
			return retval;
		}
		
		public bool DiscardEventLog(IUnitOfWork unitOfWork, EventLog @eventLog)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLog query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@eventLog == null)
				throw new ArgumentNullException("eventLog");
				
			if (@eventLog.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEventLog(unitOfWork, @eventLog);
				
				query = wrapper.Disposable.@EventLogs.SingleOrDefault(lo => lo.@EventLogId == @eventLog.@EventLogId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@EventLogs.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEventLog(unitOfWork, @eventLog);
					
					return false;
				}

				this.OnPostDeleteEventLog(unitOfWork, @eventLog);
				
				@eventLog.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);
		
		partial void OnPostInsertEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);
		
		partial void OnPreUpdateEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);
		
		partial void OnPostUpdateEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);
		
		partial void OnPreDeleteEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);
		
		partial void OnPostDeleteEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);
		
		partial void OnSaveConflictEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);
		
		partial void OnDiscardConflictEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);
		
		partial void OnSelectEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);		

		public EmailMessage LoadEmailMessage(Int32 @emailMessageId)
		{
			EmailMessage @emailMessage;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@emailMessage = this.LoadEmailMessage(unitOfWork, @emailMessageId);

					unitOfWork.Complete();
				}
			}
			else
				@emailMessage = this.LoadEmailMessage(UnitOfWork.Current, @emailMessageId);
			
			return @emailMessage;
		}
		
		public EmailMessage LoadEmailMessage(IUnitOfWork unitOfWork, Int32 @emailMessageId)
		{			
			EmailMessage @emailMessage;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessage query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.EmailMessages.SingleOrDefault(lo => lo.@EmailMessageId == @emailMessageId);

				if ((object)query == null)
					return null; // does not exist
				
				@emailMessage = new EmailMessage()
								{
									// map result to POCO from L2S object
									@EmailMessageId = query.@EmailMessageId,
									@From = query.@From,
									@Sender = query.@Sender,
									@ReplyTo = query.@ReplyTo,
									@To = query.@To,
									@CarbonCopy = query.@CarbonCopy,
									@BlindCarbonCopy = query.@BlindCarbonCopy,
									@Subject = query.@Subject,
									@IsBodyHtml = query.@IsBodyHtml,
									@Body = query.@Body,
									@Processed = query.@Processed,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEmailMessage(unitOfWork, @emailMessage);

				return @emailMessage;
			}
		}
		
		public IEnumerable<EmailMessage> FindEmailMessages(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessage>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessage>> callback)
		{
			IEnumerable<EmailMessage> @emailMessages;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@emailMessages = this.FindEmailMessages(unitOfWork, callback);

					@emailMessages = @emailMessages.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@emailMessages = this.FindEmailMessages(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @emailMessages;
		}
		
		public IEnumerable<EmailMessage> FindEmailMessages(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessage>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessage>> callback)
		{
			IEnumerable<EmailMessage> @emailMessages;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessage> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@EmailMessages);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@emailMessages = queryable.Select(lo => new EmailMessage()
												 {
													// map results to POCOs from L2S objects
													@EmailMessageId = lo.@EmailMessageId,
													@From = lo.@From,
													@Sender = lo.@Sender,
													@ReplyTo = lo.@ReplyTo,
													@To = lo.@To,
													@CarbonCopy = lo.@CarbonCopy,
													@BlindCarbonCopy = lo.@BlindCarbonCopy,
													@Subject = lo.@Subject,
													@IsBodyHtml = lo.@IsBodyHtml,
													@Body = lo.@Body,
													@Processed = lo.@Processed,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (EmailMessage @emailMessage in @emailMessages)
				{
					this.OnSelectEmailMessage(unitOfWork, @emailMessage);
					
					yield return @emailMessage; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveEmailMessage(EmailMessage @emailMessage)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveEmailMessage(unitOfWork, @emailMessage);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveEmailMessage(UnitOfWork.Current, @emailMessage);
			
			return retval;
		}
		
		public bool SaveEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessage query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@emailMessage == null)
				throw new ArgumentNullException("emailMessage");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @emailMessage.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEmailMessage(unitOfWork, @emailMessage);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessage();

					wrapper.Disposable.EmailMessages.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEmailMessage(unitOfWork, @emailMessage);
					
					query = wrapper.Disposable.EmailMessages.SingleOrDefault(lo => lo.@EmailMessageId == @emailMessage.@EmailMessageId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@EmailMessageId = @emailMessage.@EmailMessageId;
				query.@From = @emailMessage.@From;
				query.@Sender = @emailMessage.@Sender;
				query.@ReplyTo = @emailMessage.@ReplyTo;
				query.@To = @emailMessage.@To;
				query.@CarbonCopy = @emailMessage.@CarbonCopy;
				query.@BlindCarbonCopy = @emailMessage.@BlindCarbonCopy;
				query.@Subject = @emailMessage.@Subject;
				query.@IsBodyHtml = @emailMessage.@IsBodyHtml;
				query.@Body = @emailMessage.@Body;
				query.@Processed = @emailMessage.@Processed;
				query.@SortOrder = @emailMessage.@SortOrder;
				query.@CreationTimestamp = @emailMessage.@CreationTimestamp;
				query.@ModificationTimestamp = @emailMessage.@ModificationTimestamp;
				query.@CreationUserId = @emailMessage.@CreationUserId;
				query.@ModificationUserId = @emailMessage.@ModificationUserId;
				query.@LogicalDelete = @emailMessage.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEmailMessage(unitOfWork, @emailMessage);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@emailMessage.@EmailMessageId = query.@EmailMessageId;
				@emailMessage.@From = query.@From;
				@emailMessage.@Sender = query.@Sender;
				@emailMessage.@ReplyTo = query.@ReplyTo;
				@emailMessage.@To = query.@To;
				@emailMessage.@CarbonCopy = query.@CarbonCopy;
				@emailMessage.@BlindCarbonCopy = query.@BlindCarbonCopy;
				@emailMessage.@Subject = query.@Subject;
				@emailMessage.@IsBodyHtml = query.@IsBodyHtml;
				@emailMessage.@Body = query.@Body;
				@emailMessage.@Processed = query.@Processed;
				@emailMessage.@SortOrder = query.@SortOrder;
				@emailMessage.@CreationTimestamp = query.@CreationTimestamp;
				@emailMessage.@ModificationTimestamp = query.@ModificationTimestamp;
				@emailMessage.@CreationUserId = query.@CreationUserId;
				@emailMessage.@ModificationUserId = query.@ModificationUserId;
				@emailMessage.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEmailMessage(unitOfWork, @emailMessage);
				}
				else
				{
					this.OnPostUpdateEmailMessage(unitOfWork, @emailMessage);
				}

				return true;
			}
		}
		
		public bool DiscardEmailMessage(EmailMessage @emailMessage)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardEmailMessage(unitOfWork, @emailMessage);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardEmailMessage(UnitOfWork.Current, @emailMessage);
			
			return retval;
		}
		
		public bool DiscardEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailMessage query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@emailMessage == null)
				throw new ArgumentNullException("emailMessage");
				
			if (@emailMessage.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEmailMessage(unitOfWork, @emailMessage);
				
				query = wrapper.Disposable.@EmailMessages.SingleOrDefault(lo => lo.@EmailMessageId == @emailMessage.@EmailMessageId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@EmailMessages.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEmailMessage(unitOfWork, @emailMessage);
					
					return false;
				}

				this.OnPostDeleteEmailMessage(unitOfWork, @emailMessage);
				
				@emailMessage.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);
		
		partial void OnPostInsertEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);
		
		partial void OnPreUpdateEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);
		
		partial void OnPostUpdateEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);
		
		partial void OnPreDeleteEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);
		
		partial void OnPostDeleteEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);
		
		partial void OnSaveConflictEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);
		
		partial void OnDiscardConflictEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);
		
		partial void OnSelectEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);		

		public EmailAttachment LoadEmailAttachment(Int32 @emailMessageId)
		{
			EmailAttachment @emailAttachment;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@emailAttachment = this.LoadEmailAttachment(unitOfWork, @emailMessageId);

					unitOfWork.Complete();
				}
			}
			else
				@emailAttachment = this.LoadEmailAttachment(UnitOfWork.Current, @emailMessageId);
			
			return @emailAttachment;
		}
		
		public EmailAttachment LoadEmailAttachment(IUnitOfWork unitOfWork, Int32 @emailMessageId)
		{			
			EmailAttachment @emailAttachment;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachment query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.EmailAttachments.SingleOrDefault(lo => lo.@EmailMessageId == @emailMessageId);

				if ((object)query == null)
					return null; // does not exist
				
				@emailAttachment = new EmailAttachment()
								{
									// map result to POCO from L2S object
									@EmailAttachmentId = query.@EmailAttachmentId,
									@EmailMessageId = query.@EmailMessageId,
									@FileName = query.@FileName,
									@FileSize = query.@FileSize,
									@MimeType = query.@MimeType,
									@AttachmentBits = (object)query.AttachmentBits != null ? query.@AttachmentBits.ToArray() : null,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEmailAttachment(unitOfWork, @emailAttachment);

				return @emailAttachment;
			}
		}
		
		public IEnumerable<EmailAttachment> FindEmailAttachments(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachment>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachment>> callback)
		{
			IEnumerable<EmailAttachment> @emailAttachments;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@emailAttachments = this.FindEmailAttachments(unitOfWork, callback);

					@emailAttachments = @emailAttachments.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@emailAttachments = this.FindEmailAttachments(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @emailAttachments;
		}
		
		public IEnumerable<EmailAttachment> FindEmailAttachments(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachment>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachment>> callback)
		{
			IEnumerable<EmailAttachment> @emailAttachments;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachment> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@EmailAttachments);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@emailAttachments = queryable.Select(lo => new EmailAttachment()
												 {
													// map results to POCOs from L2S objects
													@EmailAttachmentId = lo.@EmailAttachmentId,
													@EmailMessageId = lo.@EmailMessageId,
													@FileName = lo.@FileName,
													@FileSize = lo.@FileSize,
													@MimeType = lo.@MimeType,
													@AttachmentBits = (object)lo.@AttachmentBits != null ? lo.@AttachmentBits.ToArray() : null,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (EmailAttachment @emailAttachment in @emailAttachments)
				{
					this.OnSelectEmailAttachment(unitOfWork, @emailAttachment);
					
					yield return @emailAttachment; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveEmailAttachment(EmailAttachment @emailAttachment)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveEmailAttachment(unitOfWork, @emailAttachment);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveEmailAttachment(UnitOfWork.Current, @emailAttachment);
			
			return retval;
		}
		
		public bool SaveEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachment query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@emailAttachment == null)
				throw new ArgumentNullException("emailAttachment");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @emailAttachment.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEmailAttachment(unitOfWork, @emailAttachment);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachment();

					wrapper.Disposable.EmailAttachments.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEmailAttachment(unitOfWork, @emailAttachment);
					
					query = wrapper.Disposable.EmailAttachments.SingleOrDefault(lo => lo.@EmailMessageId == @emailAttachment.@EmailMessageId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@EmailAttachmentId = @emailAttachment.@EmailAttachmentId;
				query.@EmailMessageId = @emailAttachment.@EmailMessageId;
				query.@FileName = @emailAttachment.@FileName;
				query.@FileSize = @emailAttachment.@FileSize;
				query.@MimeType = @emailAttachment.@MimeType;
				query.@AttachmentBits = @emailAttachment.@AttachmentBits;
				query.@SortOrder = @emailAttachment.@SortOrder;
				query.@CreationTimestamp = @emailAttachment.@CreationTimestamp;
				query.@ModificationTimestamp = @emailAttachment.@ModificationTimestamp;
				query.@CreationUserId = @emailAttachment.@CreationUserId;
				query.@ModificationUserId = @emailAttachment.@ModificationUserId;
				query.@LogicalDelete = @emailAttachment.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEmailAttachment(unitOfWork, @emailAttachment);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@emailAttachment.@EmailAttachmentId = query.@EmailAttachmentId;
				@emailAttachment.@EmailMessageId = query.@EmailMessageId;
				@emailAttachment.@FileName = query.@FileName;
				@emailAttachment.@FileSize = query.@FileSize;
				@emailAttachment.@MimeType = query.@MimeType;
				@emailAttachment.@AttachmentBits = (object)query.@AttachmentBits != null ? query.@AttachmentBits.ToArray() : null;
				@emailAttachment.@SortOrder = query.@SortOrder;
				@emailAttachment.@CreationTimestamp = query.@CreationTimestamp;
				@emailAttachment.@ModificationTimestamp = query.@ModificationTimestamp;
				@emailAttachment.@CreationUserId = query.@CreationUserId;
				@emailAttachment.@ModificationUserId = query.@ModificationUserId;
				@emailAttachment.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEmailAttachment(unitOfWork, @emailAttachment);
				}
				else
				{
					this.OnPostUpdateEmailAttachment(unitOfWork, @emailAttachment);
				}

				return true;
			}
		}
		
		public bool DiscardEmailAttachment(EmailAttachment @emailAttachment)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardEmailAttachment(unitOfWork, @emailAttachment);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardEmailAttachment(UnitOfWork.Current, @emailAttachment);
			
			return retval;
		}
		
		public bool DiscardEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EmailAttachment query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@emailAttachment == null)
				throw new ArgumentNullException("emailAttachment");
				
			if (@emailAttachment.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEmailAttachment(unitOfWork, @emailAttachment);
				
				query = wrapper.Disposable.@EmailAttachments.SingleOrDefault(lo => lo.@EmailMessageId == @emailAttachment.@EmailMessageId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@EmailAttachments.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEmailAttachment(unitOfWork, @emailAttachment);
					
					return false;
				}

				this.OnPostDeleteEmailAttachment(unitOfWork, @emailAttachment);
				
				@emailAttachment.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);
		
		partial void OnPostInsertEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);
		
		partial void OnPreUpdateEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);
		
		partial void OnPostUpdateEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);
		
		partial void OnPreDeleteEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);
		
		partial void OnPostDeleteEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);
		
		partial void OnSaveConflictEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);
		
		partial void OnDiscardConflictEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);
		
		partial void OnSelectEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);		
		public TabWithPrimaryKeyAsIdentity LoadTabWithPrimaryKeyAsIdentity(Int32 @colIntIdPk)
		{
			TabWithPrimaryKeyAsIdentity @tabWithPrimaryKeyAsIdentity;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tabWithPrimaryKeyAsIdentity = this.LoadTabWithPrimaryKeyAsIdentity(unitOfWork, @colIntIdPk);

					unitOfWork.Complete();
				}
			}
			else
				@tabWithPrimaryKeyAsIdentity = this.LoadTabWithPrimaryKeyAsIdentity(UnitOfWork.Current, @colIntIdPk);
			
			return @tabWithPrimaryKeyAsIdentity;
		}
		
		public TabWithPrimaryKeyAsIdentity LoadTabWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, Int32 @colIntIdPk)
		{			
			TabWithPrimaryKeyAsIdentity @tabWithPrimaryKeyAsIdentity;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TabWithPrimaryKeyAsIdentities.SingleOrDefault(lo => lo.@ColIntIdPk == @colIntIdPk);

				if ((object)query == null)
					return null; // does not exist
				
				@tabWithPrimaryKeyAsIdentity = new TabWithPrimaryKeyAsIdentity()
								{
									// map result to POCO from L2S object
									@ColIntIdPk = query.@ColIntIdPk,
									@ColBigint = query.@ColBigint,
									@ColBinary = (object)query.ColBinary != null ? query.@ColBinary.ToArray() : null,
									@ColBit = query.@ColBit,
									@ColChar = query.@ColChar,
									@ColDate = query.@ColDate,
									@ColDatetime = query.@ColDatetime,
									@ColDatetime2 = query.@ColDatetime2,
									@ColDatetimeoffset = query.@ColDatetimeoffset,
									@ColDecimal = query.@ColDecimal,
									@ColFloat = query.@ColFloat,
									@ColImage = (object)query.ColImage != null ? query.@ColImage.ToArray() : null,
									@ColInt = query.@ColInt,
									@ColMoney = query.@ColMoney,
									@ColNchar = query.@ColNchar,
									@ColNtext = query.@ColNtext,
									@ColNumeric = query.@ColNumeric,
									@ColNvarchar = query.@ColNvarchar,
									@ColReal = query.@ColReal,
									@ColRowversion = query.@ColRowversion,
									@ColSmalldatetime = query.@ColSmalldatetime,
									@ColSmallint = query.@ColSmallint,
									@ColSmallmoney = query.@ColSmallmoney,
									@ColSqlVariant = query.@ColSqlVariant,
									@ColSysname = query.@ColSysname,
									@ColText = query.@ColText,
									@ColTime = query.@ColTime,
									@ColTinyint = query.@ColTinyint,
									@ColUniqueidentifier = query.@ColUniqueidentifier,
									@ColVarbinary = (object)query.ColVarbinary != null ? query.@ColVarbinary.ToArray() : null,
									@ColVarchar = query.@ColVarchar,
									@ColXml = query.@ColXml
								};	

				this.OnSelectTabWithPrimaryKeyAsIdentity(unitOfWork, @tabWithPrimaryKeyAsIdentity);

				return @tabWithPrimaryKeyAsIdentity;
			}
		}
		
		public IEnumerable<TabWithPrimaryKeyAsIdentity> FindTabWithPrimaryKeyAsIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsIdentity>> callback)
		{
			IEnumerable<TabWithPrimaryKeyAsIdentity> @tabWithPrimaryKeyAsIdentities;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tabWithPrimaryKeyAsIdentities = this.FindTabWithPrimaryKeyAsIdentities(unitOfWork, callback);

					@tabWithPrimaryKeyAsIdentities = @tabWithPrimaryKeyAsIdentities.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@tabWithPrimaryKeyAsIdentities = this.FindTabWithPrimaryKeyAsIdentities(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @tabWithPrimaryKeyAsIdentities;
		}
		
		public IEnumerable<TabWithPrimaryKeyAsIdentity> FindTabWithPrimaryKeyAsIdentities(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsIdentity>> callback)
		{
			IEnumerable<TabWithPrimaryKeyAsIdentity> @tabWithPrimaryKeyAsIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsIdentity> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TabWithPrimaryKeyAsIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tabWithPrimaryKeyAsIdentities = queryable.Select(lo => new TabWithPrimaryKeyAsIdentity()
												 {
													// map results to POCOs from L2S objects
													@ColIntIdPk = lo.@ColIntIdPk,
													@ColBigint = lo.@ColBigint,
													@ColBinary = (object)lo.@ColBinary != null ? lo.@ColBinary.ToArray() : null,
													@ColBit = lo.@ColBit,
													@ColChar = lo.@ColChar,
													@ColDate = lo.@ColDate,
													@ColDatetime = lo.@ColDatetime,
													@ColDatetime2 = lo.@ColDatetime2,
													@ColDatetimeoffset = lo.@ColDatetimeoffset,
													@ColDecimal = lo.@ColDecimal,
													@ColFloat = lo.@ColFloat,
													@ColImage = (object)lo.@ColImage != null ? lo.@ColImage.ToArray() : null,
													@ColInt = lo.@ColInt,
													@ColMoney = lo.@ColMoney,
													@ColNchar = lo.@ColNchar,
													@ColNtext = lo.@ColNtext,
													@ColNumeric = lo.@ColNumeric,
													@ColNvarchar = lo.@ColNvarchar,
													@ColReal = lo.@ColReal,
													@ColRowversion = lo.@ColRowversion,
													@ColSmalldatetime = lo.@ColSmalldatetime,
													@ColSmallint = lo.@ColSmallint,
													@ColSmallmoney = lo.@ColSmallmoney,
													@ColSqlVariant = lo.@ColSqlVariant,
													@ColSysname = lo.@ColSysname,
													@ColText = lo.@ColText,
													@ColTime = lo.@ColTime,
													@ColTinyint = lo.@ColTinyint,
													@ColUniqueidentifier = lo.@ColUniqueidentifier,
													@ColVarbinary = (object)lo.@ColVarbinary != null ? lo.@ColVarbinary.ToArray() : null,
													@ColVarchar = lo.@ColVarchar,
													@ColXml = lo.@ColXml
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TabWithPrimaryKeyAsIdentity @tabWithPrimaryKeyAsIdentity in @tabWithPrimaryKeyAsIdentities)
				{
					this.OnSelectTabWithPrimaryKeyAsIdentity(unitOfWork, @tabWithPrimaryKeyAsIdentity);
					
					yield return @tabWithPrimaryKeyAsIdentity; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTabWithPrimaryKeyAsIdentity(TabWithPrimaryKeyAsIdentity @tabWithPrimaryKeyAsIdentity)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTabWithPrimaryKeyAsIdentity(unitOfWork, @tabWithPrimaryKeyAsIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTabWithPrimaryKeyAsIdentity(UnitOfWork.Current, @tabWithPrimaryKeyAsIdentity);
			
			return retval;
		}
		
		public bool SaveTabWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsIdentity @tabWithPrimaryKeyAsIdentity)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsIdentity query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tabWithPrimaryKeyAsIdentity == null)
				throw new ArgumentNullException("tabWithPrimaryKeyAsIdentity");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tabWithPrimaryKeyAsIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTabWithPrimaryKeyAsIdentity(unitOfWork, @tabWithPrimaryKeyAsIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsIdentity();

					wrapper.Disposable.TabWithPrimaryKeyAsIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTabWithPrimaryKeyAsIdentity(unitOfWork, @tabWithPrimaryKeyAsIdentity);
					
					query = wrapper.Disposable.TabWithPrimaryKeyAsIdentities.SingleOrDefault(lo => lo.@ColIntIdPk == @tabWithPrimaryKeyAsIdentity.@ColIntIdPk);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@ColIntIdPk = @tabWithPrimaryKeyAsIdentity.@ColIntIdPk;
				query.@ColBigint = @tabWithPrimaryKeyAsIdentity.@ColBigint;
				query.@ColBinary = @tabWithPrimaryKeyAsIdentity.@ColBinary;
				query.@ColBit = @tabWithPrimaryKeyAsIdentity.@ColBit;
				query.@ColChar = @tabWithPrimaryKeyAsIdentity.@ColChar;
				query.@ColDate = @tabWithPrimaryKeyAsIdentity.@ColDate;
				query.@ColDatetime = @tabWithPrimaryKeyAsIdentity.@ColDatetime;
				query.@ColDatetime2 = @tabWithPrimaryKeyAsIdentity.@ColDatetime2;
				query.@ColDatetimeoffset = @tabWithPrimaryKeyAsIdentity.@ColDatetimeoffset;
				query.@ColDecimal = @tabWithPrimaryKeyAsIdentity.@ColDecimal;
				query.@ColFloat = @tabWithPrimaryKeyAsIdentity.@ColFloat;
				if ((object)@tabWithPrimaryKeyAsIdentity.@ColImage != null) // prevent implicit conversion of null -> exception
					query.@ColImage = @tabWithPrimaryKeyAsIdentity.@ColImage;
				query.@ColInt = @tabWithPrimaryKeyAsIdentity.@ColInt;
				query.@ColMoney = @tabWithPrimaryKeyAsIdentity.@ColMoney;
				query.@ColNchar = @tabWithPrimaryKeyAsIdentity.@ColNchar;
				query.@ColNtext = @tabWithPrimaryKeyAsIdentity.@ColNtext;
				query.@ColNumeric = @tabWithPrimaryKeyAsIdentity.@ColNumeric;
				query.@ColNvarchar = @tabWithPrimaryKeyAsIdentity.@ColNvarchar;
				query.@ColReal = @tabWithPrimaryKeyAsIdentity.@ColReal;
				query.@ColRowversion = @tabWithPrimaryKeyAsIdentity.@ColRowversion;
				query.@ColSmalldatetime = @tabWithPrimaryKeyAsIdentity.@ColSmalldatetime;
				query.@ColSmallint = @tabWithPrimaryKeyAsIdentity.@ColSmallint;
				query.@ColSmallmoney = @tabWithPrimaryKeyAsIdentity.@ColSmallmoney;
				query.@ColSqlVariant = @tabWithPrimaryKeyAsIdentity.@ColSqlVariant;
				query.@ColSysname = @tabWithPrimaryKeyAsIdentity.@ColSysname;
				query.@ColText = @tabWithPrimaryKeyAsIdentity.@ColText;
				query.@ColTime = @tabWithPrimaryKeyAsIdentity.@ColTime;
				query.@ColTinyint = @tabWithPrimaryKeyAsIdentity.@ColTinyint;
				query.@ColUniqueidentifier = @tabWithPrimaryKeyAsIdentity.@ColUniqueidentifier;
				query.@ColVarbinary = @tabWithPrimaryKeyAsIdentity.@ColVarbinary;
				query.@ColVarchar = @tabWithPrimaryKeyAsIdentity.@ColVarchar;
				query.@ColXml = @tabWithPrimaryKeyAsIdentity.@ColXml;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTabWithPrimaryKeyAsIdentity(unitOfWork, @tabWithPrimaryKeyAsIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tabWithPrimaryKeyAsIdentity.@ColIntIdPk = query.@ColIntIdPk;
				@tabWithPrimaryKeyAsIdentity.@ColBigint = query.@ColBigint;
				@tabWithPrimaryKeyAsIdentity.@ColBinary = (object)query.@ColBinary != null ? query.@ColBinary.ToArray() : null;
				@tabWithPrimaryKeyAsIdentity.@ColBit = query.@ColBit;
				@tabWithPrimaryKeyAsIdentity.@ColChar = query.@ColChar;
				@tabWithPrimaryKeyAsIdentity.@ColDate = query.@ColDate;
				@tabWithPrimaryKeyAsIdentity.@ColDatetime = query.@ColDatetime;
				@tabWithPrimaryKeyAsIdentity.@ColDatetime2 = query.@ColDatetime2;
				@tabWithPrimaryKeyAsIdentity.@ColDatetimeoffset = query.@ColDatetimeoffset;
				@tabWithPrimaryKeyAsIdentity.@ColDecimal = query.@ColDecimal;
				@tabWithPrimaryKeyAsIdentity.@ColFloat = query.@ColFloat;
				@tabWithPrimaryKeyAsIdentity.@ColImage = (object)query.@ColImage != null ? query.@ColImage.ToArray() : null;
				@tabWithPrimaryKeyAsIdentity.@ColInt = query.@ColInt;
				@tabWithPrimaryKeyAsIdentity.@ColMoney = query.@ColMoney;
				@tabWithPrimaryKeyAsIdentity.@ColNchar = query.@ColNchar;
				@tabWithPrimaryKeyAsIdentity.@ColNtext = query.@ColNtext;
				@tabWithPrimaryKeyAsIdentity.@ColNumeric = query.@ColNumeric;
				@tabWithPrimaryKeyAsIdentity.@ColNvarchar = query.@ColNvarchar;
				@tabWithPrimaryKeyAsIdentity.@ColReal = query.@ColReal;
				@tabWithPrimaryKeyAsIdentity.@ColRowversion = query.@ColRowversion;
				@tabWithPrimaryKeyAsIdentity.@ColSmalldatetime = query.@ColSmalldatetime;
				@tabWithPrimaryKeyAsIdentity.@ColSmallint = query.@ColSmallint;
				@tabWithPrimaryKeyAsIdentity.@ColSmallmoney = query.@ColSmallmoney;
				@tabWithPrimaryKeyAsIdentity.@ColSqlVariant = query.@ColSqlVariant;
				@tabWithPrimaryKeyAsIdentity.@ColSysname = query.@ColSysname;
				@tabWithPrimaryKeyAsIdentity.@ColText = query.@ColText;
				@tabWithPrimaryKeyAsIdentity.@ColTime = query.@ColTime;
				@tabWithPrimaryKeyAsIdentity.@ColTinyint = query.@ColTinyint;
				@tabWithPrimaryKeyAsIdentity.@ColUniqueidentifier = query.@ColUniqueidentifier;
				@tabWithPrimaryKeyAsIdentity.@ColVarbinary = (object)query.@ColVarbinary != null ? query.@ColVarbinary.ToArray() : null;
				@tabWithPrimaryKeyAsIdentity.@ColVarchar = query.@ColVarchar;
				@tabWithPrimaryKeyAsIdentity.@ColXml = query.@ColXml;
						
				if (wasNew)
				{
					this.OnPostInsertTabWithPrimaryKeyAsIdentity(unitOfWork, @tabWithPrimaryKeyAsIdentity);
				}
				else
				{
					this.OnPostUpdateTabWithPrimaryKeyAsIdentity(unitOfWork, @tabWithPrimaryKeyAsIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTabWithPrimaryKeyAsIdentity(TabWithPrimaryKeyAsIdentity @tabWithPrimaryKeyAsIdentity)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTabWithPrimaryKeyAsIdentity(unitOfWork, @tabWithPrimaryKeyAsIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTabWithPrimaryKeyAsIdentity(UnitOfWork.Current, @tabWithPrimaryKeyAsIdentity);
			
			return retval;
		}
		
		public bool DiscardTabWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsIdentity @tabWithPrimaryKeyAsIdentity)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tabWithPrimaryKeyAsIdentity == null)
				throw new ArgumentNullException("tabWithPrimaryKeyAsIdentity");
				
			if (@tabWithPrimaryKeyAsIdentity.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTabWithPrimaryKeyAsIdentity(unitOfWork, @tabWithPrimaryKeyAsIdentity);
				
				query = wrapper.Disposable.@TabWithPrimaryKeyAsIdentities.SingleOrDefault(lo => lo.@ColIntIdPk == @tabWithPrimaryKeyAsIdentity.@ColIntIdPk);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TabWithPrimaryKeyAsIdentities.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTabWithPrimaryKeyAsIdentity(unitOfWork, @tabWithPrimaryKeyAsIdentity);
					
					return false;
				}

				this.OnPostDeleteTabWithPrimaryKeyAsIdentity(unitOfWork, @tabWithPrimaryKeyAsIdentity);
				
				@tabWithPrimaryKeyAsIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTabWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsIdentity @tabWithPrimaryKeyAsIdentity);
		
		partial void OnPostInsertTabWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsIdentity @tabWithPrimaryKeyAsIdentity);
		
		partial void OnPreUpdateTabWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsIdentity @tabWithPrimaryKeyAsIdentity);
		
		partial void OnPostUpdateTabWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsIdentity @tabWithPrimaryKeyAsIdentity);
		
		partial void OnPreDeleteTabWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsIdentity @tabWithPrimaryKeyAsIdentity);
		
		partial void OnPostDeleteTabWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsIdentity @tabWithPrimaryKeyAsIdentity);
		
		partial void OnSaveConflictTabWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsIdentity @tabWithPrimaryKeyAsIdentity);
		
		partial void OnDiscardConflictTabWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsIdentity @tabWithPrimaryKeyAsIdentity);
		
		partial void OnSelectTabWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsIdentity @tabWithPrimaryKeyAsIdentity);		

		public TabWithPrimaryKeyAsDefault LoadTabWithPrimaryKeyAsDefault(Guid @colUuidDfPk)
		{
			TabWithPrimaryKeyAsDefault @tabWithPrimaryKeyAsDefault;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tabWithPrimaryKeyAsDefault = this.LoadTabWithPrimaryKeyAsDefault(unitOfWork, @colUuidDfPk);

					unitOfWork.Complete();
				}
			}
			else
				@tabWithPrimaryKeyAsDefault = this.LoadTabWithPrimaryKeyAsDefault(UnitOfWork.Current, @colUuidDfPk);
			
			return @tabWithPrimaryKeyAsDefault;
		}
		
		public TabWithPrimaryKeyAsDefault LoadTabWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, Guid @colUuidDfPk)
		{			
			TabWithPrimaryKeyAsDefault @tabWithPrimaryKeyAsDefault;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsDefault query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TabWithPrimaryKeyAsDefaults.SingleOrDefault(lo => lo.@ColUuidDfPk == @colUuidDfPk);

				if ((object)query == null)
					return null; // does not exist
				
				@tabWithPrimaryKeyAsDefault = new TabWithPrimaryKeyAsDefault()
								{
									// map result to POCO from L2S object
									@ColUuidDfPk = query.@ColUuidDfPk,
									@ColBigint = query.@ColBigint,
									@ColBinary = (object)query.ColBinary != null ? query.@ColBinary.ToArray() : null,
									@ColBit = query.@ColBit,
									@ColChar = query.@ColChar,
									@ColDate = query.@ColDate,
									@ColDatetime = query.@ColDatetime,
									@ColDatetime2 = query.@ColDatetime2,
									@ColDatetimeoffset = query.@ColDatetimeoffset,
									@ColDecimal = query.@ColDecimal,
									@ColFloat = query.@ColFloat,
									@ColImage = (object)query.ColImage != null ? query.@ColImage.ToArray() : null,
									@ColInt = query.@ColInt,
									@ColMoney = query.@ColMoney,
									@ColNchar = query.@ColNchar,
									@ColNtext = query.@ColNtext,
									@ColNumeric = query.@ColNumeric,
									@ColNvarchar = query.@ColNvarchar,
									@ColReal = query.@ColReal,
									@ColRowversion = query.@ColRowversion,
									@ColSmalldatetime = query.@ColSmalldatetime,
									@ColSmallint = query.@ColSmallint,
									@ColSmallmoney = query.@ColSmallmoney,
									@ColSqlVariant = query.@ColSqlVariant,
									@ColSysname = query.@ColSysname,
									@ColText = query.@ColText,
									@ColTime = query.@ColTime,
									@ColTinyint = query.@ColTinyint,
									@ColUniqueidentifier = query.@ColUniqueidentifier,
									@ColVarbinary = (object)query.ColVarbinary != null ? query.@ColVarbinary.ToArray() : null,
									@ColVarchar = query.@ColVarchar,
									@ColXml = query.@ColXml
								};	

				this.OnSelectTabWithPrimaryKeyAsDefault(unitOfWork, @tabWithPrimaryKeyAsDefault);

				return @tabWithPrimaryKeyAsDefault;
			}
		}
		
		public IEnumerable<TabWithPrimaryKeyAsDefault> FindTabWithPrimaryKeyAsDefaults(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsDefault>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsDefault>> callback)
		{
			IEnumerable<TabWithPrimaryKeyAsDefault> @tabWithPrimaryKeyAsDefaults;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tabWithPrimaryKeyAsDefaults = this.FindTabWithPrimaryKeyAsDefaults(unitOfWork, callback);

					@tabWithPrimaryKeyAsDefaults = @tabWithPrimaryKeyAsDefaults.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@tabWithPrimaryKeyAsDefaults = this.FindTabWithPrimaryKeyAsDefaults(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @tabWithPrimaryKeyAsDefaults;
		}
		
		public IEnumerable<TabWithPrimaryKeyAsDefault> FindTabWithPrimaryKeyAsDefaults(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsDefault>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsDefault>> callback)
		{
			IEnumerable<TabWithPrimaryKeyAsDefault> @tabWithPrimaryKeyAsDefaults;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsDefault> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TabWithPrimaryKeyAsDefaults);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tabWithPrimaryKeyAsDefaults = queryable.Select(lo => new TabWithPrimaryKeyAsDefault()
												 {
													// map results to POCOs from L2S objects
													@ColUuidDfPk = lo.@ColUuidDfPk,
													@ColBigint = lo.@ColBigint,
													@ColBinary = (object)lo.@ColBinary != null ? lo.@ColBinary.ToArray() : null,
													@ColBit = lo.@ColBit,
													@ColChar = lo.@ColChar,
													@ColDate = lo.@ColDate,
													@ColDatetime = lo.@ColDatetime,
													@ColDatetime2 = lo.@ColDatetime2,
													@ColDatetimeoffset = lo.@ColDatetimeoffset,
													@ColDecimal = lo.@ColDecimal,
													@ColFloat = lo.@ColFloat,
													@ColImage = (object)lo.@ColImage != null ? lo.@ColImage.ToArray() : null,
													@ColInt = lo.@ColInt,
													@ColMoney = lo.@ColMoney,
													@ColNchar = lo.@ColNchar,
													@ColNtext = lo.@ColNtext,
													@ColNumeric = lo.@ColNumeric,
													@ColNvarchar = lo.@ColNvarchar,
													@ColReal = lo.@ColReal,
													@ColRowversion = lo.@ColRowversion,
													@ColSmalldatetime = lo.@ColSmalldatetime,
													@ColSmallint = lo.@ColSmallint,
													@ColSmallmoney = lo.@ColSmallmoney,
													@ColSqlVariant = lo.@ColSqlVariant,
													@ColSysname = lo.@ColSysname,
													@ColText = lo.@ColText,
													@ColTime = lo.@ColTime,
													@ColTinyint = lo.@ColTinyint,
													@ColUniqueidentifier = lo.@ColUniqueidentifier,
													@ColVarbinary = (object)lo.@ColVarbinary != null ? lo.@ColVarbinary.ToArray() : null,
													@ColVarchar = lo.@ColVarchar,
													@ColXml = lo.@ColXml
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TabWithPrimaryKeyAsDefault @tabWithPrimaryKeyAsDefault in @tabWithPrimaryKeyAsDefaults)
				{
					this.OnSelectTabWithPrimaryKeyAsDefault(unitOfWork, @tabWithPrimaryKeyAsDefault);
					
					yield return @tabWithPrimaryKeyAsDefault; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTabWithPrimaryKeyAsDefault(TabWithPrimaryKeyAsDefault @tabWithPrimaryKeyAsDefault)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTabWithPrimaryKeyAsDefault(unitOfWork, @tabWithPrimaryKeyAsDefault);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTabWithPrimaryKeyAsDefault(UnitOfWork.Current, @tabWithPrimaryKeyAsDefault);
			
			return retval;
		}
		
		public bool SaveTabWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsDefault @tabWithPrimaryKeyAsDefault)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsDefault query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tabWithPrimaryKeyAsDefault == null)
				throw new ArgumentNullException("tabWithPrimaryKeyAsDefault");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tabWithPrimaryKeyAsDefault.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTabWithPrimaryKeyAsDefault(unitOfWork, @tabWithPrimaryKeyAsDefault);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsDefault();

					wrapper.Disposable.TabWithPrimaryKeyAsDefaults.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTabWithPrimaryKeyAsDefault(unitOfWork, @tabWithPrimaryKeyAsDefault);
					
					query = wrapper.Disposable.TabWithPrimaryKeyAsDefaults.SingleOrDefault(lo => lo.@ColUuidDfPk == @tabWithPrimaryKeyAsDefault.@ColUuidDfPk);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@ColUuidDfPk = @tabWithPrimaryKeyAsDefault.@ColUuidDfPk;
				query.@ColBigint = @tabWithPrimaryKeyAsDefault.@ColBigint;
				query.@ColBinary = @tabWithPrimaryKeyAsDefault.@ColBinary;
				query.@ColBit = @tabWithPrimaryKeyAsDefault.@ColBit;
				query.@ColChar = @tabWithPrimaryKeyAsDefault.@ColChar;
				query.@ColDate = @tabWithPrimaryKeyAsDefault.@ColDate;
				query.@ColDatetime = @tabWithPrimaryKeyAsDefault.@ColDatetime;
				query.@ColDatetime2 = @tabWithPrimaryKeyAsDefault.@ColDatetime2;
				query.@ColDatetimeoffset = @tabWithPrimaryKeyAsDefault.@ColDatetimeoffset;
				query.@ColDecimal = @tabWithPrimaryKeyAsDefault.@ColDecimal;
				query.@ColFloat = @tabWithPrimaryKeyAsDefault.@ColFloat;
				if ((object)@tabWithPrimaryKeyAsDefault.@ColImage != null) // prevent implicit conversion of null -> exception
					query.@ColImage = @tabWithPrimaryKeyAsDefault.@ColImage;
				query.@ColInt = @tabWithPrimaryKeyAsDefault.@ColInt;
				query.@ColMoney = @tabWithPrimaryKeyAsDefault.@ColMoney;
				query.@ColNchar = @tabWithPrimaryKeyAsDefault.@ColNchar;
				query.@ColNtext = @tabWithPrimaryKeyAsDefault.@ColNtext;
				query.@ColNumeric = @tabWithPrimaryKeyAsDefault.@ColNumeric;
				query.@ColNvarchar = @tabWithPrimaryKeyAsDefault.@ColNvarchar;
				query.@ColReal = @tabWithPrimaryKeyAsDefault.@ColReal;
				query.@ColRowversion = @tabWithPrimaryKeyAsDefault.@ColRowversion;
				query.@ColSmalldatetime = @tabWithPrimaryKeyAsDefault.@ColSmalldatetime;
				query.@ColSmallint = @tabWithPrimaryKeyAsDefault.@ColSmallint;
				query.@ColSmallmoney = @tabWithPrimaryKeyAsDefault.@ColSmallmoney;
				query.@ColSqlVariant = @tabWithPrimaryKeyAsDefault.@ColSqlVariant;
				query.@ColSysname = @tabWithPrimaryKeyAsDefault.@ColSysname;
				query.@ColText = @tabWithPrimaryKeyAsDefault.@ColText;
				query.@ColTime = @tabWithPrimaryKeyAsDefault.@ColTime;
				query.@ColTinyint = @tabWithPrimaryKeyAsDefault.@ColTinyint;
				query.@ColUniqueidentifier = @tabWithPrimaryKeyAsDefault.@ColUniqueidentifier;
				query.@ColVarbinary = @tabWithPrimaryKeyAsDefault.@ColVarbinary;
				query.@ColVarchar = @tabWithPrimaryKeyAsDefault.@ColVarchar;
				query.@ColXml = @tabWithPrimaryKeyAsDefault.@ColXml;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTabWithPrimaryKeyAsDefault(unitOfWork, @tabWithPrimaryKeyAsDefault);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tabWithPrimaryKeyAsDefault.@ColUuidDfPk = query.@ColUuidDfPk;
				@tabWithPrimaryKeyAsDefault.@ColBigint = query.@ColBigint;
				@tabWithPrimaryKeyAsDefault.@ColBinary = (object)query.@ColBinary != null ? query.@ColBinary.ToArray() : null;
				@tabWithPrimaryKeyAsDefault.@ColBit = query.@ColBit;
				@tabWithPrimaryKeyAsDefault.@ColChar = query.@ColChar;
				@tabWithPrimaryKeyAsDefault.@ColDate = query.@ColDate;
				@tabWithPrimaryKeyAsDefault.@ColDatetime = query.@ColDatetime;
				@tabWithPrimaryKeyAsDefault.@ColDatetime2 = query.@ColDatetime2;
				@tabWithPrimaryKeyAsDefault.@ColDatetimeoffset = query.@ColDatetimeoffset;
				@tabWithPrimaryKeyAsDefault.@ColDecimal = query.@ColDecimal;
				@tabWithPrimaryKeyAsDefault.@ColFloat = query.@ColFloat;
				@tabWithPrimaryKeyAsDefault.@ColImage = (object)query.@ColImage != null ? query.@ColImage.ToArray() : null;
				@tabWithPrimaryKeyAsDefault.@ColInt = query.@ColInt;
				@tabWithPrimaryKeyAsDefault.@ColMoney = query.@ColMoney;
				@tabWithPrimaryKeyAsDefault.@ColNchar = query.@ColNchar;
				@tabWithPrimaryKeyAsDefault.@ColNtext = query.@ColNtext;
				@tabWithPrimaryKeyAsDefault.@ColNumeric = query.@ColNumeric;
				@tabWithPrimaryKeyAsDefault.@ColNvarchar = query.@ColNvarchar;
				@tabWithPrimaryKeyAsDefault.@ColReal = query.@ColReal;
				@tabWithPrimaryKeyAsDefault.@ColRowversion = query.@ColRowversion;
				@tabWithPrimaryKeyAsDefault.@ColSmalldatetime = query.@ColSmalldatetime;
				@tabWithPrimaryKeyAsDefault.@ColSmallint = query.@ColSmallint;
				@tabWithPrimaryKeyAsDefault.@ColSmallmoney = query.@ColSmallmoney;
				@tabWithPrimaryKeyAsDefault.@ColSqlVariant = query.@ColSqlVariant;
				@tabWithPrimaryKeyAsDefault.@ColSysname = query.@ColSysname;
				@tabWithPrimaryKeyAsDefault.@ColText = query.@ColText;
				@tabWithPrimaryKeyAsDefault.@ColTime = query.@ColTime;
				@tabWithPrimaryKeyAsDefault.@ColTinyint = query.@ColTinyint;
				@tabWithPrimaryKeyAsDefault.@ColUniqueidentifier = query.@ColUniqueidentifier;
				@tabWithPrimaryKeyAsDefault.@ColVarbinary = (object)query.@ColVarbinary != null ? query.@ColVarbinary.ToArray() : null;
				@tabWithPrimaryKeyAsDefault.@ColVarchar = query.@ColVarchar;
				@tabWithPrimaryKeyAsDefault.@ColXml = query.@ColXml;
						
				if (wasNew)
				{
					this.OnPostInsertTabWithPrimaryKeyAsDefault(unitOfWork, @tabWithPrimaryKeyAsDefault);
				}
				else
				{
					this.OnPostUpdateTabWithPrimaryKeyAsDefault(unitOfWork, @tabWithPrimaryKeyAsDefault);
				}

				return true;
			}
		}
		
		public bool DiscardTabWithPrimaryKeyAsDefault(TabWithPrimaryKeyAsDefault @tabWithPrimaryKeyAsDefault)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTabWithPrimaryKeyAsDefault(unitOfWork, @tabWithPrimaryKeyAsDefault);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTabWithPrimaryKeyAsDefault(UnitOfWork.Current, @tabWithPrimaryKeyAsDefault);
			
			return retval;
		}
		
		public bool DiscardTabWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsDefault @tabWithPrimaryKeyAsDefault)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyAsDefault query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tabWithPrimaryKeyAsDefault == null)
				throw new ArgumentNullException("tabWithPrimaryKeyAsDefault");
				
			if (@tabWithPrimaryKeyAsDefault.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTabWithPrimaryKeyAsDefault(unitOfWork, @tabWithPrimaryKeyAsDefault);
				
				query = wrapper.Disposable.@TabWithPrimaryKeyAsDefaults.SingleOrDefault(lo => lo.@ColUuidDfPk == @tabWithPrimaryKeyAsDefault.@ColUuidDfPk);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TabWithPrimaryKeyAsDefaults.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTabWithPrimaryKeyAsDefault(unitOfWork, @tabWithPrimaryKeyAsDefault);
					
					return false;
				}

				this.OnPostDeleteTabWithPrimaryKeyAsDefault(unitOfWork, @tabWithPrimaryKeyAsDefault);
				
				@tabWithPrimaryKeyAsDefault.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTabWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsDefault @tabWithPrimaryKeyAsDefault);
		
		partial void OnPostInsertTabWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsDefault @tabWithPrimaryKeyAsDefault);
		
		partial void OnPreUpdateTabWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsDefault @tabWithPrimaryKeyAsDefault);
		
		partial void OnPostUpdateTabWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsDefault @tabWithPrimaryKeyAsDefault);
		
		partial void OnPreDeleteTabWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsDefault @tabWithPrimaryKeyAsDefault);
		
		partial void OnPostDeleteTabWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsDefault @tabWithPrimaryKeyAsDefault);
		
		partial void OnSaveConflictTabWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsDefault @tabWithPrimaryKeyAsDefault);
		
		partial void OnDiscardConflictTabWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsDefault @tabWithPrimaryKeyAsDefault);
		
		partial void OnSelectTabWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TabWithPrimaryKeyAsDefault @tabWithPrimaryKeyAsDefault);		

		public TabWithPrimaryKeyWithDifferentIdentity LoadTabWithPrimaryKeyWithDifferentIdentity(Int32 @colIntPk)
		{
			TabWithPrimaryKeyWithDifferentIdentity @tabWithPrimaryKeyWithDifferentIdentity;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tabWithPrimaryKeyWithDifferentIdentity = this.LoadTabWithPrimaryKeyWithDifferentIdentity(unitOfWork, @colIntPk);

					unitOfWork.Complete();
				}
			}
			else
				@tabWithPrimaryKeyWithDifferentIdentity = this.LoadTabWithPrimaryKeyWithDifferentIdentity(UnitOfWork.Current, @colIntPk);
			
			return @tabWithPrimaryKeyWithDifferentIdentity;
		}
		
		public TabWithPrimaryKeyWithDifferentIdentity LoadTabWithPrimaryKeyWithDifferentIdentity(IUnitOfWork unitOfWork, Int32 @colIntPk)
		{			
			TabWithPrimaryKeyWithDifferentIdentity @tabWithPrimaryKeyWithDifferentIdentity;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyWithDifferentIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TabWithPrimaryKeyWithDifferentIdentities.SingleOrDefault(lo => lo.@ColIntPk == @colIntPk);

				if ((object)query == null)
					return null; // does not exist
				
				@tabWithPrimaryKeyWithDifferentIdentity = new TabWithPrimaryKeyWithDifferentIdentity()
								{
									// map result to POCO from L2S object
									@ColIntPk = query.@ColIntPk,
									@ColIntId = query.@ColIntId,
									@ColBigint = query.@ColBigint,
									@ColBinary = (object)query.ColBinary != null ? query.@ColBinary.ToArray() : null,
									@ColBit = query.@ColBit,
									@ColChar = query.@ColChar,
									@ColDate = query.@ColDate,
									@ColDatetime = query.@ColDatetime,
									@ColDatetime2 = query.@ColDatetime2,
									@ColDatetimeoffset = query.@ColDatetimeoffset,
									@ColDecimal = query.@ColDecimal,
									@ColFloat = query.@ColFloat,
									@ColImage = (object)query.ColImage != null ? query.@ColImage.ToArray() : null,
									@ColInt = query.@ColInt,
									@ColMoney = query.@ColMoney,
									@ColNchar = query.@ColNchar,
									@ColNtext = query.@ColNtext,
									@ColNumeric = query.@ColNumeric,
									@ColNvarchar = query.@ColNvarchar,
									@ColReal = query.@ColReal,
									@ColRowversion = query.@ColRowversion,
									@ColSmalldatetime = query.@ColSmalldatetime,
									@ColSmallint = query.@ColSmallint,
									@ColSmallmoney = query.@ColSmallmoney,
									@ColSqlVariant = query.@ColSqlVariant,
									@ColSysname = query.@ColSysname,
									@ColText = query.@ColText,
									@ColTime = query.@ColTime,
									@ColTinyint = query.@ColTinyint,
									@ColUniqueidentifier = query.@ColUniqueidentifier,
									@ColVarbinary = (object)query.ColVarbinary != null ? query.@ColVarbinary.ToArray() : null,
									@ColVarchar = query.@ColVarchar,
									@ColXml = query.@ColXml
								};	

				this.OnSelectTabWithPrimaryKeyWithDifferentIdentity(unitOfWork, @tabWithPrimaryKeyWithDifferentIdentity);

				return @tabWithPrimaryKeyWithDifferentIdentity;
			}
		}
		
		public IEnumerable<TabWithPrimaryKeyWithDifferentIdentity> FindTabWithPrimaryKeyWithDifferentIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyWithDifferentIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyWithDifferentIdentity>> callback)
		{
			IEnumerable<TabWithPrimaryKeyWithDifferentIdentity> @tabWithPrimaryKeyWithDifferentIdentities;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tabWithPrimaryKeyWithDifferentIdentities = this.FindTabWithPrimaryKeyWithDifferentIdentities(unitOfWork, callback);

					@tabWithPrimaryKeyWithDifferentIdentities = @tabWithPrimaryKeyWithDifferentIdentities.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@tabWithPrimaryKeyWithDifferentIdentities = this.FindTabWithPrimaryKeyWithDifferentIdentities(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @tabWithPrimaryKeyWithDifferentIdentities;
		}
		
		public IEnumerable<TabWithPrimaryKeyWithDifferentIdentity> FindTabWithPrimaryKeyWithDifferentIdentities(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyWithDifferentIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyWithDifferentIdentity>> callback)
		{
			IEnumerable<TabWithPrimaryKeyWithDifferentIdentity> @tabWithPrimaryKeyWithDifferentIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyWithDifferentIdentity> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TabWithPrimaryKeyWithDifferentIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tabWithPrimaryKeyWithDifferentIdentities = queryable.Select(lo => new TabWithPrimaryKeyWithDifferentIdentity()
												 {
													// map results to POCOs from L2S objects
													@ColIntPk = lo.@ColIntPk,
													@ColIntId = lo.@ColIntId,
													@ColBigint = lo.@ColBigint,
													@ColBinary = (object)lo.@ColBinary != null ? lo.@ColBinary.ToArray() : null,
													@ColBit = lo.@ColBit,
													@ColChar = lo.@ColChar,
													@ColDate = lo.@ColDate,
													@ColDatetime = lo.@ColDatetime,
													@ColDatetime2 = lo.@ColDatetime2,
													@ColDatetimeoffset = lo.@ColDatetimeoffset,
													@ColDecimal = lo.@ColDecimal,
													@ColFloat = lo.@ColFloat,
													@ColImage = (object)lo.@ColImage != null ? lo.@ColImage.ToArray() : null,
													@ColInt = lo.@ColInt,
													@ColMoney = lo.@ColMoney,
													@ColNchar = lo.@ColNchar,
													@ColNtext = lo.@ColNtext,
													@ColNumeric = lo.@ColNumeric,
													@ColNvarchar = lo.@ColNvarchar,
													@ColReal = lo.@ColReal,
													@ColRowversion = lo.@ColRowversion,
													@ColSmalldatetime = lo.@ColSmalldatetime,
													@ColSmallint = lo.@ColSmallint,
													@ColSmallmoney = lo.@ColSmallmoney,
													@ColSqlVariant = lo.@ColSqlVariant,
													@ColSysname = lo.@ColSysname,
													@ColText = lo.@ColText,
													@ColTime = lo.@ColTime,
													@ColTinyint = lo.@ColTinyint,
													@ColUniqueidentifier = lo.@ColUniqueidentifier,
													@ColVarbinary = (object)lo.@ColVarbinary != null ? lo.@ColVarbinary.ToArray() : null,
													@ColVarchar = lo.@ColVarchar,
													@ColXml = lo.@ColXml
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TabWithPrimaryKeyWithDifferentIdentity @tabWithPrimaryKeyWithDifferentIdentity in @tabWithPrimaryKeyWithDifferentIdentities)
				{
					this.OnSelectTabWithPrimaryKeyWithDifferentIdentity(unitOfWork, @tabWithPrimaryKeyWithDifferentIdentity);
					
					yield return @tabWithPrimaryKeyWithDifferentIdentity; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTabWithPrimaryKeyWithDifferentIdentity(TabWithPrimaryKeyWithDifferentIdentity @tabWithPrimaryKeyWithDifferentIdentity)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTabWithPrimaryKeyWithDifferentIdentity(unitOfWork, @tabWithPrimaryKeyWithDifferentIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTabWithPrimaryKeyWithDifferentIdentity(UnitOfWork.Current, @tabWithPrimaryKeyWithDifferentIdentity);
			
			return retval;
		}
		
		public bool SaveTabWithPrimaryKeyWithDifferentIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyWithDifferentIdentity @tabWithPrimaryKeyWithDifferentIdentity)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyWithDifferentIdentity query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tabWithPrimaryKeyWithDifferentIdentity == null)
				throw new ArgumentNullException("tabWithPrimaryKeyWithDifferentIdentity");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tabWithPrimaryKeyWithDifferentIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTabWithPrimaryKeyWithDifferentIdentity(unitOfWork, @tabWithPrimaryKeyWithDifferentIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyWithDifferentIdentity();

					wrapper.Disposable.TabWithPrimaryKeyWithDifferentIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTabWithPrimaryKeyWithDifferentIdentity(unitOfWork, @tabWithPrimaryKeyWithDifferentIdentity);
					
					query = wrapper.Disposable.TabWithPrimaryKeyWithDifferentIdentities.SingleOrDefault(lo => lo.@ColIntPk == @tabWithPrimaryKeyWithDifferentIdentity.@ColIntPk);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@ColIntPk = @tabWithPrimaryKeyWithDifferentIdentity.@ColIntPk;
				query.@ColIntId = @tabWithPrimaryKeyWithDifferentIdentity.@ColIntId;
				query.@ColBigint = @tabWithPrimaryKeyWithDifferentIdentity.@ColBigint;
				query.@ColBinary = @tabWithPrimaryKeyWithDifferentIdentity.@ColBinary;
				query.@ColBit = @tabWithPrimaryKeyWithDifferentIdentity.@ColBit;
				query.@ColChar = @tabWithPrimaryKeyWithDifferentIdentity.@ColChar;
				query.@ColDate = @tabWithPrimaryKeyWithDifferentIdentity.@ColDate;
				query.@ColDatetime = @tabWithPrimaryKeyWithDifferentIdentity.@ColDatetime;
				query.@ColDatetime2 = @tabWithPrimaryKeyWithDifferentIdentity.@ColDatetime2;
				query.@ColDatetimeoffset = @tabWithPrimaryKeyWithDifferentIdentity.@ColDatetimeoffset;
				query.@ColDecimal = @tabWithPrimaryKeyWithDifferentIdentity.@ColDecimal;
				query.@ColFloat = @tabWithPrimaryKeyWithDifferentIdentity.@ColFloat;
				if ((object)@tabWithPrimaryKeyWithDifferentIdentity.@ColImage != null) // prevent implicit conversion of null -> exception
					query.@ColImage = @tabWithPrimaryKeyWithDifferentIdentity.@ColImage;
				query.@ColInt = @tabWithPrimaryKeyWithDifferentIdentity.@ColInt;
				query.@ColMoney = @tabWithPrimaryKeyWithDifferentIdentity.@ColMoney;
				query.@ColNchar = @tabWithPrimaryKeyWithDifferentIdentity.@ColNchar;
				query.@ColNtext = @tabWithPrimaryKeyWithDifferentIdentity.@ColNtext;
				query.@ColNumeric = @tabWithPrimaryKeyWithDifferentIdentity.@ColNumeric;
				query.@ColNvarchar = @tabWithPrimaryKeyWithDifferentIdentity.@ColNvarchar;
				query.@ColReal = @tabWithPrimaryKeyWithDifferentIdentity.@ColReal;
				query.@ColRowversion = @tabWithPrimaryKeyWithDifferentIdentity.@ColRowversion;
				query.@ColSmalldatetime = @tabWithPrimaryKeyWithDifferentIdentity.@ColSmalldatetime;
				query.@ColSmallint = @tabWithPrimaryKeyWithDifferentIdentity.@ColSmallint;
				query.@ColSmallmoney = @tabWithPrimaryKeyWithDifferentIdentity.@ColSmallmoney;
				query.@ColSqlVariant = @tabWithPrimaryKeyWithDifferentIdentity.@ColSqlVariant;
				query.@ColSysname = @tabWithPrimaryKeyWithDifferentIdentity.@ColSysname;
				query.@ColText = @tabWithPrimaryKeyWithDifferentIdentity.@ColText;
				query.@ColTime = @tabWithPrimaryKeyWithDifferentIdentity.@ColTime;
				query.@ColTinyint = @tabWithPrimaryKeyWithDifferentIdentity.@ColTinyint;
				query.@ColUniqueidentifier = @tabWithPrimaryKeyWithDifferentIdentity.@ColUniqueidentifier;
				query.@ColVarbinary = @tabWithPrimaryKeyWithDifferentIdentity.@ColVarbinary;
				query.@ColVarchar = @tabWithPrimaryKeyWithDifferentIdentity.@ColVarchar;
				query.@ColXml = @tabWithPrimaryKeyWithDifferentIdentity.@ColXml;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTabWithPrimaryKeyWithDifferentIdentity(unitOfWork, @tabWithPrimaryKeyWithDifferentIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tabWithPrimaryKeyWithDifferentIdentity.@ColIntPk = query.@ColIntPk;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColIntId = query.@ColIntId;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColBigint = query.@ColBigint;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColBinary = (object)query.@ColBinary != null ? query.@ColBinary.ToArray() : null;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColBit = query.@ColBit;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColChar = query.@ColChar;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColDate = query.@ColDate;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColDatetime = query.@ColDatetime;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColDatetime2 = query.@ColDatetime2;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColDatetimeoffset = query.@ColDatetimeoffset;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColDecimal = query.@ColDecimal;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColFloat = query.@ColFloat;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColImage = (object)query.@ColImage != null ? query.@ColImage.ToArray() : null;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColInt = query.@ColInt;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColMoney = query.@ColMoney;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColNchar = query.@ColNchar;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColNtext = query.@ColNtext;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColNumeric = query.@ColNumeric;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColNvarchar = query.@ColNvarchar;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColReal = query.@ColReal;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColRowversion = query.@ColRowversion;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColSmalldatetime = query.@ColSmalldatetime;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColSmallint = query.@ColSmallint;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColSmallmoney = query.@ColSmallmoney;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColSqlVariant = query.@ColSqlVariant;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColSysname = query.@ColSysname;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColText = query.@ColText;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColTime = query.@ColTime;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColTinyint = query.@ColTinyint;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColUniqueidentifier = query.@ColUniqueidentifier;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColVarbinary = (object)query.@ColVarbinary != null ? query.@ColVarbinary.ToArray() : null;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColVarchar = query.@ColVarchar;
				@tabWithPrimaryKeyWithDifferentIdentity.@ColXml = query.@ColXml;
						
				if (wasNew)
				{
					this.OnPostInsertTabWithPrimaryKeyWithDifferentIdentity(unitOfWork, @tabWithPrimaryKeyWithDifferentIdentity);
				}
				else
				{
					this.OnPostUpdateTabWithPrimaryKeyWithDifferentIdentity(unitOfWork, @tabWithPrimaryKeyWithDifferentIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTabWithPrimaryKeyWithDifferentIdentity(TabWithPrimaryKeyWithDifferentIdentity @tabWithPrimaryKeyWithDifferentIdentity)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTabWithPrimaryKeyWithDifferentIdentity(unitOfWork, @tabWithPrimaryKeyWithDifferentIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTabWithPrimaryKeyWithDifferentIdentity(UnitOfWork.Current, @tabWithPrimaryKeyWithDifferentIdentity);
			
			return retval;
		}
		
		public bool DiscardTabWithPrimaryKeyWithDifferentIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyWithDifferentIdentity @tabWithPrimaryKeyWithDifferentIdentity)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyWithDifferentIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tabWithPrimaryKeyWithDifferentIdentity == null)
				throw new ArgumentNullException("tabWithPrimaryKeyWithDifferentIdentity");
				
			if (@tabWithPrimaryKeyWithDifferentIdentity.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTabWithPrimaryKeyWithDifferentIdentity(unitOfWork, @tabWithPrimaryKeyWithDifferentIdentity);
				
				query = wrapper.Disposable.@TabWithPrimaryKeyWithDifferentIdentities.SingleOrDefault(lo => lo.@ColIntPk == @tabWithPrimaryKeyWithDifferentIdentity.@ColIntPk);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TabWithPrimaryKeyWithDifferentIdentities.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTabWithPrimaryKeyWithDifferentIdentity(unitOfWork, @tabWithPrimaryKeyWithDifferentIdentity);
					
					return false;
				}

				this.OnPostDeleteTabWithPrimaryKeyWithDifferentIdentity(unitOfWork, @tabWithPrimaryKeyWithDifferentIdentity);
				
				@tabWithPrimaryKeyWithDifferentIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTabWithPrimaryKeyWithDifferentIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyWithDifferentIdentity @tabWithPrimaryKeyWithDifferentIdentity);
		
		partial void OnPostInsertTabWithPrimaryKeyWithDifferentIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyWithDifferentIdentity @tabWithPrimaryKeyWithDifferentIdentity);
		
		partial void OnPreUpdateTabWithPrimaryKeyWithDifferentIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyWithDifferentIdentity @tabWithPrimaryKeyWithDifferentIdentity);
		
		partial void OnPostUpdateTabWithPrimaryKeyWithDifferentIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyWithDifferentIdentity @tabWithPrimaryKeyWithDifferentIdentity);
		
		partial void OnPreDeleteTabWithPrimaryKeyWithDifferentIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyWithDifferentIdentity @tabWithPrimaryKeyWithDifferentIdentity);
		
		partial void OnPostDeleteTabWithPrimaryKeyWithDifferentIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyWithDifferentIdentity @tabWithPrimaryKeyWithDifferentIdentity);
		
		partial void OnSaveConflictTabWithPrimaryKeyWithDifferentIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyWithDifferentIdentity @tabWithPrimaryKeyWithDifferentIdentity);
		
		partial void OnDiscardConflictTabWithPrimaryKeyWithDifferentIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyWithDifferentIdentity @tabWithPrimaryKeyWithDifferentIdentity);
		
		partial void OnSelectTabWithPrimaryKeyWithDifferentIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyWithDifferentIdentity @tabWithPrimaryKeyWithDifferentIdentity);		

		public TabWithNoPrimaryKeyWithIdentity LoadTabWithNoPrimaryKeyWithIdentity(Int32 @colIntId, Int64 @colBigint, Byte[] @colBinary, Boolean @colBit, String @colChar, DateTime @colDate, DateTime @colDatetime, DateTime @colDatetime2, DateTimeOffset @colDatetimeoffset, Decimal @colDecimal, Double @colFloat, Byte[] @colImage, Int32 @colInt, Decimal @colMoney, String @colNchar, String @colNtext, Decimal @colNumeric, String @colNvarchar, Single @colReal, Byte[] @colRowversion, DateTime @colSmalldatetime, Int16 @colSmallint, Decimal @colSmallmoney, Object @colSqlVariant, String @colSysname, String @colText, TimeSpan @colTime, Byte @colTinyint, Guid @colUniqueidentifier, Byte[] @colVarbinary, String @colVarchar, XmlDocument @colXml)
		{
			TabWithNoPrimaryKeyWithIdentity @tabWithNoPrimaryKeyWithIdentity;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tabWithNoPrimaryKeyWithIdentity = this.LoadTabWithNoPrimaryKeyWithIdentity(unitOfWork, @colIntId, @colBigint, @colBinary, @colBit, @colChar, @colDate, @colDatetime, @colDatetime2, @colDatetimeoffset, @colDecimal, @colFloat, @colImage, @colInt, @colMoney, @colNchar, @colNtext, @colNumeric, @colNvarchar, @colReal, @colRowversion, @colSmalldatetime, @colSmallint, @colSmallmoney, @colSqlVariant, @colSysname, @colText, @colTime, @colTinyint, @colUniqueidentifier, @colVarbinary, @colVarchar, @colXml);

					unitOfWork.Complete();
				}
			}
			else
				@tabWithNoPrimaryKeyWithIdentity = this.LoadTabWithNoPrimaryKeyWithIdentity(UnitOfWork.Current, @colIntId, @colBigint, @colBinary, @colBit, @colChar, @colDate, @colDatetime, @colDatetime2, @colDatetimeoffset, @colDecimal, @colFloat, @colImage, @colInt, @colMoney, @colNchar, @colNtext, @colNumeric, @colNvarchar, @colReal, @colRowversion, @colSmalldatetime, @colSmallint, @colSmallmoney, @colSqlVariant, @colSysname, @colText, @colTime, @colTinyint, @colUniqueidentifier, @colVarbinary, @colVarchar, @colXml);
			
			return @tabWithNoPrimaryKeyWithIdentity;
		}
		
		public TabWithNoPrimaryKeyWithIdentity LoadTabWithNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, Int32 @colIntId, Int64 @colBigint, Byte[] @colBinary, Boolean @colBit, String @colChar, DateTime @colDate, DateTime @colDatetime, DateTime @colDatetime2, DateTimeOffset @colDatetimeoffset, Decimal @colDecimal, Double @colFloat, Byte[] @colImage, Int32 @colInt, Decimal @colMoney, String @colNchar, String @colNtext, Decimal @colNumeric, String @colNvarchar, Single @colReal, Byte[] @colRowversion, DateTime @colSmalldatetime, Int16 @colSmallint, Decimal @colSmallmoney, Object @colSqlVariant, String @colSysname, String @colText, TimeSpan @colTime, Byte @colTinyint, Guid @colUniqueidentifier, Byte[] @colVarbinary, String @colVarchar, XmlDocument @colXml)
		{			
			TabWithNoPrimaryKeyWithIdentity @tabWithNoPrimaryKeyWithIdentity;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithNoPrimaryKeyWithIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TabWithNoPrimaryKeyWithIdentities.SingleOrDefault(lo => lo.@ColIntId == @colIntId && lo.@ColBigint == @colBigint && lo.@ColBinary == @colBinary && lo.@ColBit == @colBit && lo.@ColChar == @colChar && lo.@ColDate == @colDate && lo.@ColDatetime == @colDatetime && lo.@ColDatetime2 == @colDatetime2 && lo.@ColDatetimeoffset == @colDatetimeoffset && lo.@ColDecimal == @colDecimal && lo.@ColFloat == @colFloat && lo.@ColImage == @colImage && lo.@ColInt == @colInt && lo.@ColMoney == @colMoney && lo.@ColNchar == @colNchar && lo.@ColNtext == @colNtext && lo.@ColNumeric == @colNumeric && lo.@ColNvarchar == @colNvarchar && lo.@ColReal == @colReal && lo.@ColRowversion == @colRowversion && lo.@ColSmalldatetime == @colSmalldatetime && lo.@ColSmallint == @colSmallint && lo.@ColSmallmoney == @colSmallmoney && lo.@ColSqlVariant == @colSqlVariant && lo.@ColSysname == @colSysname && lo.@ColText == @colText && lo.@ColTime == @colTime && lo.@ColTinyint == @colTinyint && lo.@ColUniqueidentifier == @colUniqueidentifier && lo.@ColVarbinary == @colVarbinary && lo.@ColVarchar == @colVarchar && lo.@ColXml == @colXml);

				if ((object)query == null)
					return null; // does not exist
				
				@tabWithNoPrimaryKeyWithIdentity = new TabWithNoPrimaryKeyWithIdentity()
								{
									// map result to POCO from L2S object
									@ColIntId = query.@ColIntId,
									@ColBigint = query.@ColBigint,
									@ColBinary = (object)query.ColBinary != null ? query.@ColBinary.ToArray() : null,
									@ColBit = query.@ColBit,
									@ColChar = query.@ColChar,
									@ColDate = query.@ColDate,
									@ColDatetime = query.@ColDatetime,
									@ColDatetime2 = query.@ColDatetime2,
									@ColDatetimeoffset = query.@ColDatetimeoffset,
									@ColDecimal = query.@ColDecimal,
									@ColFloat = query.@ColFloat,
									@ColImage = (object)query.ColImage != null ? query.@ColImage.ToArray() : null,
									@ColInt = query.@ColInt,
									@ColMoney = query.@ColMoney,
									@ColNchar = query.@ColNchar,
									@ColNtext = query.@ColNtext,
									@ColNumeric = query.@ColNumeric,
									@ColNvarchar = query.@ColNvarchar,
									@ColReal = query.@ColReal,
									@ColRowversion = query.@ColRowversion,
									@ColSmalldatetime = query.@ColSmalldatetime,
									@ColSmallint = query.@ColSmallint,
									@ColSmallmoney = query.@ColSmallmoney,
									@ColSqlVariant = query.@ColSqlVariant,
									@ColSysname = query.@ColSysname,
									@ColText = query.@ColText,
									@ColTime = query.@ColTime,
									@ColTinyint = query.@ColTinyint,
									@ColUniqueidentifier = query.@ColUniqueidentifier,
									@ColVarbinary = (object)query.ColVarbinary != null ? query.@ColVarbinary.ToArray() : null,
									@ColVarchar = query.@ColVarchar,
									@ColXml = query.@ColXml
								};	

				this.OnSelectTabWithNoPrimaryKeyWithIdentity(unitOfWork, @tabWithNoPrimaryKeyWithIdentity);

				return @tabWithNoPrimaryKeyWithIdentity;
			}
		}
		
		public IEnumerable<TabWithNoPrimaryKeyWithIdentity> FindTabWithNoPrimaryKeyWithIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithNoPrimaryKeyWithIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithNoPrimaryKeyWithIdentity>> callback)
		{
			IEnumerable<TabWithNoPrimaryKeyWithIdentity> @tabWithNoPrimaryKeyWithIdentities;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tabWithNoPrimaryKeyWithIdentities = this.FindTabWithNoPrimaryKeyWithIdentities(unitOfWork, callback);

					@tabWithNoPrimaryKeyWithIdentities = @tabWithNoPrimaryKeyWithIdentities.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@tabWithNoPrimaryKeyWithIdentities = this.FindTabWithNoPrimaryKeyWithIdentities(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @tabWithNoPrimaryKeyWithIdentities;
		}
		
		public IEnumerable<TabWithNoPrimaryKeyWithIdentity> FindTabWithNoPrimaryKeyWithIdentities(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithNoPrimaryKeyWithIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithNoPrimaryKeyWithIdentity>> callback)
		{
			IEnumerable<TabWithNoPrimaryKeyWithIdentity> @tabWithNoPrimaryKeyWithIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithNoPrimaryKeyWithIdentity> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TabWithNoPrimaryKeyWithIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tabWithNoPrimaryKeyWithIdentities = queryable.Select(lo => new TabWithNoPrimaryKeyWithIdentity()
												 {
													// map results to POCOs from L2S objects
													@ColIntId = lo.@ColIntId,
													@ColBigint = lo.@ColBigint,
													@ColBinary = (object)lo.@ColBinary != null ? lo.@ColBinary.ToArray() : null,
													@ColBit = lo.@ColBit,
													@ColChar = lo.@ColChar,
													@ColDate = lo.@ColDate,
													@ColDatetime = lo.@ColDatetime,
													@ColDatetime2 = lo.@ColDatetime2,
													@ColDatetimeoffset = lo.@ColDatetimeoffset,
													@ColDecimal = lo.@ColDecimal,
													@ColFloat = lo.@ColFloat,
													@ColImage = (object)lo.@ColImage != null ? lo.@ColImage.ToArray() : null,
													@ColInt = lo.@ColInt,
													@ColMoney = lo.@ColMoney,
													@ColNchar = lo.@ColNchar,
													@ColNtext = lo.@ColNtext,
													@ColNumeric = lo.@ColNumeric,
													@ColNvarchar = lo.@ColNvarchar,
													@ColReal = lo.@ColReal,
													@ColRowversion = lo.@ColRowversion,
													@ColSmalldatetime = lo.@ColSmalldatetime,
													@ColSmallint = lo.@ColSmallint,
													@ColSmallmoney = lo.@ColSmallmoney,
													@ColSqlVariant = lo.@ColSqlVariant,
													@ColSysname = lo.@ColSysname,
													@ColText = lo.@ColText,
													@ColTime = lo.@ColTime,
													@ColTinyint = lo.@ColTinyint,
													@ColUniqueidentifier = lo.@ColUniqueidentifier,
													@ColVarbinary = (object)lo.@ColVarbinary != null ? lo.@ColVarbinary.ToArray() : null,
													@ColVarchar = lo.@ColVarchar,
													@ColXml = lo.@ColXml
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TabWithNoPrimaryKeyWithIdentity @tabWithNoPrimaryKeyWithIdentity in @tabWithNoPrimaryKeyWithIdentities)
				{
					this.OnSelectTabWithNoPrimaryKeyWithIdentity(unitOfWork, @tabWithNoPrimaryKeyWithIdentity);
					
					yield return @tabWithNoPrimaryKeyWithIdentity; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTabWithNoPrimaryKeyWithIdentity(TabWithNoPrimaryKeyWithIdentity @tabWithNoPrimaryKeyWithIdentity)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTabWithNoPrimaryKeyWithIdentity(unitOfWork, @tabWithNoPrimaryKeyWithIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTabWithNoPrimaryKeyWithIdentity(UnitOfWork.Current, @tabWithNoPrimaryKeyWithIdentity);
			
			return retval;
		}
		
		public bool SaveTabWithNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TabWithNoPrimaryKeyWithIdentity @tabWithNoPrimaryKeyWithIdentity)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithNoPrimaryKeyWithIdentity query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tabWithNoPrimaryKeyWithIdentity == null)
				throw new ArgumentNullException("tabWithNoPrimaryKeyWithIdentity");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tabWithNoPrimaryKeyWithIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTabWithNoPrimaryKeyWithIdentity(unitOfWork, @tabWithNoPrimaryKeyWithIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithNoPrimaryKeyWithIdentity();

					wrapper.Disposable.TabWithNoPrimaryKeyWithIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTabWithNoPrimaryKeyWithIdentity(unitOfWork, @tabWithNoPrimaryKeyWithIdentity);
					
					query = wrapper.Disposable.TabWithNoPrimaryKeyWithIdentities.SingleOrDefault(lo => lo.@ColIntId == @tabWithNoPrimaryKeyWithIdentity.@ColIntId && lo.@ColBigint == @tabWithNoPrimaryKeyWithIdentity.@ColBigint && lo.@ColBinary == @tabWithNoPrimaryKeyWithIdentity.@ColBinary && lo.@ColBit == @tabWithNoPrimaryKeyWithIdentity.@ColBit && lo.@ColChar == @tabWithNoPrimaryKeyWithIdentity.@ColChar && lo.@ColDate == @tabWithNoPrimaryKeyWithIdentity.@ColDate && lo.@ColDatetime == @tabWithNoPrimaryKeyWithIdentity.@ColDatetime && lo.@ColDatetime2 == @tabWithNoPrimaryKeyWithIdentity.@ColDatetime2 && lo.@ColDatetimeoffset == @tabWithNoPrimaryKeyWithIdentity.@ColDatetimeoffset && lo.@ColDecimal == @tabWithNoPrimaryKeyWithIdentity.@ColDecimal && lo.@ColFloat == @tabWithNoPrimaryKeyWithIdentity.@ColFloat && lo.@ColImage == @tabWithNoPrimaryKeyWithIdentity.@ColImage && lo.@ColInt == @tabWithNoPrimaryKeyWithIdentity.@ColInt && lo.@ColMoney == @tabWithNoPrimaryKeyWithIdentity.@ColMoney && lo.@ColNchar == @tabWithNoPrimaryKeyWithIdentity.@ColNchar && lo.@ColNtext == @tabWithNoPrimaryKeyWithIdentity.@ColNtext && lo.@ColNumeric == @tabWithNoPrimaryKeyWithIdentity.@ColNumeric && lo.@ColNvarchar == @tabWithNoPrimaryKeyWithIdentity.@ColNvarchar && lo.@ColReal == @tabWithNoPrimaryKeyWithIdentity.@ColReal && lo.@ColRowversion == @tabWithNoPrimaryKeyWithIdentity.@ColRowversion && lo.@ColSmalldatetime == @tabWithNoPrimaryKeyWithIdentity.@ColSmalldatetime && lo.@ColSmallint == @tabWithNoPrimaryKeyWithIdentity.@ColSmallint && lo.@ColSmallmoney == @tabWithNoPrimaryKeyWithIdentity.@ColSmallmoney && lo.@ColSqlVariant == @tabWithNoPrimaryKeyWithIdentity.@ColSqlVariant && lo.@ColSysname == @tabWithNoPrimaryKeyWithIdentity.@ColSysname && lo.@ColText == @tabWithNoPrimaryKeyWithIdentity.@ColText && lo.@ColTime == @tabWithNoPrimaryKeyWithIdentity.@ColTime && lo.@ColTinyint == @tabWithNoPrimaryKeyWithIdentity.@ColTinyint && lo.@ColUniqueidentifier == @tabWithNoPrimaryKeyWithIdentity.@ColUniqueidentifier && lo.@ColVarbinary == @tabWithNoPrimaryKeyWithIdentity.@ColVarbinary && lo.@ColVarchar == @tabWithNoPrimaryKeyWithIdentity.@ColVarchar && lo.@ColXml == @tabWithNoPrimaryKeyWithIdentity.@ColXml);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@ColIntId = @tabWithNoPrimaryKeyWithIdentity.@ColIntId;
				query.@ColBigint = @tabWithNoPrimaryKeyWithIdentity.@ColBigint;
				query.@ColBinary = @tabWithNoPrimaryKeyWithIdentity.@ColBinary;
				query.@ColBit = @tabWithNoPrimaryKeyWithIdentity.@ColBit;
				query.@ColChar = @tabWithNoPrimaryKeyWithIdentity.@ColChar;
				query.@ColDate = @tabWithNoPrimaryKeyWithIdentity.@ColDate;
				query.@ColDatetime = @tabWithNoPrimaryKeyWithIdentity.@ColDatetime;
				query.@ColDatetime2 = @tabWithNoPrimaryKeyWithIdentity.@ColDatetime2;
				query.@ColDatetimeoffset = @tabWithNoPrimaryKeyWithIdentity.@ColDatetimeoffset;
				query.@ColDecimal = @tabWithNoPrimaryKeyWithIdentity.@ColDecimal;
				query.@ColFloat = @tabWithNoPrimaryKeyWithIdentity.@ColFloat;
				if ((object)@tabWithNoPrimaryKeyWithIdentity.@ColImage != null) // prevent implicit conversion of null -> exception
					query.@ColImage = @tabWithNoPrimaryKeyWithIdentity.@ColImage;
				query.@ColInt = @tabWithNoPrimaryKeyWithIdentity.@ColInt;
				query.@ColMoney = @tabWithNoPrimaryKeyWithIdentity.@ColMoney;
				query.@ColNchar = @tabWithNoPrimaryKeyWithIdentity.@ColNchar;
				query.@ColNtext = @tabWithNoPrimaryKeyWithIdentity.@ColNtext;
				query.@ColNumeric = @tabWithNoPrimaryKeyWithIdentity.@ColNumeric;
				query.@ColNvarchar = @tabWithNoPrimaryKeyWithIdentity.@ColNvarchar;
				query.@ColReal = @tabWithNoPrimaryKeyWithIdentity.@ColReal;
				query.@ColRowversion = @tabWithNoPrimaryKeyWithIdentity.@ColRowversion;
				query.@ColSmalldatetime = @tabWithNoPrimaryKeyWithIdentity.@ColSmalldatetime;
				query.@ColSmallint = @tabWithNoPrimaryKeyWithIdentity.@ColSmallint;
				query.@ColSmallmoney = @tabWithNoPrimaryKeyWithIdentity.@ColSmallmoney;
				query.@ColSqlVariant = @tabWithNoPrimaryKeyWithIdentity.@ColSqlVariant;
				query.@ColSysname = @tabWithNoPrimaryKeyWithIdentity.@ColSysname;
				query.@ColText = @tabWithNoPrimaryKeyWithIdentity.@ColText;
				query.@ColTime = @tabWithNoPrimaryKeyWithIdentity.@ColTime;
				query.@ColTinyint = @tabWithNoPrimaryKeyWithIdentity.@ColTinyint;
				query.@ColUniqueidentifier = @tabWithNoPrimaryKeyWithIdentity.@ColUniqueidentifier;
				query.@ColVarbinary = @tabWithNoPrimaryKeyWithIdentity.@ColVarbinary;
				query.@ColVarchar = @tabWithNoPrimaryKeyWithIdentity.@ColVarchar;
				query.@ColXml = @tabWithNoPrimaryKeyWithIdentity.@ColXml;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTabWithNoPrimaryKeyWithIdentity(unitOfWork, @tabWithNoPrimaryKeyWithIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tabWithNoPrimaryKeyWithIdentity.@ColIntId = query.@ColIntId;
				@tabWithNoPrimaryKeyWithIdentity.@ColBigint = query.@ColBigint;
				@tabWithNoPrimaryKeyWithIdentity.@ColBinary = (object)query.@ColBinary != null ? query.@ColBinary.ToArray() : null;
				@tabWithNoPrimaryKeyWithIdentity.@ColBit = query.@ColBit;
				@tabWithNoPrimaryKeyWithIdentity.@ColChar = query.@ColChar;
				@tabWithNoPrimaryKeyWithIdentity.@ColDate = query.@ColDate;
				@tabWithNoPrimaryKeyWithIdentity.@ColDatetime = query.@ColDatetime;
				@tabWithNoPrimaryKeyWithIdentity.@ColDatetime2 = query.@ColDatetime2;
				@tabWithNoPrimaryKeyWithIdentity.@ColDatetimeoffset = query.@ColDatetimeoffset;
				@tabWithNoPrimaryKeyWithIdentity.@ColDecimal = query.@ColDecimal;
				@tabWithNoPrimaryKeyWithIdentity.@ColFloat = query.@ColFloat;
				@tabWithNoPrimaryKeyWithIdentity.@ColImage = (object)query.@ColImage != null ? query.@ColImage.ToArray() : null;
				@tabWithNoPrimaryKeyWithIdentity.@ColInt = query.@ColInt;
				@tabWithNoPrimaryKeyWithIdentity.@ColMoney = query.@ColMoney;
				@tabWithNoPrimaryKeyWithIdentity.@ColNchar = query.@ColNchar;
				@tabWithNoPrimaryKeyWithIdentity.@ColNtext = query.@ColNtext;
				@tabWithNoPrimaryKeyWithIdentity.@ColNumeric = query.@ColNumeric;
				@tabWithNoPrimaryKeyWithIdentity.@ColNvarchar = query.@ColNvarchar;
				@tabWithNoPrimaryKeyWithIdentity.@ColReal = query.@ColReal;
				@tabWithNoPrimaryKeyWithIdentity.@ColRowversion = query.@ColRowversion;
				@tabWithNoPrimaryKeyWithIdentity.@ColSmalldatetime = query.@ColSmalldatetime;
				@tabWithNoPrimaryKeyWithIdentity.@ColSmallint = query.@ColSmallint;
				@tabWithNoPrimaryKeyWithIdentity.@ColSmallmoney = query.@ColSmallmoney;
				@tabWithNoPrimaryKeyWithIdentity.@ColSqlVariant = query.@ColSqlVariant;
				@tabWithNoPrimaryKeyWithIdentity.@ColSysname = query.@ColSysname;
				@tabWithNoPrimaryKeyWithIdentity.@ColText = query.@ColText;
				@tabWithNoPrimaryKeyWithIdentity.@ColTime = query.@ColTime;
				@tabWithNoPrimaryKeyWithIdentity.@ColTinyint = query.@ColTinyint;
				@tabWithNoPrimaryKeyWithIdentity.@ColUniqueidentifier = query.@ColUniqueidentifier;
				@tabWithNoPrimaryKeyWithIdentity.@ColVarbinary = (object)query.@ColVarbinary != null ? query.@ColVarbinary.ToArray() : null;
				@tabWithNoPrimaryKeyWithIdentity.@ColVarchar = query.@ColVarchar;
				@tabWithNoPrimaryKeyWithIdentity.@ColXml = query.@ColXml;
						
				if (wasNew)
				{
					this.OnPostInsertTabWithNoPrimaryKeyWithIdentity(unitOfWork, @tabWithNoPrimaryKeyWithIdentity);
				}
				else
				{
					this.OnPostUpdateTabWithNoPrimaryKeyWithIdentity(unitOfWork, @tabWithNoPrimaryKeyWithIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTabWithNoPrimaryKeyWithIdentity(TabWithNoPrimaryKeyWithIdentity @tabWithNoPrimaryKeyWithIdentity)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTabWithNoPrimaryKeyWithIdentity(unitOfWork, @tabWithNoPrimaryKeyWithIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTabWithNoPrimaryKeyWithIdentity(UnitOfWork.Current, @tabWithNoPrimaryKeyWithIdentity);
			
			return retval;
		}
		
		public bool DiscardTabWithNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TabWithNoPrimaryKeyWithIdentity @tabWithNoPrimaryKeyWithIdentity)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithNoPrimaryKeyWithIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tabWithNoPrimaryKeyWithIdentity == null)
				throw new ArgumentNullException("tabWithNoPrimaryKeyWithIdentity");
				
			if (@tabWithNoPrimaryKeyWithIdentity.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTabWithNoPrimaryKeyWithIdentity(unitOfWork, @tabWithNoPrimaryKeyWithIdentity);
				
				query = wrapper.Disposable.@TabWithNoPrimaryKeyWithIdentities.SingleOrDefault(lo => lo.@ColIntId == @tabWithNoPrimaryKeyWithIdentity.@ColIntId && lo.@ColBigint == @tabWithNoPrimaryKeyWithIdentity.@ColBigint && lo.@ColBinary == @tabWithNoPrimaryKeyWithIdentity.@ColBinary && lo.@ColBit == @tabWithNoPrimaryKeyWithIdentity.@ColBit && lo.@ColChar == @tabWithNoPrimaryKeyWithIdentity.@ColChar && lo.@ColDate == @tabWithNoPrimaryKeyWithIdentity.@ColDate && lo.@ColDatetime == @tabWithNoPrimaryKeyWithIdentity.@ColDatetime && lo.@ColDatetime2 == @tabWithNoPrimaryKeyWithIdentity.@ColDatetime2 && lo.@ColDatetimeoffset == @tabWithNoPrimaryKeyWithIdentity.@ColDatetimeoffset && lo.@ColDecimal == @tabWithNoPrimaryKeyWithIdentity.@ColDecimal && lo.@ColFloat == @tabWithNoPrimaryKeyWithIdentity.@ColFloat && lo.@ColImage == @tabWithNoPrimaryKeyWithIdentity.@ColImage && lo.@ColInt == @tabWithNoPrimaryKeyWithIdentity.@ColInt && lo.@ColMoney == @tabWithNoPrimaryKeyWithIdentity.@ColMoney && lo.@ColNchar == @tabWithNoPrimaryKeyWithIdentity.@ColNchar && lo.@ColNtext == @tabWithNoPrimaryKeyWithIdentity.@ColNtext && lo.@ColNumeric == @tabWithNoPrimaryKeyWithIdentity.@ColNumeric && lo.@ColNvarchar == @tabWithNoPrimaryKeyWithIdentity.@ColNvarchar && lo.@ColReal == @tabWithNoPrimaryKeyWithIdentity.@ColReal && lo.@ColRowversion == @tabWithNoPrimaryKeyWithIdentity.@ColRowversion && lo.@ColSmalldatetime == @tabWithNoPrimaryKeyWithIdentity.@ColSmalldatetime && lo.@ColSmallint == @tabWithNoPrimaryKeyWithIdentity.@ColSmallint && lo.@ColSmallmoney == @tabWithNoPrimaryKeyWithIdentity.@ColSmallmoney && lo.@ColSqlVariant == @tabWithNoPrimaryKeyWithIdentity.@ColSqlVariant && lo.@ColSysname == @tabWithNoPrimaryKeyWithIdentity.@ColSysname && lo.@ColText == @tabWithNoPrimaryKeyWithIdentity.@ColText && lo.@ColTime == @tabWithNoPrimaryKeyWithIdentity.@ColTime && lo.@ColTinyint == @tabWithNoPrimaryKeyWithIdentity.@ColTinyint && lo.@ColUniqueidentifier == @tabWithNoPrimaryKeyWithIdentity.@ColUniqueidentifier && lo.@ColVarbinary == @tabWithNoPrimaryKeyWithIdentity.@ColVarbinary && lo.@ColVarchar == @tabWithNoPrimaryKeyWithIdentity.@ColVarchar && lo.@ColXml == @tabWithNoPrimaryKeyWithIdentity.@ColXml);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TabWithNoPrimaryKeyWithIdentities.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTabWithNoPrimaryKeyWithIdentity(unitOfWork, @tabWithNoPrimaryKeyWithIdentity);
					
					return false;
				}

				this.OnPostDeleteTabWithNoPrimaryKeyWithIdentity(unitOfWork, @tabWithNoPrimaryKeyWithIdentity);
				
				@tabWithNoPrimaryKeyWithIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTabWithNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TabWithNoPrimaryKeyWithIdentity @tabWithNoPrimaryKeyWithIdentity);
		
		partial void OnPostInsertTabWithNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TabWithNoPrimaryKeyWithIdentity @tabWithNoPrimaryKeyWithIdentity);
		
		partial void OnPreUpdateTabWithNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TabWithNoPrimaryKeyWithIdentity @tabWithNoPrimaryKeyWithIdentity);
		
		partial void OnPostUpdateTabWithNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TabWithNoPrimaryKeyWithIdentity @tabWithNoPrimaryKeyWithIdentity);
		
		partial void OnPreDeleteTabWithNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TabWithNoPrimaryKeyWithIdentity @tabWithNoPrimaryKeyWithIdentity);
		
		partial void OnPostDeleteTabWithNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TabWithNoPrimaryKeyWithIdentity @tabWithNoPrimaryKeyWithIdentity);
		
		partial void OnSaveConflictTabWithNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TabWithNoPrimaryKeyWithIdentity @tabWithNoPrimaryKeyWithIdentity);
		
		partial void OnDiscardConflictTabWithNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TabWithNoPrimaryKeyWithIdentity @tabWithNoPrimaryKeyWithIdentity);
		
		partial void OnSelectTabWithNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TabWithNoPrimaryKeyWithIdentity @tabWithNoPrimaryKeyWithIdentity);		

		public TabWithPrimaryKeyNoIdentity LoadTabWithPrimaryKeyNoIdentity(Int32 @colIntPk)
		{
			TabWithPrimaryKeyNoIdentity @tabWithPrimaryKeyNoIdentity;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tabWithPrimaryKeyNoIdentity = this.LoadTabWithPrimaryKeyNoIdentity(unitOfWork, @colIntPk);

					unitOfWork.Complete();
				}
			}
			else
				@tabWithPrimaryKeyNoIdentity = this.LoadTabWithPrimaryKeyNoIdentity(UnitOfWork.Current, @colIntPk);
			
			return @tabWithPrimaryKeyNoIdentity;
		}
		
		public TabWithPrimaryKeyNoIdentity LoadTabWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, Int32 @colIntPk)
		{			
			TabWithPrimaryKeyNoIdentity @tabWithPrimaryKeyNoIdentity;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyNoIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TabWithPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@ColIntPk == @colIntPk);

				if ((object)query == null)
					return null; // does not exist
				
				@tabWithPrimaryKeyNoIdentity = new TabWithPrimaryKeyNoIdentity()
								{
									// map result to POCO from L2S object
									@ColIntPk = query.@ColIntPk,
									@ColBigint = query.@ColBigint,
									@ColBinary = (object)query.ColBinary != null ? query.@ColBinary.ToArray() : null,
									@ColBit = query.@ColBit,
									@ColChar = query.@ColChar,
									@ColDate = query.@ColDate,
									@ColDatetime = query.@ColDatetime,
									@ColDatetime2 = query.@ColDatetime2,
									@ColDatetimeoffset = query.@ColDatetimeoffset,
									@ColDecimal = query.@ColDecimal,
									@ColFloat = query.@ColFloat,
									@ColImage = (object)query.ColImage != null ? query.@ColImage.ToArray() : null,
									@ColInt = query.@ColInt,
									@ColMoney = query.@ColMoney,
									@ColNchar = query.@ColNchar,
									@ColNtext = query.@ColNtext,
									@ColNumeric = query.@ColNumeric,
									@ColNvarchar = query.@ColNvarchar,
									@ColReal = query.@ColReal,
									@ColRowversion = query.@ColRowversion,
									@ColSmalldatetime = query.@ColSmalldatetime,
									@ColSmallint = query.@ColSmallint,
									@ColSmallmoney = query.@ColSmallmoney,
									@ColSqlVariant = query.@ColSqlVariant,
									@ColSysname = query.@ColSysname,
									@ColText = query.@ColText,
									@ColTime = query.@ColTime,
									@ColTinyint = query.@ColTinyint,
									@ColUniqueidentifier = query.@ColUniqueidentifier,
									@ColVarbinary = (object)query.ColVarbinary != null ? query.@ColVarbinary.ToArray() : null,
									@ColVarchar = query.@ColVarchar,
									@ColXml = query.@ColXml
								};	

				this.OnSelectTabWithPrimaryKeyNoIdentity(unitOfWork, @tabWithPrimaryKeyNoIdentity);

				return @tabWithPrimaryKeyNoIdentity;
			}
		}
		
		public IEnumerable<TabWithPrimaryKeyNoIdentity> FindTabWithPrimaryKeyNoIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyNoIdentity>> callback)
		{
			IEnumerable<TabWithPrimaryKeyNoIdentity> @tabWithPrimaryKeyNoIdentities;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tabWithPrimaryKeyNoIdentities = this.FindTabWithPrimaryKeyNoIdentities(unitOfWork, callback);

					@tabWithPrimaryKeyNoIdentities = @tabWithPrimaryKeyNoIdentities.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@tabWithPrimaryKeyNoIdentities = this.FindTabWithPrimaryKeyNoIdentities(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @tabWithPrimaryKeyNoIdentities;
		}
		
		public IEnumerable<TabWithPrimaryKeyNoIdentity> FindTabWithPrimaryKeyNoIdentities(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyNoIdentity>> callback)
		{
			IEnumerable<TabWithPrimaryKeyNoIdentity> @tabWithPrimaryKeyNoIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyNoIdentity> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TabWithPrimaryKeyNoIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tabWithPrimaryKeyNoIdentities = queryable.Select(lo => new TabWithPrimaryKeyNoIdentity()
												 {
													// map results to POCOs from L2S objects
													@ColIntPk = lo.@ColIntPk,
													@ColBigint = lo.@ColBigint,
													@ColBinary = (object)lo.@ColBinary != null ? lo.@ColBinary.ToArray() : null,
													@ColBit = lo.@ColBit,
													@ColChar = lo.@ColChar,
													@ColDate = lo.@ColDate,
													@ColDatetime = lo.@ColDatetime,
													@ColDatetime2 = lo.@ColDatetime2,
													@ColDatetimeoffset = lo.@ColDatetimeoffset,
													@ColDecimal = lo.@ColDecimal,
													@ColFloat = lo.@ColFloat,
													@ColImage = (object)lo.@ColImage != null ? lo.@ColImage.ToArray() : null,
													@ColInt = lo.@ColInt,
													@ColMoney = lo.@ColMoney,
													@ColNchar = lo.@ColNchar,
													@ColNtext = lo.@ColNtext,
													@ColNumeric = lo.@ColNumeric,
													@ColNvarchar = lo.@ColNvarchar,
													@ColReal = lo.@ColReal,
													@ColRowversion = lo.@ColRowversion,
													@ColSmalldatetime = lo.@ColSmalldatetime,
													@ColSmallint = lo.@ColSmallint,
													@ColSmallmoney = lo.@ColSmallmoney,
													@ColSqlVariant = lo.@ColSqlVariant,
													@ColSysname = lo.@ColSysname,
													@ColText = lo.@ColText,
													@ColTime = lo.@ColTime,
													@ColTinyint = lo.@ColTinyint,
													@ColUniqueidentifier = lo.@ColUniqueidentifier,
													@ColVarbinary = (object)lo.@ColVarbinary != null ? lo.@ColVarbinary.ToArray() : null,
													@ColVarchar = lo.@ColVarchar,
													@ColXml = lo.@ColXml
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TabWithPrimaryKeyNoIdentity @tabWithPrimaryKeyNoIdentity in @tabWithPrimaryKeyNoIdentities)
				{
					this.OnSelectTabWithPrimaryKeyNoIdentity(unitOfWork, @tabWithPrimaryKeyNoIdentity);
					
					yield return @tabWithPrimaryKeyNoIdentity; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTabWithPrimaryKeyNoIdentity(TabWithPrimaryKeyNoIdentity @tabWithPrimaryKeyNoIdentity)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTabWithPrimaryKeyNoIdentity(unitOfWork, @tabWithPrimaryKeyNoIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTabWithPrimaryKeyNoIdentity(UnitOfWork.Current, @tabWithPrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool SaveTabWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyNoIdentity @tabWithPrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyNoIdentity query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tabWithPrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tabWithPrimaryKeyNoIdentity");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tabWithPrimaryKeyNoIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTabWithPrimaryKeyNoIdentity(unitOfWork, @tabWithPrimaryKeyNoIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyNoIdentity();

					wrapper.Disposable.TabWithPrimaryKeyNoIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTabWithPrimaryKeyNoIdentity(unitOfWork, @tabWithPrimaryKeyNoIdentity);
					
					query = wrapper.Disposable.TabWithPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@ColIntPk == @tabWithPrimaryKeyNoIdentity.@ColIntPk);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@ColIntPk = @tabWithPrimaryKeyNoIdentity.@ColIntPk;
				query.@ColBigint = @tabWithPrimaryKeyNoIdentity.@ColBigint;
				query.@ColBinary = @tabWithPrimaryKeyNoIdentity.@ColBinary;
				query.@ColBit = @tabWithPrimaryKeyNoIdentity.@ColBit;
				query.@ColChar = @tabWithPrimaryKeyNoIdentity.@ColChar;
				query.@ColDate = @tabWithPrimaryKeyNoIdentity.@ColDate;
				query.@ColDatetime = @tabWithPrimaryKeyNoIdentity.@ColDatetime;
				query.@ColDatetime2 = @tabWithPrimaryKeyNoIdentity.@ColDatetime2;
				query.@ColDatetimeoffset = @tabWithPrimaryKeyNoIdentity.@ColDatetimeoffset;
				query.@ColDecimal = @tabWithPrimaryKeyNoIdentity.@ColDecimal;
				query.@ColFloat = @tabWithPrimaryKeyNoIdentity.@ColFloat;
				if ((object)@tabWithPrimaryKeyNoIdentity.@ColImage != null) // prevent implicit conversion of null -> exception
					query.@ColImage = @tabWithPrimaryKeyNoIdentity.@ColImage;
				query.@ColInt = @tabWithPrimaryKeyNoIdentity.@ColInt;
				query.@ColMoney = @tabWithPrimaryKeyNoIdentity.@ColMoney;
				query.@ColNchar = @tabWithPrimaryKeyNoIdentity.@ColNchar;
				query.@ColNtext = @tabWithPrimaryKeyNoIdentity.@ColNtext;
				query.@ColNumeric = @tabWithPrimaryKeyNoIdentity.@ColNumeric;
				query.@ColNvarchar = @tabWithPrimaryKeyNoIdentity.@ColNvarchar;
				query.@ColReal = @tabWithPrimaryKeyNoIdentity.@ColReal;
				query.@ColRowversion = @tabWithPrimaryKeyNoIdentity.@ColRowversion;
				query.@ColSmalldatetime = @tabWithPrimaryKeyNoIdentity.@ColSmalldatetime;
				query.@ColSmallint = @tabWithPrimaryKeyNoIdentity.@ColSmallint;
				query.@ColSmallmoney = @tabWithPrimaryKeyNoIdentity.@ColSmallmoney;
				query.@ColSqlVariant = @tabWithPrimaryKeyNoIdentity.@ColSqlVariant;
				query.@ColSysname = @tabWithPrimaryKeyNoIdentity.@ColSysname;
				query.@ColText = @tabWithPrimaryKeyNoIdentity.@ColText;
				query.@ColTime = @tabWithPrimaryKeyNoIdentity.@ColTime;
				query.@ColTinyint = @tabWithPrimaryKeyNoIdentity.@ColTinyint;
				query.@ColUniqueidentifier = @tabWithPrimaryKeyNoIdentity.@ColUniqueidentifier;
				query.@ColVarbinary = @tabWithPrimaryKeyNoIdentity.@ColVarbinary;
				query.@ColVarchar = @tabWithPrimaryKeyNoIdentity.@ColVarchar;
				query.@ColXml = @tabWithPrimaryKeyNoIdentity.@ColXml;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTabWithPrimaryKeyNoIdentity(unitOfWork, @tabWithPrimaryKeyNoIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tabWithPrimaryKeyNoIdentity.@ColIntPk = query.@ColIntPk;
				@tabWithPrimaryKeyNoIdentity.@ColBigint = query.@ColBigint;
				@tabWithPrimaryKeyNoIdentity.@ColBinary = (object)query.@ColBinary != null ? query.@ColBinary.ToArray() : null;
				@tabWithPrimaryKeyNoIdentity.@ColBit = query.@ColBit;
				@tabWithPrimaryKeyNoIdentity.@ColChar = query.@ColChar;
				@tabWithPrimaryKeyNoIdentity.@ColDate = query.@ColDate;
				@tabWithPrimaryKeyNoIdentity.@ColDatetime = query.@ColDatetime;
				@tabWithPrimaryKeyNoIdentity.@ColDatetime2 = query.@ColDatetime2;
				@tabWithPrimaryKeyNoIdentity.@ColDatetimeoffset = query.@ColDatetimeoffset;
				@tabWithPrimaryKeyNoIdentity.@ColDecimal = query.@ColDecimal;
				@tabWithPrimaryKeyNoIdentity.@ColFloat = query.@ColFloat;
				@tabWithPrimaryKeyNoIdentity.@ColImage = (object)query.@ColImage != null ? query.@ColImage.ToArray() : null;
				@tabWithPrimaryKeyNoIdentity.@ColInt = query.@ColInt;
				@tabWithPrimaryKeyNoIdentity.@ColMoney = query.@ColMoney;
				@tabWithPrimaryKeyNoIdentity.@ColNchar = query.@ColNchar;
				@tabWithPrimaryKeyNoIdentity.@ColNtext = query.@ColNtext;
				@tabWithPrimaryKeyNoIdentity.@ColNumeric = query.@ColNumeric;
				@tabWithPrimaryKeyNoIdentity.@ColNvarchar = query.@ColNvarchar;
				@tabWithPrimaryKeyNoIdentity.@ColReal = query.@ColReal;
				@tabWithPrimaryKeyNoIdentity.@ColRowversion = query.@ColRowversion;
				@tabWithPrimaryKeyNoIdentity.@ColSmalldatetime = query.@ColSmalldatetime;
				@tabWithPrimaryKeyNoIdentity.@ColSmallint = query.@ColSmallint;
				@tabWithPrimaryKeyNoIdentity.@ColSmallmoney = query.@ColSmallmoney;
				@tabWithPrimaryKeyNoIdentity.@ColSqlVariant = query.@ColSqlVariant;
				@tabWithPrimaryKeyNoIdentity.@ColSysname = query.@ColSysname;
				@tabWithPrimaryKeyNoIdentity.@ColText = query.@ColText;
				@tabWithPrimaryKeyNoIdentity.@ColTime = query.@ColTime;
				@tabWithPrimaryKeyNoIdentity.@ColTinyint = query.@ColTinyint;
				@tabWithPrimaryKeyNoIdentity.@ColUniqueidentifier = query.@ColUniqueidentifier;
				@tabWithPrimaryKeyNoIdentity.@ColVarbinary = (object)query.@ColVarbinary != null ? query.@ColVarbinary.ToArray() : null;
				@tabWithPrimaryKeyNoIdentity.@ColVarchar = query.@ColVarchar;
				@tabWithPrimaryKeyNoIdentity.@ColXml = query.@ColXml;
						
				if (wasNew)
				{
					this.OnPostInsertTabWithPrimaryKeyNoIdentity(unitOfWork, @tabWithPrimaryKeyNoIdentity);
				}
				else
				{
					this.OnPostUpdateTabWithPrimaryKeyNoIdentity(unitOfWork, @tabWithPrimaryKeyNoIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTabWithPrimaryKeyNoIdentity(TabWithPrimaryKeyNoIdentity @tabWithPrimaryKeyNoIdentity)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTabWithPrimaryKeyNoIdentity(unitOfWork, @tabWithPrimaryKeyNoIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTabWithPrimaryKeyNoIdentity(UnitOfWork.Current, @tabWithPrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool DiscardTabWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyNoIdentity @tabWithPrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithPrimaryKeyNoIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tabWithPrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tabWithPrimaryKeyNoIdentity");
				
			if (@tabWithPrimaryKeyNoIdentity.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTabWithPrimaryKeyNoIdentity(unitOfWork, @tabWithPrimaryKeyNoIdentity);
				
				query = wrapper.Disposable.@TabWithPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@ColIntPk == @tabWithPrimaryKeyNoIdentity.@ColIntPk);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TabWithPrimaryKeyNoIdentities.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTabWithPrimaryKeyNoIdentity(unitOfWork, @tabWithPrimaryKeyNoIdentity);
					
					return false;
				}

				this.OnPostDeleteTabWithPrimaryKeyNoIdentity(unitOfWork, @tabWithPrimaryKeyNoIdentity);
				
				@tabWithPrimaryKeyNoIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTabWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyNoIdentity @tabWithPrimaryKeyNoIdentity);
		
		partial void OnPostInsertTabWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyNoIdentity @tabWithPrimaryKeyNoIdentity);
		
		partial void OnPreUpdateTabWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyNoIdentity @tabWithPrimaryKeyNoIdentity);
		
		partial void OnPostUpdateTabWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyNoIdentity @tabWithPrimaryKeyNoIdentity);
		
		partial void OnPreDeleteTabWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyNoIdentity @tabWithPrimaryKeyNoIdentity);
		
		partial void OnPostDeleteTabWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyNoIdentity @tabWithPrimaryKeyNoIdentity);
		
		partial void OnSaveConflictTabWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyNoIdentity @tabWithPrimaryKeyNoIdentity);
		
		partial void OnDiscardConflictTabWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyNoIdentity @tabWithPrimaryKeyNoIdentity);
		
		partial void OnSelectTabWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithPrimaryKeyNoIdentity @tabWithPrimaryKeyNoIdentity);		

		public TabNoPrimaryKeyNoIdentity LoadTabNoPrimaryKeyNoIdentity(Int64 @colBigint, Byte[] @colBinary, Boolean @colBit, String @colChar, DateTime @colDate, DateTime @colDatetime, DateTime @colDatetime2, DateTimeOffset @colDatetimeoffset, Decimal @colDecimal, Double @colFloat, Byte[] @colImage, Int32 @colInt, Decimal @colMoney, String @colNchar, String @colNtext, Decimal @colNumeric, String @colNvarchar, Single @colReal, Byte[] @colRowversion, DateTime @colSmalldatetime, Int16 @colSmallint, Decimal @colSmallmoney, Object @colSqlVariant, String @colSysname, String @colText, TimeSpan @colTime, Byte @colTinyint, Guid @colUniqueidentifier, Byte[] @colVarbinary, String @colVarchar, XmlDocument @colXml)
		{
			TabNoPrimaryKeyNoIdentity @tabNoPrimaryKeyNoIdentity;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tabNoPrimaryKeyNoIdentity = this.LoadTabNoPrimaryKeyNoIdentity(unitOfWork, @colBigint, @colBinary, @colBit, @colChar, @colDate, @colDatetime, @colDatetime2, @colDatetimeoffset, @colDecimal, @colFloat, @colImage, @colInt, @colMoney, @colNchar, @colNtext, @colNumeric, @colNvarchar, @colReal, @colRowversion, @colSmalldatetime, @colSmallint, @colSmallmoney, @colSqlVariant, @colSysname, @colText, @colTime, @colTinyint, @colUniqueidentifier, @colVarbinary, @colVarchar, @colXml);

					unitOfWork.Complete();
				}
			}
			else
				@tabNoPrimaryKeyNoIdentity = this.LoadTabNoPrimaryKeyNoIdentity(UnitOfWork.Current, @colBigint, @colBinary, @colBit, @colChar, @colDate, @colDatetime, @colDatetime2, @colDatetimeoffset, @colDecimal, @colFloat, @colImage, @colInt, @colMoney, @colNchar, @colNtext, @colNumeric, @colNvarchar, @colReal, @colRowversion, @colSmalldatetime, @colSmallint, @colSmallmoney, @colSqlVariant, @colSysname, @colText, @colTime, @colTinyint, @colUniqueidentifier, @colVarbinary, @colVarchar, @colXml);
			
			return @tabNoPrimaryKeyNoIdentity;
		}
		
		public TabNoPrimaryKeyNoIdentity LoadTabNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, Int64 @colBigint, Byte[] @colBinary, Boolean @colBit, String @colChar, DateTime @colDate, DateTime @colDatetime, DateTime @colDatetime2, DateTimeOffset @colDatetimeoffset, Decimal @colDecimal, Double @colFloat, Byte[] @colImage, Int32 @colInt, Decimal @colMoney, String @colNchar, String @colNtext, Decimal @colNumeric, String @colNvarchar, Single @colReal, Byte[] @colRowversion, DateTime @colSmalldatetime, Int16 @colSmallint, Decimal @colSmallmoney, Object @colSqlVariant, String @colSysname, String @colText, TimeSpan @colTime, Byte @colTinyint, Guid @colUniqueidentifier, Byte[] @colVarbinary, String @colVarchar, XmlDocument @colXml)
		{			
			TabNoPrimaryKeyNoIdentity @tabNoPrimaryKeyNoIdentity;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabNoPrimaryKeyNoIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TabNoPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@ColBigint == @colBigint && lo.@ColBinary == @colBinary && lo.@ColBit == @colBit && lo.@ColChar == @colChar && lo.@ColDate == @colDate && lo.@ColDatetime == @colDatetime && lo.@ColDatetime2 == @colDatetime2 && lo.@ColDatetimeoffset == @colDatetimeoffset && lo.@ColDecimal == @colDecimal && lo.@ColFloat == @colFloat && lo.@ColImage == @colImage && lo.@ColInt == @colInt && lo.@ColMoney == @colMoney && lo.@ColNchar == @colNchar && lo.@ColNtext == @colNtext && lo.@ColNumeric == @colNumeric && lo.@ColNvarchar == @colNvarchar && lo.@ColReal == @colReal && lo.@ColRowversion == @colRowversion && lo.@ColSmalldatetime == @colSmalldatetime && lo.@ColSmallint == @colSmallint && lo.@ColSmallmoney == @colSmallmoney && lo.@ColSqlVariant == @colSqlVariant && lo.@ColSysname == @colSysname && lo.@ColText == @colText && lo.@ColTime == @colTime && lo.@ColTinyint == @colTinyint && lo.@ColUniqueidentifier == @colUniqueidentifier && lo.@ColVarbinary == @colVarbinary && lo.@ColVarchar == @colVarchar && lo.@ColXml == @colXml);

				if ((object)query == null)
					return null; // does not exist
				
				@tabNoPrimaryKeyNoIdentity = new TabNoPrimaryKeyNoIdentity()
								{
									// map result to POCO from L2S object
									@ColBigint = query.@ColBigint,
									@ColBinary = (object)query.ColBinary != null ? query.@ColBinary.ToArray() : null,
									@ColBit = query.@ColBit,
									@ColChar = query.@ColChar,
									@ColDate = query.@ColDate,
									@ColDatetime = query.@ColDatetime,
									@ColDatetime2 = query.@ColDatetime2,
									@ColDatetimeoffset = query.@ColDatetimeoffset,
									@ColDecimal = query.@ColDecimal,
									@ColFloat = query.@ColFloat,
									@ColImage = (object)query.ColImage != null ? query.@ColImage.ToArray() : null,
									@ColInt = query.@ColInt,
									@ColMoney = query.@ColMoney,
									@ColNchar = query.@ColNchar,
									@ColNtext = query.@ColNtext,
									@ColNumeric = query.@ColNumeric,
									@ColNvarchar = query.@ColNvarchar,
									@ColReal = query.@ColReal,
									@ColRowversion = query.@ColRowversion,
									@ColSmalldatetime = query.@ColSmalldatetime,
									@ColSmallint = query.@ColSmallint,
									@ColSmallmoney = query.@ColSmallmoney,
									@ColSqlVariant = query.@ColSqlVariant,
									@ColSysname = query.@ColSysname,
									@ColText = query.@ColText,
									@ColTime = query.@ColTime,
									@ColTinyint = query.@ColTinyint,
									@ColUniqueidentifier = query.@ColUniqueidentifier,
									@ColVarbinary = (object)query.ColVarbinary != null ? query.@ColVarbinary.ToArray() : null,
									@ColVarchar = query.@ColVarchar,
									@ColXml = query.@ColXml
								};	

				this.OnSelectTabNoPrimaryKeyNoIdentity(unitOfWork, @tabNoPrimaryKeyNoIdentity);

				return @tabNoPrimaryKeyNoIdentity;
			}
		}
		
		public IEnumerable<TabNoPrimaryKeyNoIdentity> FindTabNoPrimaryKeyNoIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabNoPrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabNoPrimaryKeyNoIdentity>> callback)
		{
			IEnumerable<TabNoPrimaryKeyNoIdentity> @tabNoPrimaryKeyNoIdentities;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tabNoPrimaryKeyNoIdentities = this.FindTabNoPrimaryKeyNoIdentities(unitOfWork, callback);

					@tabNoPrimaryKeyNoIdentities = @tabNoPrimaryKeyNoIdentities.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@tabNoPrimaryKeyNoIdentities = this.FindTabNoPrimaryKeyNoIdentities(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @tabNoPrimaryKeyNoIdentities;
		}
		
		public IEnumerable<TabNoPrimaryKeyNoIdentity> FindTabNoPrimaryKeyNoIdentities(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabNoPrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabNoPrimaryKeyNoIdentity>> callback)
		{
			IEnumerable<TabNoPrimaryKeyNoIdentity> @tabNoPrimaryKeyNoIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabNoPrimaryKeyNoIdentity> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TabNoPrimaryKeyNoIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tabNoPrimaryKeyNoIdentities = queryable.Select(lo => new TabNoPrimaryKeyNoIdentity()
												 {
													// map results to POCOs from L2S objects
													@ColBigint = lo.@ColBigint,
													@ColBinary = (object)lo.@ColBinary != null ? lo.@ColBinary.ToArray() : null,
													@ColBit = lo.@ColBit,
													@ColChar = lo.@ColChar,
													@ColDate = lo.@ColDate,
													@ColDatetime = lo.@ColDatetime,
													@ColDatetime2 = lo.@ColDatetime2,
													@ColDatetimeoffset = lo.@ColDatetimeoffset,
													@ColDecimal = lo.@ColDecimal,
													@ColFloat = lo.@ColFloat,
													@ColImage = (object)lo.@ColImage != null ? lo.@ColImage.ToArray() : null,
													@ColInt = lo.@ColInt,
													@ColMoney = lo.@ColMoney,
													@ColNchar = lo.@ColNchar,
													@ColNtext = lo.@ColNtext,
													@ColNumeric = lo.@ColNumeric,
													@ColNvarchar = lo.@ColNvarchar,
													@ColReal = lo.@ColReal,
													@ColRowversion = lo.@ColRowversion,
													@ColSmalldatetime = lo.@ColSmalldatetime,
													@ColSmallint = lo.@ColSmallint,
													@ColSmallmoney = lo.@ColSmallmoney,
													@ColSqlVariant = lo.@ColSqlVariant,
													@ColSysname = lo.@ColSysname,
													@ColText = lo.@ColText,
													@ColTime = lo.@ColTime,
													@ColTinyint = lo.@ColTinyint,
													@ColUniqueidentifier = lo.@ColUniqueidentifier,
													@ColVarbinary = (object)lo.@ColVarbinary != null ? lo.@ColVarbinary.ToArray() : null,
													@ColVarchar = lo.@ColVarchar,
													@ColXml = lo.@ColXml
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TabNoPrimaryKeyNoIdentity @tabNoPrimaryKeyNoIdentity in @tabNoPrimaryKeyNoIdentities)
				{
					this.OnSelectTabNoPrimaryKeyNoIdentity(unitOfWork, @tabNoPrimaryKeyNoIdentity);
					
					yield return @tabNoPrimaryKeyNoIdentity; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTabNoPrimaryKeyNoIdentity(TabNoPrimaryKeyNoIdentity @tabNoPrimaryKeyNoIdentity)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTabNoPrimaryKeyNoIdentity(unitOfWork, @tabNoPrimaryKeyNoIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTabNoPrimaryKeyNoIdentity(UnitOfWork.Current, @tabNoPrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool SaveTabNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabNoPrimaryKeyNoIdentity @tabNoPrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabNoPrimaryKeyNoIdentity query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tabNoPrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tabNoPrimaryKeyNoIdentity");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tabNoPrimaryKeyNoIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTabNoPrimaryKeyNoIdentity(unitOfWork, @tabNoPrimaryKeyNoIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabNoPrimaryKeyNoIdentity();

					wrapper.Disposable.TabNoPrimaryKeyNoIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTabNoPrimaryKeyNoIdentity(unitOfWork, @tabNoPrimaryKeyNoIdentity);
					
					query = wrapper.Disposable.TabNoPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@ColBigint == @tabNoPrimaryKeyNoIdentity.@ColBigint && lo.@ColBinary == @tabNoPrimaryKeyNoIdentity.@ColBinary && lo.@ColBit == @tabNoPrimaryKeyNoIdentity.@ColBit && lo.@ColChar == @tabNoPrimaryKeyNoIdentity.@ColChar && lo.@ColDate == @tabNoPrimaryKeyNoIdentity.@ColDate && lo.@ColDatetime == @tabNoPrimaryKeyNoIdentity.@ColDatetime && lo.@ColDatetime2 == @tabNoPrimaryKeyNoIdentity.@ColDatetime2 && lo.@ColDatetimeoffset == @tabNoPrimaryKeyNoIdentity.@ColDatetimeoffset && lo.@ColDecimal == @tabNoPrimaryKeyNoIdentity.@ColDecimal && lo.@ColFloat == @tabNoPrimaryKeyNoIdentity.@ColFloat && lo.@ColImage == @tabNoPrimaryKeyNoIdentity.@ColImage && lo.@ColInt == @tabNoPrimaryKeyNoIdentity.@ColInt && lo.@ColMoney == @tabNoPrimaryKeyNoIdentity.@ColMoney && lo.@ColNchar == @tabNoPrimaryKeyNoIdentity.@ColNchar && lo.@ColNtext == @tabNoPrimaryKeyNoIdentity.@ColNtext && lo.@ColNumeric == @tabNoPrimaryKeyNoIdentity.@ColNumeric && lo.@ColNvarchar == @tabNoPrimaryKeyNoIdentity.@ColNvarchar && lo.@ColReal == @tabNoPrimaryKeyNoIdentity.@ColReal && lo.@ColRowversion == @tabNoPrimaryKeyNoIdentity.@ColRowversion && lo.@ColSmalldatetime == @tabNoPrimaryKeyNoIdentity.@ColSmalldatetime && lo.@ColSmallint == @tabNoPrimaryKeyNoIdentity.@ColSmallint && lo.@ColSmallmoney == @tabNoPrimaryKeyNoIdentity.@ColSmallmoney && lo.@ColSqlVariant == @tabNoPrimaryKeyNoIdentity.@ColSqlVariant && lo.@ColSysname == @tabNoPrimaryKeyNoIdentity.@ColSysname && lo.@ColText == @tabNoPrimaryKeyNoIdentity.@ColText && lo.@ColTime == @tabNoPrimaryKeyNoIdentity.@ColTime && lo.@ColTinyint == @tabNoPrimaryKeyNoIdentity.@ColTinyint && lo.@ColUniqueidentifier == @tabNoPrimaryKeyNoIdentity.@ColUniqueidentifier && lo.@ColVarbinary == @tabNoPrimaryKeyNoIdentity.@ColVarbinary && lo.@ColVarchar == @tabNoPrimaryKeyNoIdentity.@ColVarchar && lo.@ColXml == @tabNoPrimaryKeyNoIdentity.@ColXml);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@ColBigint = @tabNoPrimaryKeyNoIdentity.@ColBigint;
				query.@ColBinary = @tabNoPrimaryKeyNoIdentity.@ColBinary;
				query.@ColBit = @tabNoPrimaryKeyNoIdentity.@ColBit;
				query.@ColChar = @tabNoPrimaryKeyNoIdentity.@ColChar;
				query.@ColDate = @tabNoPrimaryKeyNoIdentity.@ColDate;
				query.@ColDatetime = @tabNoPrimaryKeyNoIdentity.@ColDatetime;
				query.@ColDatetime2 = @tabNoPrimaryKeyNoIdentity.@ColDatetime2;
				query.@ColDatetimeoffset = @tabNoPrimaryKeyNoIdentity.@ColDatetimeoffset;
				query.@ColDecimal = @tabNoPrimaryKeyNoIdentity.@ColDecimal;
				query.@ColFloat = @tabNoPrimaryKeyNoIdentity.@ColFloat;
				if ((object)@tabNoPrimaryKeyNoIdentity.@ColImage != null) // prevent implicit conversion of null -> exception
					query.@ColImage = @tabNoPrimaryKeyNoIdentity.@ColImage;
				query.@ColInt = @tabNoPrimaryKeyNoIdentity.@ColInt;
				query.@ColMoney = @tabNoPrimaryKeyNoIdentity.@ColMoney;
				query.@ColNchar = @tabNoPrimaryKeyNoIdentity.@ColNchar;
				query.@ColNtext = @tabNoPrimaryKeyNoIdentity.@ColNtext;
				query.@ColNumeric = @tabNoPrimaryKeyNoIdentity.@ColNumeric;
				query.@ColNvarchar = @tabNoPrimaryKeyNoIdentity.@ColNvarchar;
				query.@ColReal = @tabNoPrimaryKeyNoIdentity.@ColReal;
				query.@ColRowversion = @tabNoPrimaryKeyNoIdentity.@ColRowversion;
				query.@ColSmalldatetime = @tabNoPrimaryKeyNoIdentity.@ColSmalldatetime;
				query.@ColSmallint = @tabNoPrimaryKeyNoIdentity.@ColSmallint;
				query.@ColSmallmoney = @tabNoPrimaryKeyNoIdentity.@ColSmallmoney;
				query.@ColSqlVariant = @tabNoPrimaryKeyNoIdentity.@ColSqlVariant;
				query.@ColSysname = @tabNoPrimaryKeyNoIdentity.@ColSysname;
				query.@ColText = @tabNoPrimaryKeyNoIdentity.@ColText;
				query.@ColTime = @tabNoPrimaryKeyNoIdentity.@ColTime;
				query.@ColTinyint = @tabNoPrimaryKeyNoIdentity.@ColTinyint;
				query.@ColUniqueidentifier = @tabNoPrimaryKeyNoIdentity.@ColUniqueidentifier;
				query.@ColVarbinary = @tabNoPrimaryKeyNoIdentity.@ColVarbinary;
				query.@ColVarchar = @tabNoPrimaryKeyNoIdentity.@ColVarchar;
				query.@ColXml = @tabNoPrimaryKeyNoIdentity.@ColXml;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTabNoPrimaryKeyNoIdentity(unitOfWork, @tabNoPrimaryKeyNoIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tabNoPrimaryKeyNoIdentity.@ColBigint = query.@ColBigint;
				@tabNoPrimaryKeyNoIdentity.@ColBinary = (object)query.@ColBinary != null ? query.@ColBinary.ToArray() : null;
				@tabNoPrimaryKeyNoIdentity.@ColBit = query.@ColBit;
				@tabNoPrimaryKeyNoIdentity.@ColChar = query.@ColChar;
				@tabNoPrimaryKeyNoIdentity.@ColDate = query.@ColDate;
				@tabNoPrimaryKeyNoIdentity.@ColDatetime = query.@ColDatetime;
				@tabNoPrimaryKeyNoIdentity.@ColDatetime2 = query.@ColDatetime2;
				@tabNoPrimaryKeyNoIdentity.@ColDatetimeoffset = query.@ColDatetimeoffset;
				@tabNoPrimaryKeyNoIdentity.@ColDecimal = query.@ColDecimal;
				@tabNoPrimaryKeyNoIdentity.@ColFloat = query.@ColFloat;
				@tabNoPrimaryKeyNoIdentity.@ColImage = (object)query.@ColImage != null ? query.@ColImage.ToArray() : null;
				@tabNoPrimaryKeyNoIdentity.@ColInt = query.@ColInt;
				@tabNoPrimaryKeyNoIdentity.@ColMoney = query.@ColMoney;
				@tabNoPrimaryKeyNoIdentity.@ColNchar = query.@ColNchar;
				@tabNoPrimaryKeyNoIdentity.@ColNtext = query.@ColNtext;
				@tabNoPrimaryKeyNoIdentity.@ColNumeric = query.@ColNumeric;
				@tabNoPrimaryKeyNoIdentity.@ColNvarchar = query.@ColNvarchar;
				@tabNoPrimaryKeyNoIdentity.@ColReal = query.@ColReal;
				@tabNoPrimaryKeyNoIdentity.@ColRowversion = query.@ColRowversion;
				@tabNoPrimaryKeyNoIdentity.@ColSmalldatetime = query.@ColSmalldatetime;
				@tabNoPrimaryKeyNoIdentity.@ColSmallint = query.@ColSmallint;
				@tabNoPrimaryKeyNoIdentity.@ColSmallmoney = query.@ColSmallmoney;
				@tabNoPrimaryKeyNoIdentity.@ColSqlVariant = query.@ColSqlVariant;
				@tabNoPrimaryKeyNoIdentity.@ColSysname = query.@ColSysname;
				@tabNoPrimaryKeyNoIdentity.@ColText = query.@ColText;
				@tabNoPrimaryKeyNoIdentity.@ColTime = query.@ColTime;
				@tabNoPrimaryKeyNoIdentity.@ColTinyint = query.@ColTinyint;
				@tabNoPrimaryKeyNoIdentity.@ColUniqueidentifier = query.@ColUniqueidentifier;
				@tabNoPrimaryKeyNoIdentity.@ColVarbinary = (object)query.@ColVarbinary != null ? query.@ColVarbinary.ToArray() : null;
				@tabNoPrimaryKeyNoIdentity.@ColVarchar = query.@ColVarchar;
				@tabNoPrimaryKeyNoIdentity.@ColXml = query.@ColXml;
						
				if (wasNew)
				{
					this.OnPostInsertTabNoPrimaryKeyNoIdentity(unitOfWork, @tabNoPrimaryKeyNoIdentity);
				}
				else
				{
					this.OnPostUpdateTabNoPrimaryKeyNoIdentity(unitOfWork, @tabNoPrimaryKeyNoIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTabNoPrimaryKeyNoIdentity(TabNoPrimaryKeyNoIdentity @tabNoPrimaryKeyNoIdentity)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTabNoPrimaryKeyNoIdentity(unitOfWork, @tabNoPrimaryKeyNoIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTabNoPrimaryKeyNoIdentity(UnitOfWork.Current, @tabNoPrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool DiscardTabNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabNoPrimaryKeyNoIdentity @tabNoPrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabNoPrimaryKeyNoIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tabNoPrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tabNoPrimaryKeyNoIdentity");
				
			if (@tabNoPrimaryKeyNoIdentity.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTabNoPrimaryKeyNoIdentity(unitOfWork, @tabNoPrimaryKeyNoIdentity);
				
				query = wrapper.Disposable.@TabNoPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@ColBigint == @tabNoPrimaryKeyNoIdentity.@ColBigint && lo.@ColBinary == @tabNoPrimaryKeyNoIdentity.@ColBinary && lo.@ColBit == @tabNoPrimaryKeyNoIdentity.@ColBit && lo.@ColChar == @tabNoPrimaryKeyNoIdentity.@ColChar && lo.@ColDate == @tabNoPrimaryKeyNoIdentity.@ColDate && lo.@ColDatetime == @tabNoPrimaryKeyNoIdentity.@ColDatetime && lo.@ColDatetime2 == @tabNoPrimaryKeyNoIdentity.@ColDatetime2 && lo.@ColDatetimeoffset == @tabNoPrimaryKeyNoIdentity.@ColDatetimeoffset && lo.@ColDecimal == @tabNoPrimaryKeyNoIdentity.@ColDecimal && lo.@ColFloat == @tabNoPrimaryKeyNoIdentity.@ColFloat && lo.@ColImage == @tabNoPrimaryKeyNoIdentity.@ColImage && lo.@ColInt == @tabNoPrimaryKeyNoIdentity.@ColInt && lo.@ColMoney == @tabNoPrimaryKeyNoIdentity.@ColMoney && lo.@ColNchar == @tabNoPrimaryKeyNoIdentity.@ColNchar && lo.@ColNtext == @tabNoPrimaryKeyNoIdentity.@ColNtext && lo.@ColNumeric == @tabNoPrimaryKeyNoIdentity.@ColNumeric && lo.@ColNvarchar == @tabNoPrimaryKeyNoIdentity.@ColNvarchar && lo.@ColReal == @tabNoPrimaryKeyNoIdentity.@ColReal && lo.@ColRowversion == @tabNoPrimaryKeyNoIdentity.@ColRowversion && lo.@ColSmalldatetime == @tabNoPrimaryKeyNoIdentity.@ColSmalldatetime && lo.@ColSmallint == @tabNoPrimaryKeyNoIdentity.@ColSmallint && lo.@ColSmallmoney == @tabNoPrimaryKeyNoIdentity.@ColSmallmoney && lo.@ColSqlVariant == @tabNoPrimaryKeyNoIdentity.@ColSqlVariant && lo.@ColSysname == @tabNoPrimaryKeyNoIdentity.@ColSysname && lo.@ColText == @tabNoPrimaryKeyNoIdentity.@ColText && lo.@ColTime == @tabNoPrimaryKeyNoIdentity.@ColTime && lo.@ColTinyint == @tabNoPrimaryKeyNoIdentity.@ColTinyint && lo.@ColUniqueidentifier == @tabNoPrimaryKeyNoIdentity.@ColUniqueidentifier && lo.@ColVarbinary == @tabNoPrimaryKeyNoIdentity.@ColVarbinary && lo.@ColVarchar == @tabNoPrimaryKeyNoIdentity.@ColVarchar && lo.@ColXml == @tabNoPrimaryKeyNoIdentity.@ColXml);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TabNoPrimaryKeyNoIdentities.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTabNoPrimaryKeyNoIdentity(unitOfWork, @tabNoPrimaryKeyNoIdentity);
					
					return false;
				}

				this.OnPostDeleteTabNoPrimaryKeyNoIdentity(unitOfWork, @tabNoPrimaryKeyNoIdentity);
				
				@tabNoPrimaryKeyNoIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTabNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabNoPrimaryKeyNoIdentity @tabNoPrimaryKeyNoIdentity);
		
		partial void OnPostInsertTabNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabNoPrimaryKeyNoIdentity @tabNoPrimaryKeyNoIdentity);
		
		partial void OnPreUpdateTabNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabNoPrimaryKeyNoIdentity @tabNoPrimaryKeyNoIdentity);
		
		partial void OnPostUpdateTabNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabNoPrimaryKeyNoIdentity @tabNoPrimaryKeyNoIdentity);
		
		partial void OnPreDeleteTabNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabNoPrimaryKeyNoIdentity @tabNoPrimaryKeyNoIdentity);
		
		partial void OnPostDeleteTabNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabNoPrimaryKeyNoIdentity @tabNoPrimaryKeyNoIdentity);
		
		partial void OnSaveConflictTabNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabNoPrimaryKeyNoIdentity @tabNoPrimaryKeyNoIdentity);
		
		partial void OnDiscardConflictTabNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabNoPrimaryKeyNoIdentity @tabNoPrimaryKeyNoIdentity);
		
		partial void OnSelectTabNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabNoPrimaryKeyNoIdentity @tabNoPrimaryKeyNoIdentity);		

		public TabWithCompositePrimaryKeyNoIdentity LoadTabWithCompositePrimaryKeyNoIdentity(Int32 @colIntPk0, Int32 @colIntPk1, Int32 @colIntPk2, Int32 @colIntPk3)
		{
			TabWithCompositePrimaryKeyNoIdentity @tabWithCompositePrimaryKeyNoIdentity;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tabWithCompositePrimaryKeyNoIdentity = this.LoadTabWithCompositePrimaryKeyNoIdentity(unitOfWork, @colIntPk0, @colIntPk1, @colIntPk2, @colIntPk3);

					unitOfWork.Complete();
				}
			}
			else
				@tabWithCompositePrimaryKeyNoIdentity = this.LoadTabWithCompositePrimaryKeyNoIdentity(UnitOfWork.Current, @colIntPk0, @colIntPk1, @colIntPk2, @colIntPk3);
			
			return @tabWithCompositePrimaryKeyNoIdentity;
		}
		
		public TabWithCompositePrimaryKeyNoIdentity LoadTabWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, Int32 @colIntPk0, Int32 @colIntPk1, Int32 @colIntPk2, Int32 @colIntPk3)
		{			
			TabWithCompositePrimaryKeyNoIdentity @tabWithCompositePrimaryKeyNoIdentity;
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithCompositePrimaryKeyNoIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TabWithCompositePrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@ColIntPk0 == @colIntPk0 && lo.@ColIntPk1 == @colIntPk1 && lo.@ColIntPk2 == @colIntPk2 && lo.@ColIntPk3 == @colIntPk3);

				if ((object)query == null)
					return null; // does not exist
				
				@tabWithCompositePrimaryKeyNoIdentity = new TabWithCompositePrimaryKeyNoIdentity()
								{
									// map result to POCO from L2S object
									@ColIntPk0 = query.@ColIntPk0,
									@ColIntPk1 = query.@ColIntPk1,
									@ColIntPk2 = query.@ColIntPk2,
									@ColIntPk3 = query.@ColIntPk3,
									@ColBigint = query.@ColBigint,
									@ColBinary = (object)query.ColBinary != null ? query.@ColBinary.ToArray() : null,
									@ColBit = query.@ColBit,
									@ColChar = query.@ColChar,
									@ColDate = query.@ColDate,
									@ColDatetime = query.@ColDatetime,
									@ColDatetime2 = query.@ColDatetime2,
									@ColDatetimeoffset = query.@ColDatetimeoffset,
									@ColDecimal = query.@ColDecimal,
									@ColFloat = query.@ColFloat,
									@ColImage = (object)query.ColImage != null ? query.@ColImage.ToArray() : null,
									@ColInt = query.@ColInt,
									@ColMoney = query.@ColMoney,
									@ColNchar = query.@ColNchar,
									@ColNtext = query.@ColNtext,
									@ColNumeric = query.@ColNumeric,
									@ColNvarchar = query.@ColNvarchar,
									@ColReal = query.@ColReal,
									@ColRowversion = query.@ColRowversion,
									@ColSmalldatetime = query.@ColSmalldatetime,
									@ColSmallint = query.@ColSmallint,
									@ColSmallmoney = query.@ColSmallmoney,
									@ColSqlVariant = query.@ColSqlVariant,
									@ColSysname = query.@ColSysname,
									@ColText = query.@ColText,
									@ColTime = query.@ColTime,
									@ColTinyint = query.@ColTinyint,
									@ColUniqueidentifier = query.@ColUniqueidentifier,
									@ColVarbinary = (object)query.ColVarbinary != null ? query.@ColVarbinary.ToArray() : null,
									@ColVarchar = query.@ColVarchar,
									@ColXml = query.@ColXml
								};	

				this.OnSelectTabWithCompositePrimaryKeyNoIdentity(unitOfWork, @tabWithCompositePrimaryKeyNoIdentity);

				return @tabWithCompositePrimaryKeyNoIdentity;
			}
		}
		
		public IEnumerable<TabWithCompositePrimaryKeyNoIdentity> FindTabWithCompositePrimaryKeyNoIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithCompositePrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithCompositePrimaryKeyNoIdentity>> callback)
		{
			IEnumerable<TabWithCompositePrimaryKeyNoIdentity> @tabWithCompositePrimaryKeyNoIdentities;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tabWithCompositePrimaryKeyNoIdentities = this.FindTabWithCompositePrimaryKeyNoIdentities(unitOfWork, callback);

					@tabWithCompositePrimaryKeyNoIdentities = @tabWithCompositePrimaryKeyNoIdentities.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@tabWithCompositePrimaryKeyNoIdentities = this.FindTabWithCompositePrimaryKeyNoIdentities(UnitOfWork.Current, callback);
				
				// DO NOT FORCE EAGER LOAD
			}
			
			return @tabWithCompositePrimaryKeyNoIdentities;
		}
		
		public IEnumerable<TabWithCompositePrimaryKeyNoIdentity> FindTabWithCompositePrimaryKeyNoIdentities(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithCompositePrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithCompositePrimaryKeyNoIdentity>> callback)
		{
			IEnumerable<TabWithCompositePrimaryKeyNoIdentity> @tabWithCompositePrimaryKeyNoIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithCompositePrimaryKeyNoIdentity> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TabWithCompositePrimaryKeyNoIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tabWithCompositePrimaryKeyNoIdentities = queryable.Select(lo => new TabWithCompositePrimaryKeyNoIdentity()
												 {
													// map results to POCOs from L2S objects
													@ColIntPk0 = lo.@ColIntPk0,
													@ColIntPk1 = lo.@ColIntPk1,
													@ColIntPk2 = lo.@ColIntPk2,
													@ColIntPk3 = lo.@ColIntPk3,
													@ColBigint = lo.@ColBigint,
													@ColBinary = (object)lo.@ColBinary != null ? lo.@ColBinary.ToArray() : null,
													@ColBit = lo.@ColBit,
													@ColChar = lo.@ColChar,
													@ColDate = lo.@ColDate,
													@ColDatetime = lo.@ColDatetime,
													@ColDatetime2 = lo.@ColDatetime2,
													@ColDatetimeoffset = lo.@ColDatetimeoffset,
													@ColDecimal = lo.@ColDecimal,
													@ColFloat = lo.@ColFloat,
													@ColImage = (object)lo.@ColImage != null ? lo.@ColImage.ToArray() : null,
													@ColInt = lo.@ColInt,
													@ColMoney = lo.@ColMoney,
													@ColNchar = lo.@ColNchar,
													@ColNtext = lo.@ColNtext,
													@ColNumeric = lo.@ColNumeric,
													@ColNvarchar = lo.@ColNvarchar,
													@ColReal = lo.@ColReal,
													@ColRowversion = lo.@ColRowversion,
													@ColSmalldatetime = lo.@ColSmalldatetime,
													@ColSmallint = lo.@ColSmallint,
													@ColSmallmoney = lo.@ColSmallmoney,
													@ColSqlVariant = lo.@ColSqlVariant,
													@ColSysname = lo.@ColSysname,
													@ColText = lo.@ColText,
													@ColTime = lo.@ColTime,
													@ColTinyint = lo.@ColTinyint,
													@ColUniqueidentifier = lo.@ColUniqueidentifier,
													@ColVarbinary = (object)lo.@ColVarbinary != null ? lo.@ColVarbinary.ToArray() : null,
													@ColVarchar = lo.@ColVarchar,
													@ColXml = lo.@ColXml
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TabWithCompositePrimaryKeyNoIdentity @tabWithCompositePrimaryKeyNoIdentity in @tabWithCompositePrimaryKeyNoIdentities)
				{
					this.OnSelectTabWithCompositePrimaryKeyNoIdentity(unitOfWork, @tabWithCompositePrimaryKeyNoIdentity);
					
					yield return @tabWithCompositePrimaryKeyNoIdentity; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTabWithCompositePrimaryKeyNoIdentity(TabWithCompositePrimaryKeyNoIdentity @tabWithCompositePrimaryKeyNoIdentity)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTabWithCompositePrimaryKeyNoIdentity(unitOfWork, @tabWithCompositePrimaryKeyNoIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTabWithCompositePrimaryKeyNoIdentity(UnitOfWork.Current, @tabWithCompositePrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool SaveTabWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithCompositePrimaryKeyNoIdentity @tabWithCompositePrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithCompositePrimaryKeyNoIdentity query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tabWithCompositePrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tabWithCompositePrimaryKeyNoIdentity");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tabWithCompositePrimaryKeyNoIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTabWithCompositePrimaryKeyNoIdentity(unitOfWork, @tabWithCompositePrimaryKeyNoIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithCompositePrimaryKeyNoIdentity();

					wrapper.Disposable.TabWithCompositePrimaryKeyNoIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTabWithCompositePrimaryKeyNoIdentity(unitOfWork, @tabWithCompositePrimaryKeyNoIdentity);
					
					query = wrapper.Disposable.TabWithCompositePrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@ColIntPk0 == @tabWithCompositePrimaryKeyNoIdentity.@ColIntPk0 && lo.@ColIntPk1 == @tabWithCompositePrimaryKeyNoIdentity.@ColIntPk1 && lo.@ColIntPk2 == @tabWithCompositePrimaryKeyNoIdentity.@ColIntPk2 && lo.@ColIntPk3 == @tabWithCompositePrimaryKeyNoIdentity.@ColIntPk3);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@ColIntPk0 = @tabWithCompositePrimaryKeyNoIdentity.@ColIntPk0;
				query.@ColIntPk1 = @tabWithCompositePrimaryKeyNoIdentity.@ColIntPk1;
				query.@ColIntPk2 = @tabWithCompositePrimaryKeyNoIdentity.@ColIntPk2;
				query.@ColIntPk3 = @tabWithCompositePrimaryKeyNoIdentity.@ColIntPk3;
				query.@ColBigint = @tabWithCompositePrimaryKeyNoIdentity.@ColBigint;
				query.@ColBinary = @tabWithCompositePrimaryKeyNoIdentity.@ColBinary;
				query.@ColBit = @tabWithCompositePrimaryKeyNoIdentity.@ColBit;
				query.@ColChar = @tabWithCompositePrimaryKeyNoIdentity.@ColChar;
				query.@ColDate = @tabWithCompositePrimaryKeyNoIdentity.@ColDate;
				query.@ColDatetime = @tabWithCompositePrimaryKeyNoIdentity.@ColDatetime;
				query.@ColDatetime2 = @tabWithCompositePrimaryKeyNoIdentity.@ColDatetime2;
				query.@ColDatetimeoffset = @tabWithCompositePrimaryKeyNoIdentity.@ColDatetimeoffset;
				query.@ColDecimal = @tabWithCompositePrimaryKeyNoIdentity.@ColDecimal;
				query.@ColFloat = @tabWithCompositePrimaryKeyNoIdentity.@ColFloat;
				if ((object)@tabWithCompositePrimaryKeyNoIdentity.@ColImage != null) // prevent implicit conversion of null -> exception
					query.@ColImage = @tabWithCompositePrimaryKeyNoIdentity.@ColImage;
				query.@ColInt = @tabWithCompositePrimaryKeyNoIdentity.@ColInt;
				query.@ColMoney = @tabWithCompositePrimaryKeyNoIdentity.@ColMoney;
				query.@ColNchar = @tabWithCompositePrimaryKeyNoIdentity.@ColNchar;
				query.@ColNtext = @tabWithCompositePrimaryKeyNoIdentity.@ColNtext;
				query.@ColNumeric = @tabWithCompositePrimaryKeyNoIdentity.@ColNumeric;
				query.@ColNvarchar = @tabWithCompositePrimaryKeyNoIdentity.@ColNvarchar;
				query.@ColReal = @tabWithCompositePrimaryKeyNoIdentity.@ColReal;
				query.@ColRowversion = @tabWithCompositePrimaryKeyNoIdentity.@ColRowversion;
				query.@ColSmalldatetime = @tabWithCompositePrimaryKeyNoIdentity.@ColSmalldatetime;
				query.@ColSmallint = @tabWithCompositePrimaryKeyNoIdentity.@ColSmallint;
				query.@ColSmallmoney = @tabWithCompositePrimaryKeyNoIdentity.@ColSmallmoney;
				query.@ColSqlVariant = @tabWithCompositePrimaryKeyNoIdentity.@ColSqlVariant;
				query.@ColSysname = @tabWithCompositePrimaryKeyNoIdentity.@ColSysname;
				query.@ColText = @tabWithCompositePrimaryKeyNoIdentity.@ColText;
				query.@ColTime = @tabWithCompositePrimaryKeyNoIdentity.@ColTime;
				query.@ColTinyint = @tabWithCompositePrimaryKeyNoIdentity.@ColTinyint;
				query.@ColUniqueidentifier = @tabWithCompositePrimaryKeyNoIdentity.@ColUniqueidentifier;
				query.@ColVarbinary = @tabWithCompositePrimaryKeyNoIdentity.@ColVarbinary;
				query.@ColVarchar = @tabWithCompositePrimaryKeyNoIdentity.@ColVarchar;
				query.@ColXml = @tabWithCompositePrimaryKeyNoIdentity.@ColXml;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTabWithCompositePrimaryKeyNoIdentity(unitOfWork, @tabWithCompositePrimaryKeyNoIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tabWithCompositePrimaryKeyNoIdentity.@ColIntPk0 = query.@ColIntPk0;
				@tabWithCompositePrimaryKeyNoIdentity.@ColIntPk1 = query.@ColIntPk1;
				@tabWithCompositePrimaryKeyNoIdentity.@ColIntPk2 = query.@ColIntPk2;
				@tabWithCompositePrimaryKeyNoIdentity.@ColIntPk3 = query.@ColIntPk3;
				@tabWithCompositePrimaryKeyNoIdentity.@ColBigint = query.@ColBigint;
				@tabWithCompositePrimaryKeyNoIdentity.@ColBinary = (object)query.@ColBinary != null ? query.@ColBinary.ToArray() : null;
				@tabWithCompositePrimaryKeyNoIdentity.@ColBit = query.@ColBit;
				@tabWithCompositePrimaryKeyNoIdentity.@ColChar = query.@ColChar;
				@tabWithCompositePrimaryKeyNoIdentity.@ColDate = query.@ColDate;
				@tabWithCompositePrimaryKeyNoIdentity.@ColDatetime = query.@ColDatetime;
				@tabWithCompositePrimaryKeyNoIdentity.@ColDatetime2 = query.@ColDatetime2;
				@tabWithCompositePrimaryKeyNoIdentity.@ColDatetimeoffset = query.@ColDatetimeoffset;
				@tabWithCompositePrimaryKeyNoIdentity.@ColDecimal = query.@ColDecimal;
				@tabWithCompositePrimaryKeyNoIdentity.@ColFloat = query.@ColFloat;
				@tabWithCompositePrimaryKeyNoIdentity.@ColImage = (object)query.@ColImage != null ? query.@ColImage.ToArray() : null;
				@tabWithCompositePrimaryKeyNoIdentity.@ColInt = query.@ColInt;
				@tabWithCompositePrimaryKeyNoIdentity.@ColMoney = query.@ColMoney;
				@tabWithCompositePrimaryKeyNoIdentity.@ColNchar = query.@ColNchar;
				@tabWithCompositePrimaryKeyNoIdentity.@ColNtext = query.@ColNtext;
				@tabWithCompositePrimaryKeyNoIdentity.@ColNumeric = query.@ColNumeric;
				@tabWithCompositePrimaryKeyNoIdentity.@ColNvarchar = query.@ColNvarchar;
				@tabWithCompositePrimaryKeyNoIdentity.@ColReal = query.@ColReal;
				@tabWithCompositePrimaryKeyNoIdentity.@ColRowversion = query.@ColRowversion;
				@tabWithCompositePrimaryKeyNoIdentity.@ColSmalldatetime = query.@ColSmalldatetime;
				@tabWithCompositePrimaryKeyNoIdentity.@ColSmallint = query.@ColSmallint;
				@tabWithCompositePrimaryKeyNoIdentity.@ColSmallmoney = query.@ColSmallmoney;
				@tabWithCompositePrimaryKeyNoIdentity.@ColSqlVariant = query.@ColSqlVariant;
				@tabWithCompositePrimaryKeyNoIdentity.@ColSysname = query.@ColSysname;
				@tabWithCompositePrimaryKeyNoIdentity.@ColText = query.@ColText;
				@tabWithCompositePrimaryKeyNoIdentity.@ColTime = query.@ColTime;
				@tabWithCompositePrimaryKeyNoIdentity.@ColTinyint = query.@ColTinyint;
				@tabWithCompositePrimaryKeyNoIdentity.@ColUniqueidentifier = query.@ColUniqueidentifier;
				@tabWithCompositePrimaryKeyNoIdentity.@ColVarbinary = (object)query.@ColVarbinary != null ? query.@ColVarbinary.ToArray() : null;
				@tabWithCompositePrimaryKeyNoIdentity.@ColVarchar = query.@ColVarchar;
				@tabWithCompositePrimaryKeyNoIdentity.@ColXml = query.@ColXml;
						
				if (wasNew)
				{
					this.OnPostInsertTabWithCompositePrimaryKeyNoIdentity(unitOfWork, @tabWithCompositePrimaryKeyNoIdentity);
				}
				else
				{
					this.OnPostUpdateTabWithCompositePrimaryKeyNoIdentity(unitOfWork, @tabWithCompositePrimaryKeyNoIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTabWithCompositePrimaryKeyNoIdentity(TabWithCompositePrimaryKeyNoIdentity @tabWithCompositePrimaryKeyNoIdentity)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTabWithCompositePrimaryKeyNoIdentity(unitOfWork, @tabWithCompositePrimaryKeyNoIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTabWithCompositePrimaryKeyNoIdentity(UnitOfWork.Current, @tabWithCompositePrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool DiscardTabWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithCompositePrimaryKeyNoIdentity @tabWithCompositePrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TabWithCompositePrimaryKeyNoIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tabWithCompositePrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tabWithCompositePrimaryKeyNoIdentity");
				
			if (@tabWithCompositePrimaryKeyNoIdentity.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTabWithCompositePrimaryKeyNoIdentity(unitOfWork, @tabWithCompositePrimaryKeyNoIdentity);
				
				query = wrapper.Disposable.@TabWithCompositePrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@ColIntPk0 == @tabWithCompositePrimaryKeyNoIdentity.@ColIntPk0 && lo.@ColIntPk1 == @tabWithCompositePrimaryKeyNoIdentity.@ColIntPk1 && lo.@ColIntPk2 == @tabWithCompositePrimaryKeyNoIdentity.@ColIntPk2 && lo.@ColIntPk3 == @tabWithCompositePrimaryKeyNoIdentity.@ColIntPk3);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TabWithCompositePrimaryKeyNoIdentities.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTabWithCompositePrimaryKeyNoIdentity(unitOfWork, @tabWithCompositePrimaryKeyNoIdentity);
					
					return false;
				}

				this.OnPostDeleteTabWithCompositePrimaryKeyNoIdentity(unitOfWork, @tabWithCompositePrimaryKeyNoIdentity);
				
				@tabWithCompositePrimaryKeyNoIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTabWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithCompositePrimaryKeyNoIdentity @tabWithCompositePrimaryKeyNoIdentity);
		
		partial void OnPostInsertTabWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithCompositePrimaryKeyNoIdentity @tabWithCompositePrimaryKeyNoIdentity);
		
		partial void OnPreUpdateTabWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithCompositePrimaryKeyNoIdentity @tabWithCompositePrimaryKeyNoIdentity);
		
		partial void OnPostUpdateTabWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithCompositePrimaryKeyNoIdentity @tabWithCompositePrimaryKeyNoIdentity);
		
		partial void OnPreDeleteTabWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithCompositePrimaryKeyNoIdentity @tabWithCompositePrimaryKeyNoIdentity);
		
		partial void OnPostDeleteTabWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithCompositePrimaryKeyNoIdentity @tabWithCompositePrimaryKeyNoIdentity);
		
		partial void OnSaveConflictTabWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithCompositePrimaryKeyNoIdentity @tabWithCompositePrimaryKeyNoIdentity);
		
		partial void OnDiscardConflictTabWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithCompositePrimaryKeyNoIdentity @tabWithCompositePrimaryKeyNoIdentity);
		
		partial void OnSelectTabWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TabWithCompositePrimaryKeyNoIdentity @tabWithCompositePrimaryKeyNoIdentity);		

		#endregion
	}
}
