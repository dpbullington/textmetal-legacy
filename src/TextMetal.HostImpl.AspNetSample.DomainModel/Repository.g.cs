//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by:
// TextMetal 6.0.0.29228;
// 		Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
//		Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
//		Project URL: https://github.com/dpbullington/textmetal
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------

/*
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Xml;
using System.Xml.Linq;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
using TextMetal.Common.Data.Framework;
using TextMetal.Common.Data.Framework.LinqToSql;
using TextMetal.Common.Expressions;
using TextMetal.Common.Solder.DependencyManagement;
using TextMetal.HostImpl.AspNetSample.DomainModel.Tables;
using TextMetal.HostImpl.AspNetSample.DomainModel.Views;
//using TextMetal.HostImpl.AspNetSample.DomainModel.Procedures;

[assembly: DependencyRegistration]

namespace TextMetal.HostImpl.AspNetSample.DomainModel
{
	[DependencyRegistration]
	public partial class Repository : IRepository
	{		
		#region Constructors/Destructors
		
		public Repository()
		{
		}
		
		#endregion
		
		#region Fields/Constants
		
		private const string APP_CONFIG_PREFIX = "TextMetal.HostImpl.AspNetSample.DomainModel";
		private const string CONNECTION_STRING_NAME = "TextMetal.HostImpl.AspNetSample.DomainModel::ConnectionString";
		private const string DATA_SOURCE_TAG = "TextMetal.HostImpl.AspNetSample.DomainModel::DataSourceTag";
						
		#endregion

		#region Properties/Indexers/Events

		public static string ConnectionString
		{
			get
			{
				string connectionString;

				connectionString = AppConfig.GetConnectionString(ConnectionStringName);

				OnPreProcessConnectionString(ref connectionString);

				return connectionString;
			}
		}

		public static string ConnectionStringName
		{
			get
			{
				string connectionStringName;

				connectionStringName = CONNECTION_STRING_NAME;
				OnPreProcessConnectionStringName(ref connectionStringName);

				return connectionStringName;
			}
		}

		public static Type ConnectionType
		{
			get
			{
				return Type.GetType(AppConfig.GetConnectionProvider(ConnectionStringName), true);
			}
		}

		public static string DataSourceTag
		{
			get
			{
				string value;

				if (!AppConfig.HasAppSetting(DATA_SOURCE_TAG))
					return null;

				value = AppConfig.GetAppSetting<string>(DATA_SOURCE_TAG);

				return value;
			}
		}

		#endregion
		
		#region Methods/Operators

		[DependencyRegistration]
		public static void OnDepenndencyRegistration()
		{
			DependencyManager.AppDomainInstance.AddResolution<IRepository>("", new ConstructorDependencyResolution<Repository>());

			DependencyManager.AppDomainInstance.AddResolution<IOrganization>("", DelegateDependencyResolution.FromFunc(() => new Organization()));
			DependencyManager.AppDomainInstance.AddResolution<IMember>("", DelegateDependencyResolution.FromFunc(() => new Member()));
			DependencyManager.AppDomainInstance.AddResolution<IEventLogExtent>("", DelegateDependencyResolution.FromFunc(() => new EventLogExtent()));
			DependencyManager.AppDomainInstance.AddResolution<IUser>("", DelegateDependencyResolution.FromFunc(() => new User()));
			DependencyManager.AppDomainInstance.AddResolution<ISecurityRole>("", DelegateDependencyResolution.FromFunc(() => new SecurityRole()));
			DependencyManager.AppDomainInstance.AddResolution<IPropertyBag>("", DelegateDependencyResolution.FromFunc(() => new PropertyBag()));
			DependencyManager.AppDomainInstance.AddResolution<IEventLog>("", DelegateDependencyResolution.FromFunc(() => new EventLog()));
			DependencyManager.AppDomainInstance.AddResolution<IEmailMessage>("", DelegateDependencyResolution.FromFunc(() => new EmailMessage()));
			DependencyManager.AppDomainInstance.AddResolution<IEmailAttachment>("", DelegateDependencyResolution.FromFunc(() => new EmailAttachment()));
			DependencyManager.AppDomainInstance.AddResolution<IOrganizationHistory>("", DelegateDependencyResolution.FromFunc(() => new OrganizationHistory()));
			DependencyManager.AppDomainInstance.AddResolution<IMemberHistory>("", DelegateDependencyResolution.FromFunc(() => new MemberHistory()));
			DependencyManager.AppDomainInstance.AddResolution<IUserHistory>("", DelegateDependencyResolution.FromFunc(() => new UserHistory()));
			DependencyManager.AppDomainInstance.AddResolution<ISecurityRoleHistory>("", DelegateDependencyResolution.FromFunc(() => new SecurityRoleHistory()));
			DependencyManager.AppDomainInstance.AddResolution<IPropertyBagHistory>("", DelegateDependencyResolution.FromFunc(() => new PropertyBagHistory()));
			DependencyManager.AppDomainInstance.AddResolution<IEventLogHistory>("", DelegateDependencyResolution.FromFunc(() => new EventLogHistory()));
			DependencyManager.AppDomainInstance.AddResolution<IEmailMessageHistory>("", DelegateDependencyResolution.FromFunc(() => new EmailMessageHistory()));
			DependencyManager.AppDomainInstance.AddResolution<IEmailAttachmentHistory>("", DelegateDependencyResolution.FromFunc(() => new EmailAttachmentHistory()));
			DependencyManager.AppDomainInstance.AddResolution<ITabWithPrimaryKeyAsIdentity>("", DelegateDependencyResolution.FromFunc(() => new TabWithPrimaryKeyAsIdentity()));
			DependencyManager.AppDomainInstance.AddResolution<ITabWithPrimaryKeyAsDefault>("", DelegateDependencyResolution.FromFunc(() => new TabWithPrimaryKeyAsDefault()));
			DependencyManager.AppDomainInstance.AddResolution<ITabWithPrimaryKeyWithDifferentIdentity>("", DelegateDependencyResolution.FromFunc(() => new TabWithPrimaryKeyWithDifferentIdentity()));
			DependencyManager.AppDomainInstance.AddResolution<ITabWithNoPrimaryKeyWithIdentity>("", DelegateDependencyResolution.FromFunc(() => new TabWithNoPrimaryKeyWithIdentity()));
			DependencyManager.AppDomainInstance.AddResolution<ITabWithPrimaryKeyNoIdentity>("", DelegateDependencyResolution.FromFunc(() => new TabWithPrimaryKeyNoIdentity()));
			DependencyManager.AppDomainInstance.AddResolution<ITabNoPrimaryKeyNoIdentity>("", DelegateDependencyResolution.FromFunc(() => new TabNoPrimaryKeyNoIdentity()));
			DependencyManager.AppDomainInstance.AddResolution<ITabWithCompositePrimaryKeyNoIdentity>("", DelegateDependencyResolution.FromFunc(() => new TabWithCompositePrimaryKeyNoIdentity()));
		}
		
		public IEnumerable<TResultEntity> Find<TDataContext, TResultEntity>(TDataContext dummy, Func<TDataContext, IQueryable<TResultEntity>> callback)
			where TDataContext : class, IDisposable
		{
			IEnumerable<TResultEntity> things;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					things = this.Find<TDataContext, TResultEntity>(dummy, unitOfWork, callback);

					things = things.ToList(); // FORCE EAGER LOAD

					unitOfWork.Complete();
				}
			}
			else
			{
				things = this.Find<TDataContext, TResultEntity>(dummy, UnitOfWork.Current, callback);

				// DO NOT FORCE EAGER LOAD
			}

			return things;
		}

		public IEnumerable<TResultEntity> Find<TDataContext, TResultEntity>(TDataContext dummy, IUnitOfWork unitOfWork, Func<TDataContext, IQueryable<TResultEntity>> callback)
			where TDataContext : class, IDisposable
		{
			IEnumerable<TResultEntity> things;
			IQueryable<TResultEntity> queryable;

			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)callback == null)
				throw new ArgumentNullException("callback");

			using (AmbientUnitOfWorkAwareDisposableWrapper<TDataContext> wrapper = unitOfWork.GetContext<TDataContext>())
			{
				queryable = callback(wrapper.Disposable);

				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));

				things = queryable; // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TResultEntity thing in things)
				{
					//this.OnSelect(unitOfWork, thing);
					//thing.Mark();
					yield return thing; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}
			}
		}

		public static IUnitOfWork GetUnitOfWork()
		{
			return UnitOfWork.Create(ConnectionType, ConnectionString, true);
		}
		
		public static void InitDatabase()
		{
			// do nothing
			throw new NotSupportedException("LINQ to SQL is being used.");
		}

		static partial void OnPreProcessConnectionString(ref string connectionString);

		static partial void OnPreProcessConnectionStringName(ref string connectionStringName);

		#endregion
		
		#region Classes/Structs/Interfaces/Enums/Delegates

		public sealed class DefaultUnitOfWorkFactory : IUnitOfWorkFactory
		{
			#region Constructors/Destructors

			private DefaultUnitOfWorkFactory()
			{
			}

			#endregion

			#region Fields/Constants

			private static readonly IUnitOfWorkFactory instance = new DefaultUnitOfWorkFactory();

			#endregion

			#region Properties/Indexers/Events

			public static IUnitOfWorkFactory Instance
			{
				get
				{
					return instance;
				}
			}

			#endregion

			#region Methods/Operators

			public IUnitOfWork GetUnitOfWork()
			{
				return Repository.GetUnitOfWork();
			}

			#endregion
		}

		#endregion
	}
}
