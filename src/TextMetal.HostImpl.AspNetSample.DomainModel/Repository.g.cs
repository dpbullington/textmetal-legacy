//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by:
// TextMetal 6.0.0.21411;
// 		Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
//		Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
//		Project URL: https://github.com/dpbullington/textmetal
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------

/*
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Xml;
using System.Xml.Linq;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
using TextMetal.Common.Data.Framework;
using TextMetal.Common.Data.Framework.LinqToSql;
using TextMetal.Common.Syntax.Expressions;
using TextMetal.Common.Syntax.Operators;
using TextMetal.Common.Syntax.Statements;
using TextMetal.Common.Solder.DependencyManagement;
using TextMetal.HostImpl.AspNetSample.DomainModel.Tables;
using TextMetal.HostImpl.AspNetSample.DomainModel.Views;
//using TextMetal.HostImpl.AspNetSample.DomainModel.Procedures;

[assembly: DependencyRegistration]

namespace TextMetal.HostImpl.AspNetSample.DomainModel
{
	[DependencyRegistration]
	public partial class Repository : LinqToSqlModelRepository<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.TextMetalOdsDataContext>, IRepository
	{
		#region Constructors/Destructors

		public Repository()
		{
		}

		#endregion

		#region Methods/Operators

		[DependencyRegistration]
		public static void OnDepenndencyRegistration()
		{
			DependencyManager.AppDomainInstance.AddResolution<IRepository>("", new ConstructorDependencyResolution<Repository>());

			DependencyManager.AppDomainInstance.AddResolution<IOrganization>("", ActivatorDependencyResolution.FromNonPublicDefault<Organization>());
			DependencyManager.AppDomainInstance.AddResolution<IMember>("", ActivatorDependencyResolution.FromNonPublicDefault<Member>());
			DependencyManager.AppDomainInstance.AddResolution<IEventLogExtent>("", ActivatorDependencyResolution.FromNonPublicDefault<EventLogExtent>());
			DependencyManager.AppDomainInstance.AddResolution<IUser>("", ActivatorDependencyResolution.FromNonPublicDefault<User>());
			DependencyManager.AppDomainInstance.AddResolution<ISecurityRole>("", ActivatorDependencyResolution.FromNonPublicDefault<SecurityRole>());
			DependencyManager.AppDomainInstance.AddResolution<IPropertyBag>("", ActivatorDependencyResolution.FromNonPublicDefault<PropertyBag>());
			DependencyManager.AppDomainInstance.AddResolution<IEventLog>("", ActivatorDependencyResolution.FromNonPublicDefault<EventLog>());
			DependencyManager.AppDomainInstance.AddResolution<IEmailMessage>("", ActivatorDependencyResolution.FromNonPublicDefault<EmailMessage>());
			DependencyManager.AppDomainInstance.AddResolution<IEmailAttachment>("", ActivatorDependencyResolution.FromNonPublicDefault<EmailAttachment>());
			DependencyManager.AppDomainInstance.AddResolution<IOrganizationHistory>("", ActivatorDependencyResolution.FromNonPublicDefault<OrganizationHistory>());
			DependencyManager.AppDomainInstance.AddResolution<IMemberHistory>("", ActivatorDependencyResolution.FromNonPublicDefault<MemberHistory>());
			DependencyManager.AppDomainInstance.AddResolution<IUserHistory>("", ActivatorDependencyResolution.FromNonPublicDefault<UserHistory>());
			DependencyManager.AppDomainInstance.AddResolution<ISecurityRoleHistory>("", ActivatorDependencyResolution.FromNonPublicDefault<SecurityRoleHistory>());
			DependencyManager.AppDomainInstance.AddResolution<IPropertyBagHistory>("", ActivatorDependencyResolution.FromNonPublicDefault<PropertyBagHistory>());
			DependencyManager.AppDomainInstance.AddResolution<IEventLogHistory>("", ActivatorDependencyResolution.FromNonPublicDefault<EventLogHistory>());
			DependencyManager.AppDomainInstance.AddResolution<IEmailMessageHistory>("", ActivatorDependencyResolution.FromNonPublicDefault<EmailMessageHistory>());
			DependencyManager.AppDomainInstance.AddResolution<IEmailAttachmentHistory>("", ActivatorDependencyResolution.FromNonPublicDefault<EmailAttachmentHistory>());
			DependencyManager.AppDomainInstance.AddResolution<ITabWithPrimaryKeyAsIdentity>("", ActivatorDependencyResolution.FromNonPublicDefault<TabWithPrimaryKeyAsIdentity>());
			DependencyManager.AppDomainInstance.AddResolution<ITabWithPrimaryKeyAsDefault>("", ActivatorDependencyResolution.FromNonPublicDefault<TabWithPrimaryKeyAsDefault>());
			DependencyManager.AppDomainInstance.AddResolution<ITabWithPrimaryKeyWithDifferentIdentity>("", ActivatorDependencyResolution.FromNonPublicDefault<TabWithPrimaryKeyWithDifferentIdentity>());
			DependencyManager.AppDomainInstance.AddResolution<ITabWithNoPrimaryKeyWithIdentity>("", ActivatorDependencyResolution.FromNonPublicDefault<TabWithNoPrimaryKeyWithIdentity>());
			DependencyManager.AppDomainInstance.AddResolution<ITabWithPrimaryKeyNoIdentity>("", ActivatorDependencyResolution.FromNonPublicDefault<TabWithPrimaryKeyNoIdentity>());
			DependencyManager.AppDomainInstance.AddResolution<ITabNoPrimaryKeyNoIdentity>("", ActivatorDependencyResolution.FromNonPublicDefault<TabNoPrimaryKeyNoIdentity>());
			DependencyManager.AppDomainInstance.AddResolution<ITabWithCompositePrimaryKeyNoIdentity>("", ActivatorDependencyResolution.FromNonPublicDefault<TabWithCompositePrimaryKeyNoIdentity>());
		}

		public override bool Discard<TModel>(IUnitOfWork unitOfWork, TModel model)
		{
			Type modelType;

			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)model == null)
				throw new ArgumentNullException("model");

			modelType = typeof(TModel);

			if (false)
			{
				// do nothing
			}
			else if (modelType == typeof(IOrganization))
			{
				IOrganization _model = (IOrganization)(object)model;
				return this.LinqDiscard<IOrganization, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Application_Organization>(unitOfWork, _model, (t) => t.@OrganizationId == _model.@OrganizationId);
			}
			else if (modelType == typeof(IMember))
			{
				IMember _model = (IMember)(object)model;
				return this.LinqDiscard<IMember, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Application_Member>(unitOfWork, _model, (t) => t.@MemberId == _model.@MemberId);
			}
			else if (modelType == typeof(IEventLogExtent))
			{
				IEventLogExtent _model = (IEventLogExtent)(object)model;
				return this.LinqDiscard<IEventLogExtent, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent>(unitOfWork, _model, (t) => t.@MinCreationTimestamp == _model.@MinCreationTimestamp && t.@AvgDifferenceTimestamps == _model.@AvgDifferenceTimestamps && t.@MaxModificationTimestamp == _model.@MaxModificationTimestamp);
			}
			else if (modelType == typeof(IUser))
			{
				IUser _model = (IUser)(object)model;
				return this.LinqDiscard<IUser, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_User>(unitOfWork, _model, (t) => t.@UserId == _model.@UserId);
			}
			else if (modelType == typeof(ISecurityRole))
			{
				ISecurityRole _model = (ISecurityRole)(object)model;
				return this.LinqDiscard<ISecurityRole, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_SecurityRole>(unitOfWork, _model, (t) => t.@SecurityRoleId == _model.@SecurityRoleId);
			}
			else if (modelType == typeof(IPropertyBag))
			{
				IPropertyBag _model = (IPropertyBag)(object)model;
				return this.LinqDiscard<IPropertyBag, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_PropertyBag>(unitOfWork, _model, (t) => t.@PropertyBagId == _model.@PropertyBagId);
			}
			else if (modelType == typeof(IEventLog))
			{
				IEventLog _model = (IEventLog)(object)model;
				return this.LinqDiscard<IEventLog, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EventLog>(unitOfWork, _model, (t) => t.@EventLogId == _model.@EventLogId);
			}
			else if (modelType == typeof(IEmailMessage))
			{
				IEmailMessage _model = (IEmailMessage)(object)model;
				return this.LinqDiscard<IEmailMessage, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EmailMessage>(unitOfWork, _model, (t) => t.@EmailMessageId == _model.@EmailMessageId);
			}
			else if (modelType == typeof(IEmailAttachment))
			{
				IEmailAttachment _model = (IEmailAttachment)(object)model;
				return this.LinqDiscard<IEmailAttachment, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EmailAttachment>(unitOfWork, _model, (t) => t.@EmailMessageId == _model.@EmailMessageId);
			}
			else if (modelType == typeof(IOrganizationHistory))
			{
				IOrganizationHistory _model = (IOrganizationHistory)(object)model;
				return this.LinqDiscard<IOrganizationHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_OrganizationHistory>(unitOfWork, _model, (t) => t.@OrganizationHistoryId == _model.@OrganizationHistoryId);
			}
			else if (modelType == typeof(IMemberHistory))
			{
				IMemberHistory _model = (IMemberHistory)(object)model;
				return this.LinqDiscard<IMemberHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_MemberHistory>(unitOfWork, _model, (t) => t.@MemberHistoryId == _model.@MemberHistoryId);
			}
			else if (modelType == typeof(IUserHistory))
			{
				IUserHistory _model = (IUserHistory)(object)model;
				return this.LinqDiscard<IUserHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_UserHistory>(unitOfWork, _model, (t) => t.@UserHistoryId == _model.@UserHistoryId);
			}
			else if (modelType == typeof(ISecurityRoleHistory))
			{
				ISecurityRoleHistory _model = (ISecurityRoleHistory)(object)model;
				return this.LinqDiscard<ISecurityRoleHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_SecurityRoleHistory>(unitOfWork, _model, (t) => t.@SecurityRoleHistoryId == _model.@SecurityRoleHistoryId);
			}
			else if (modelType == typeof(IPropertyBagHistory))
			{
				IPropertyBagHistory _model = (IPropertyBagHistory)(object)model;
				return this.LinqDiscard<IPropertyBagHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_PropertyBagHistory>(unitOfWork, _model, (t) => t.@PropertyBagHistoryId == _model.@PropertyBagHistoryId);
			}
			else if (modelType == typeof(IEventLogHistory))
			{
				IEventLogHistory _model = (IEventLogHistory)(object)model;
				return this.LinqDiscard<IEventLogHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EventLogHistory>(unitOfWork, _model, (t) => t.@EventLogHistoryId == _model.@EventLogHistoryId);
			}
			else if (modelType == typeof(IEmailMessageHistory))
			{
				IEmailMessageHistory _model = (IEmailMessageHistory)(object)model;
				return this.LinqDiscard<IEmailMessageHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EmailMessageHistory>(unitOfWork, _model, (t) => t.@EmailMessageHistoryId == _model.@EmailMessageHistoryId);
			}
			else if (modelType == typeof(IEmailAttachmentHistory))
			{
				IEmailAttachmentHistory _model = (IEmailAttachmentHistory)(object)model;
				return this.LinqDiscard<IEmailAttachmentHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EmailAttachmentHistory>(unitOfWork, _model, (t) => t.@EmailAttachmentHistoryId == _model.@EmailAttachmentHistoryId);
			}
			else if (modelType == typeof(ITabWithPrimaryKeyAsIdentity))
			{
				ITabWithPrimaryKeyAsIdentity _model = (ITabWithPrimaryKeyAsIdentity)(object)model;
				return this.LinqDiscard<ITabWithPrimaryKeyAsIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_as_identity>(unitOfWork, _model, (t) => t.@Col_int_id_pk == _model.@ColIntIdPk);
			}
			else if (modelType == typeof(ITabWithPrimaryKeyAsDefault))
			{
				ITabWithPrimaryKeyAsDefault _model = (ITabWithPrimaryKeyAsDefault)(object)model;
				return this.LinqDiscard<ITabWithPrimaryKeyAsDefault, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_as_default>(unitOfWork, _model, (t) => t.@Col_uuid_df_pk == _model.@ColUuidDfPk);
			}
			else if (modelType == typeof(ITabWithPrimaryKeyWithDifferentIdentity))
			{
				ITabWithPrimaryKeyWithDifferentIdentity _model = (ITabWithPrimaryKeyWithDifferentIdentity)(object)model;
				return this.LinqDiscard<ITabWithPrimaryKeyWithDifferentIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_with_different_identity>(unitOfWork, _model, (t) => t.@Col_int_pk == _model.@ColIntPk);
			}
			else if (modelType == typeof(ITabWithNoPrimaryKeyWithIdentity))
			{
				ITabWithNoPrimaryKeyWithIdentity _model = (ITabWithNoPrimaryKeyWithIdentity)(object)model;
				return this.LinqDiscard<ITabWithNoPrimaryKeyWithIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_no_primary_key_with_identity>(unitOfWork, _model, (t) => t.@Col_int_id == _model.@ColIntId && t.@Col_bigint == _model.@ColBigint && t.@Col_binary.ToArray() == _model.@ColBinary && t.@Col_bit == _model.@ColBit && t.@Col_char == _model.@ColChar && t.@Col_date == _model.@ColDate && t.@Col_datetime == _model.@ColDatetime && t.@Col_datetime2 == _model.@ColDatetime2 && t.@Col_datetimeoffset == _model.@ColDatetimeoffset && t.@Col_decimal == _model.@ColDecimal && t.@Col_float == _model.@ColFloat && t.@Col_image.ToArray() == _model.@ColImage && t.@Col_int == _model.@ColInt && t.@Col_money == _model.@ColMoney && t.@Col_nchar == _model.@ColNchar && t.@Col_ntext == _model.@ColNtext && t.@Col_numeric == _model.@ColNumeric && t.@Col_nvarchar == _model.@ColNvarchar && t.@Col_real == _model.@ColReal && t.@Col_rowversion.ToArray() == _model.@ColRowversion && t.@Col_smalldatetime == _model.@ColSmalldatetime && t.@Col_smallint == _model.@ColSmallint && t.@Col_smallmoney == _model.@ColSmallmoney && t.@Col_sql_variant == _model.@ColSqlVariant && t.@Col_sysname == _model.@ColSysname && t.@Col_text == _model.@ColText && t.@Col_time == _model.@ColTime && t.@Col_tinyint == _model.@ColTinyint && t.@Col_uniqueidentifier == _model.@ColUniqueidentifier && t.@Col_varbinary.ToArray() == _model.@ColVarbinary && t.@Col_varchar == _model.@ColVarchar && t.@Col_xml == ToXElement(_model.@ColXml));
			}
			else if (modelType == typeof(ITabWithPrimaryKeyNoIdentity))
			{
				ITabWithPrimaryKeyNoIdentity _model = (ITabWithPrimaryKeyNoIdentity)(object)model;
				return this.LinqDiscard<ITabWithPrimaryKeyNoIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_no_identity>(unitOfWork, _model, (t) => t.@Col_int_pk == _model.@ColIntPk);
			}
			else if (modelType == typeof(ITabNoPrimaryKeyNoIdentity))
			{
				ITabNoPrimaryKeyNoIdentity _model = (ITabNoPrimaryKeyNoIdentity)(object)model;
				return this.LinqDiscard<ITabNoPrimaryKeyNoIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_no_primary_key_no_identity>(unitOfWork, _model, (t) => t.@Col_bigint == _model.@ColBigint && t.@Col_binary.ToArray() == _model.@ColBinary && t.@Col_bit == _model.@ColBit && t.@Col_char == _model.@ColChar && t.@Col_date == _model.@ColDate && t.@Col_datetime == _model.@ColDatetime && t.@Col_datetime2 == _model.@ColDatetime2 && t.@Col_datetimeoffset == _model.@ColDatetimeoffset && t.@Col_decimal == _model.@ColDecimal && t.@Col_float == _model.@ColFloat && t.@Col_image.ToArray() == _model.@ColImage && t.@Col_int == _model.@ColInt && t.@Col_money == _model.@ColMoney && t.@Col_nchar == _model.@ColNchar && t.@Col_ntext == _model.@ColNtext && t.@Col_numeric == _model.@ColNumeric && t.@Col_nvarchar == _model.@ColNvarchar && t.@Col_real == _model.@ColReal && t.@Col_rowversion.ToArray() == _model.@ColRowversion && t.@Col_smalldatetime == _model.@ColSmalldatetime && t.@Col_smallint == _model.@ColSmallint && t.@Col_smallmoney == _model.@ColSmallmoney && t.@Col_sql_variant == _model.@ColSqlVariant && t.@Col_sysname == _model.@ColSysname && t.@Col_text == _model.@ColText && t.@Col_time == _model.@ColTime && t.@Col_tinyint == _model.@ColTinyint && t.@Col_uniqueidentifier == _model.@ColUniqueidentifier && t.@Col_varbinary.ToArray() == _model.@ColVarbinary && t.@Col_varchar == _model.@ColVarchar && t.@Col_xml == ToXElement(_model.@ColXml));
			}
			else if (modelType == typeof(ITabWithCompositePrimaryKeyNoIdentity))
			{
				ITabWithCompositePrimaryKeyNoIdentity _model = (ITabWithCompositePrimaryKeyNoIdentity)(object)model;
				return this.LinqDiscard<ITabWithCompositePrimaryKeyNoIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_composite_primary_key_no_identity>(unitOfWork, _model, (t) => t.@Col_int_pk0 == _model.@ColIntPk0 && t.@Col_int_pk1 == _model.@ColIntPk1 && t.@Col_int_pk2 == _model.@ColIntPk2 && t.@Col_int_pk3 == _model.@ColIntPk3);
			}
			else
				throw new ArgumentOutOfRangeException(string.Format("The model type '{0}' was not recognized. Try re-generating the repository code from the templates using TextMetal.exe and try again.", modelType.FullName));
		}

		public override TResponseModel ExecuteImperative<TRequestModel, TResultModel, TResponseModel>(IUnitOfWork unitOfWork, TRequestModel requestModel)
		{
			throw new NotImplementedException();
		}

		public override bool Fill<TModel>(IUnitOfWork unitOfWork, TModel model)
		{
			Type modelType;

			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)model == null)
				throw new ArgumentNullException("model");

			modelType = typeof(TModel);

			if (false)
			{
				// do nothing
			}
			else if (modelType == typeof(IOrganization))
			{
				IOrganization _model = (IOrganization)(object)model;
				return this.LinqFill<IOrganization, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Application_Organization>(unitOfWork, _model, (t) => t.@OrganizationId == _model.@OrganizationId, (dm, st) => { dm.@OrganizationId = st.@OrganizationId; dm.@ParentOrganizationId = st.@ParentOrganizationId; dm.@OrganizationName = st.@OrganizationName; dm.@TimeZoneId = st.@TimeZoneId; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IMember))
			{
				IMember _model = (IMember)(object)model;
				return this.LinqFill<IMember, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Application_Member>(unitOfWork, _model, (t) => t.@MemberId == _model.@MemberId, (dm, st) => { dm.@MemberId = st.@MemberId; dm.@OrganizationId = st.@OrganizationId; dm.@ParentMemberId = st.@ParentMemberId; dm.@MemberName = st.@MemberName; dm.@MemberTitle = st.@MemberTitle; dm.@SecurityRoleId = st.@SecurityRoleId; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEventLogExtent))
			{
				IEventLogExtent _model = (IEventLogExtent)(object)model;
				return this.LinqFill<IEventLogExtent, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent>(unitOfWork, _model, (t) => t.@MinCreationTimestamp == _model.@MinCreationTimestamp && t.@AvgDifferenceTimestamps == _model.@AvgDifferenceTimestamps && t.@MaxModificationTimestamp == _model.@MaxModificationTimestamp, (dm, st) => { dm.@MinCreationTimestamp = st.@MinCreationTimestamp; dm.@AvgDifferenceTimestamps = st.@AvgDifferenceTimestamps; dm.@MaxModificationTimestamp = st.@MaxModificationTimestamp; });
			}
			else if (modelType == typeof(IUser))
			{
				IUser _model = (IUser)(object)model;
				return this.LinqFill<IUser, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_User>(unitOfWork, _model, (t) => t.@UserId == _model.@UserId, (dm, st) => { dm.@UserId = st.@UserId; dm.@EmailAddress = st.@EmailAddress; dm.@UserName = st.@UserName; dm.@SaltValue = st.@SaltValue; dm.@PasswordHash = st.@PasswordHash; dm.@Question = st.@Question; dm.@AnswerHash = st.@AnswerHash; dm.@LastLoginSuccessTimestamp = st.@LastLoginSuccessTimestamp; dm.@LastLoginFailureTimestamp = st.@LastLoginFailureTimestamp; dm.@FailedLoginCount = st.@FailedLoginCount; dm.@MustChangePassword = st.@MustChangePassword; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(ISecurityRole))
			{
				ISecurityRole _model = (ISecurityRole)(object)model;
				return this.LinqFill<ISecurityRole, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_SecurityRole>(unitOfWork, _model, (t) => t.@SecurityRoleId == _model.@SecurityRoleId, (dm, st) => { dm.@SecurityRoleId = st.@SecurityRoleId; dm.@SecurityRoleName = st.@SecurityRoleName; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IPropertyBag))
			{
				IPropertyBag _model = (IPropertyBag)(object)model;
				return this.LinqFill<IPropertyBag, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_PropertyBag>(unitOfWork, _model, (t) => t.@PropertyBagId == _model.@PropertyBagId, (dm, st) => { dm.@PropertyBagId = st.@PropertyBagId; dm.@PropertyKey = st.@PropertyKey; dm.@PropertyType = st.@PropertyType; dm.@PropertyValue = st.@PropertyValue; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEventLog))
			{
				IEventLog _model = (IEventLog)(object)model;
				return this.LinqFill<IEventLog, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EventLog>(unitOfWork, _model, (t) => t.@EventLogId == _model.@EventLogId, (dm, st) => { dm.@EventLogId = st.@EventLogId; dm.@EventText = st.@EventText; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEmailMessage))
			{
				IEmailMessage _model = (IEmailMessage)(object)model;
				return this.LinqFill<IEmailMessage, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EmailMessage>(unitOfWork, _model, (t) => t.@EmailMessageId == _model.@EmailMessageId, (dm, st) => { dm.@EmailMessageId = st.@EmailMessageId; dm.@From = st.@From; dm.@Sender = st.@Sender; dm.@ReplyTo = st.@ReplyTo; dm.@To = st.@To; dm.@CarbonCopy = st.@CarbonCopy; dm.@BlindCarbonCopy = st.@BlindCarbonCopy; dm.@Subject = st.@Subject; dm.@IsBodyHtml = st.@IsBodyHtml; dm.@Body = st.@Body; dm.@Processed = st.@Processed; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEmailAttachment))
			{
				IEmailAttachment _model = (IEmailAttachment)(object)model;
				return this.LinqFill<IEmailAttachment, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EmailAttachment>(unitOfWork, _model, (t) => t.@EmailMessageId == _model.@EmailMessageId, (dm, st) => { dm.@EmailAttachmentId = st.@EmailAttachmentId; dm.@EmailMessageId = st.@EmailMessageId; dm.@FileName = st.@FileName; dm.@FileSize = st.@FileSize; dm.@MimeType = st.@MimeType; dm.@AttachmentBits = (object)st.@AttachmentBits != null ? st.@AttachmentBits.ToArray() : null; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IOrganizationHistory))
			{
				IOrganizationHistory _model = (IOrganizationHistory)(object)model;
				return this.LinqFill<IOrganizationHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_OrganizationHistory>(unitOfWork, _model, (t) => t.@OrganizationHistoryId == _model.@OrganizationHistoryId, (dm, st) => { dm.@OrganizationHistoryId = st.@OrganizationHistoryId; dm.@OrganizationHistoryTs = st.@OrganizationHistoryTs; dm.@OrganizationId = st.@OrganizationId; dm.@ParentOrganizationId = st.@ParentOrganizationId; dm.@OrganizationName = st.@OrganizationName; dm.@TimeZoneId = st.@TimeZoneId; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IMemberHistory))
			{
				IMemberHistory _model = (IMemberHistory)(object)model;
				return this.LinqFill<IMemberHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_MemberHistory>(unitOfWork, _model, (t) => t.@MemberHistoryId == _model.@MemberHistoryId, (dm, st) => { dm.@MemberHistoryId = st.@MemberHistoryId; dm.@MemberHistoryTs = st.@MemberHistoryTs; dm.@MemberId = st.@MemberId; dm.@OrganizationId = st.@OrganizationId; dm.@ParentMemberId = st.@ParentMemberId; dm.@MemberName = st.@MemberName; dm.@MemberTitle = st.@MemberTitle; dm.@SecurityRoleId = st.@SecurityRoleId; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IUserHistory))
			{
				IUserHistory _model = (IUserHistory)(object)model;
				return this.LinqFill<IUserHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_UserHistory>(unitOfWork, _model, (t) => t.@UserHistoryId == _model.@UserHistoryId, (dm, st) => { dm.@UserHistoryId = st.@UserHistoryId; dm.@UserHistoryTs = st.@UserHistoryTs; dm.@UserId = st.@UserId; dm.@EmailAddress = st.@EmailAddress; dm.@UserName = st.@UserName; dm.@SaltValue = st.@SaltValue; dm.@PasswordHash = st.@PasswordHash; dm.@Question = st.@Question; dm.@AnswerHash = st.@AnswerHash; dm.@LastLoginSuccessTimestamp = st.@LastLoginSuccessTimestamp; dm.@LastLoginFailureTimestamp = st.@LastLoginFailureTimestamp; dm.@FailedLoginCount = st.@FailedLoginCount; dm.@MustChangePassword = st.@MustChangePassword; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(ISecurityRoleHistory))
			{
				ISecurityRoleHistory _model = (ISecurityRoleHistory)(object)model;
				return this.LinqFill<ISecurityRoleHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_SecurityRoleHistory>(unitOfWork, _model, (t) => t.@SecurityRoleHistoryId == _model.@SecurityRoleHistoryId, (dm, st) => { dm.@SecurityRoleHistoryId = st.@SecurityRoleHistoryId; dm.@SecurityRoleHistoryTs = st.@SecurityRoleHistoryTs; dm.@SecurityRoleId = st.@SecurityRoleId; dm.@SecurityRoleName = st.@SecurityRoleName; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IPropertyBagHistory))
			{
				IPropertyBagHistory _model = (IPropertyBagHistory)(object)model;
				return this.LinqFill<IPropertyBagHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_PropertyBagHistory>(unitOfWork, _model, (t) => t.@PropertyBagHistoryId == _model.@PropertyBagHistoryId, (dm, st) => { dm.@PropertyBagHistoryId = st.@PropertyBagHistoryId; dm.@PropertyBagHistoryTs = st.@PropertyBagHistoryTs; dm.@PropertyBagId = st.@PropertyBagId; dm.@PropertyKey = st.@PropertyKey; dm.@PropertyType = st.@PropertyType; dm.@PropertyValue = st.@PropertyValue; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEventLogHistory))
			{
				IEventLogHistory _model = (IEventLogHistory)(object)model;
				return this.LinqFill<IEventLogHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EventLogHistory>(unitOfWork, _model, (t) => t.@EventLogHistoryId == _model.@EventLogHistoryId, (dm, st) => { dm.@EventLogHistoryId = st.@EventLogHistoryId; dm.@EventLogHistoryTs = st.@EventLogHistoryTs; dm.@EventLogId = st.@EventLogId; dm.@EventText = st.@EventText; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEmailMessageHistory))
			{
				IEmailMessageHistory _model = (IEmailMessageHistory)(object)model;
				return this.LinqFill<IEmailMessageHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EmailMessageHistory>(unitOfWork, _model, (t) => t.@EmailMessageHistoryId == _model.@EmailMessageHistoryId, (dm, st) => { dm.@EmailMessageHistoryId = st.@EmailMessageHistoryId; dm.@EmailMessageHistoryTs = st.@EmailMessageHistoryTs; dm.@EmailMessageId = st.@EmailMessageId; dm.@From = st.@From; dm.@Sender = st.@Sender; dm.@ReplyTo = st.@ReplyTo; dm.@To = st.@To; dm.@CarbonCopy = st.@CarbonCopy; dm.@BlindCarbonCopy = st.@BlindCarbonCopy; dm.@Subject = st.@Subject; dm.@IsBodyHtml = st.@IsBodyHtml; dm.@Body = st.@Body; dm.@Processed = st.@Processed; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEmailAttachmentHistory))
			{
				IEmailAttachmentHistory _model = (IEmailAttachmentHistory)(object)model;
				return this.LinqFill<IEmailAttachmentHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EmailAttachmentHistory>(unitOfWork, _model, (t) => t.@EmailAttachmentHistoryId == _model.@EmailAttachmentHistoryId, (dm, st) => { dm.@EmailAttachmentHistoryId = st.@EmailAttachmentHistoryId; dm.@EmailAttachmentHistoryTs = st.@EmailAttachmentHistoryTs; dm.@EmailMessageId = st.@EmailMessageId; dm.@EmailAttachmentId = st.@EmailAttachmentId; dm.@FileName = st.@FileName; dm.@FileSize = st.@FileSize; dm.@MimeType = st.@MimeType; dm.@AttachmentBits = (object)st.@AttachmentBits != null ? st.@AttachmentBits.ToArray() : null; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(ITabWithPrimaryKeyAsIdentity))
			{
				ITabWithPrimaryKeyAsIdentity _model = (ITabWithPrimaryKeyAsIdentity)(object)model;
				return this.LinqFill<ITabWithPrimaryKeyAsIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_as_identity>(unitOfWork, _model, (t) => t.@Col_int_id_pk == _model.@ColIntIdPk, (dm, st) => { dm.@ColIntIdPk = st.@Col_int_id_pk; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithPrimaryKeyAsDefault))
			{
				ITabWithPrimaryKeyAsDefault _model = (ITabWithPrimaryKeyAsDefault)(object)model;
				return this.LinqFill<ITabWithPrimaryKeyAsDefault, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_as_default>(unitOfWork, _model, (t) => t.@Col_uuid_df_pk == _model.@ColUuidDfPk, (dm, st) => { dm.@ColUuidDfPk = st.@Col_uuid_df_pk; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithPrimaryKeyWithDifferentIdentity))
			{
				ITabWithPrimaryKeyWithDifferentIdentity _model = (ITabWithPrimaryKeyWithDifferentIdentity)(object)model;
				return this.LinqFill<ITabWithPrimaryKeyWithDifferentIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_with_different_identity>(unitOfWork, _model, (t) => t.@Col_int_pk == _model.@ColIntPk, (dm, st) => { dm.@ColIntPk = st.@Col_int_pk; dm.@ColIntId = st.@Col_int_id; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithNoPrimaryKeyWithIdentity))
			{
				ITabWithNoPrimaryKeyWithIdentity _model = (ITabWithNoPrimaryKeyWithIdentity)(object)model;
				return this.LinqFill<ITabWithNoPrimaryKeyWithIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_no_primary_key_with_identity>(unitOfWork, _model, (t) => t.@Col_int_id == _model.@ColIntId && t.@Col_bigint == _model.@ColBigint && t.@Col_binary.ToArray() == _model.@ColBinary && t.@Col_bit == _model.@ColBit && t.@Col_char == _model.@ColChar && t.@Col_date == _model.@ColDate && t.@Col_datetime == _model.@ColDatetime && t.@Col_datetime2 == _model.@ColDatetime2 && t.@Col_datetimeoffset == _model.@ColDatetimeoffset && t.@Col_decimal == _model.@ColDecimal && t.@Col_float == _model.@ColFloat && t.@Col_image.ToArray() == _model.@ColImage && t.@Col_int == _model.@ColInt && t.@Col_money == _model.@ColMoney && t.@Col_nchar == _model.@ColNchar && t.@Col_ntext == _model.@ColNtext && t.@Col_numeric == _model.@ColNumeric && t.@Col_nvarchar == _model.@ColNvarchar && t.@Col_real == _model.@ColReal && t.@Col_rowversion.ToArray() == _model.@ColRowversion && t.@Col_smalldatetime == _model.@ColSmalldatetime && t.@Col_smallint == _model.@ColSmallint && t.@Col_smallmoney == _model.@ColSmallmoney && t.@Col_sql_variant == _model.@ColSqlVariant && t.@Col_sysname == _model.@ColSysname && t.@Col_text == _model.@ColText && t.@Col_time == _model.@ColTime && t.@Col_tinyint == _model.@ColTinyint && t.@Col_uniqueidentifier == _model.@ColUniqueidentifier && t.@Col_varbinary.ToArray() == _model.@ColVarbinary && t.@Col_varchar == _model.@ColVarchar && t.@Col_xml == ToXElement(_model.@ColXml), (dm, st) => { dm.@ColIntId = st.@Col_int_id; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithPrimaryKeyNoIdentity))
			{
				ITabWithPrimaryKeyNoIdentity _model = (ITabWithPrimaryKeyNoIdentity)(object)model;
				return this.LinqFill<ITabWithPrimaryKeyNoIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_no_identity>(unitOfWork, _model, (t) => t.@Col_int_pk == _model.@ColIntPk, (dm, st) => { dm.@ColIntPk = st.@Col_int_pk; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabNoPrimaryKeyNoIdentity))
			{
				ITabNoPrimaryKeyNoIdentity _model = (ITabNoPrimaryKeyNoIdentity)(object)model;
				return this.LinqFill<ITabNoPrimaryKeyNoIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_no_primary_key_no_identity>(unitOfWork, _model, (t) => t.@Col_bigint == _model.@ColBigint && t.@Col_binary.ToArray() == _model.@ColBinary && t.@Col_bit == _model.@ColBit && t.@Col_char == _model.@ColChar && t.@Col_date == _model.@ColDate && t.@Col_datetime == _model.@ColDatetime && t.@Col_datetime2 == _model.@ColDatetime2 && t.@Col_datetimeoffset == _model.@ColDatetimeoffset && t.@Col_decimal == _model.@ColDecimal && t.@Col_float == _model.@ColFloat && t.@Col_image.ToArray() == _model.@ColImage && t.@Col_int == _model.@ColInt && t.@Col_money == _model.@ColMoney && t.@Col_nchar == _model.@ColNchar && t.@Col_ntext == _model.@ColNtext && t.@Col_numeric == _model.@ColNumeric && t.@Col_nvarchar == _model.@ColNvarchar && t.@Col_real == _model.@ColReal && t.@Col_rowversion.ToArray() == _model.@ColRowversion && t.@Col_smalldatetime == _model.@ColSmalldatetime && t.@Col_smallint == _model.@ColSmallint && t.@Col_smallmoney == _model.@ColSmallmoney && t.@Col_sql_variant == _model.@ColSqlVariant && t.@Col_sysname == _model.@ColSysname && t.@Col_text == _model.@ColText && t.@Col_time == _model.@ColTime && t.@Col_tinyint == _model.@ColTinyint && t.@Col_uniqueidentifier == _model.@ColUniqueidentifier && t.@Col_varbinary.ToArray() == _model.@ColVarbinary && t.@Col_varchar == _model.@ColVarchar && t.@Col_xml == ToXElement(_model.@ColXml), (dm, st) => { dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithCompositePrimaryKeyNoIdentity))
			{
				ITabWithCompositePrimaryKeyNoIdentity _model = (ITabWithCompositePrimaryKeyNoIdentity)(object)model;
				return this.LinqFill<ITabWithCompositePrimaryKeyNoIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_composite_primary_key_no_identity>(unitOfWork, _model, (t) => t.@Col_int_pk0 == _model.@ColIntPk0 && t.@Col_int_pk1 == _model.@ColIntPk1 && t.@Col_int_pk2 == _model.@ColIntPk2 && t.@Col_int_pk3 == _model.@ColIntPk3, (dm, st) => { dm.@ColIntPk0 = st.@Col_int_pk0; dm.@ColIntPk1 = st.@Col_int_pk1; dm.@ColIntPk2 = st.@Col_int_pk2; dm.@ColIntPk3 = st.@Col_int_pk3; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else
				throw new ArgumentOutOfRangeException(string.Format("The model type '{0}' was not recognized. Try re-generating the repository code from the templates using TextMetal.exe and try again.", modelType.FullName));
		}

		public override IEnumerable<TModel> Find<TModel>(IUnitOfWork unitOfWork, IModelQuery modelQuery)
		{
			Type modelType;
			object underlyingQuery;

			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)modelQuery == null)
				throw new ArgumentNullException("modelQuery");

			modelType = typeof(TModel);
			underlyingQuery = modelQuery.GetUnderlyingQuery();

			if ((object)underlyingQuery == null)
				throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an invalid underlying query."));

			if (false)
			{
				// do nothing
			}
			else if (modelType == typeof(IOrganization))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Application_Organization, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Application_Organization, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Application_Organization, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<IOrganization, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Application_Organization>(unitOfWork, _predicate, (dm, st) => { dm.@OrganizationId = st.@OrganizationId; dm.@ParentOrganizationId = st.@ParentOrganizationId; dm.@OrganizationName = st.@OrganizationName; dm.@TimeZoneId = st.@TimeZoneId; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IMember))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Application_Member, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Application_Member, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Application_Member, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<IMember, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Application_Member>(unitOfWork, _predicate, (dm, st) => { dm.@MemberId = st.@MemberId; dm.@OrganizationId = st.@OrganizationId; dm.@ParentMemberId = st.@ParentMemberId; dm.@MemberName = st.@MemberName; dm.@MemberTitle = st.@MemberTitle; dm.@SecurityRoleId = st.@SecurityRoleId; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEventLogExtent))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<IEventLogExtent, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent>(unitOfWork, _predicate, (dm, st) => { dm.@MinCreationTimestamp = st.@MinCreationTimestamp; dm.@AvgDifferenceTimestamps = st.@AvgDifferenceTimestamps; dm.@MaxModificationTimestamp = st.@MaxModificationTimestamp; });
			}
			else if (modelType == typeof(IUser))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_User, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_User, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_User, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<IUser, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_User>(unitOfWork, _predicate, (dm, st) => { dm.@UserId = st.@UserId; dm.@EmailAddress = st.@EmailAddress; dm.@UserName = st.@UserName; dm.@SaltValue = st.@SaltValue; dm.@PasswordHash = st.@PasswordHash; dm.@Question = st.@Question; dm.@AnswerHash = st.@AnswerHash; dm.@LastLoginSuccessTimestamp = st.@LastLoginSuccessTimestamp; dm.@LastLoginFailureTimestamp = st.@LastLoginFailureTimestamp; dm.@FailedLoginCount = st.@FailedLoginCount; dm.@MustChangePassword = st.@MustChangePassword; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(ISecurityRole))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_SecurityRole, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_SecurityRole, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_SecurityRole, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<ISecurityRole, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_SecurityRole>(unitOfWork, _predicate, (dm, st) => { dm.@SecurityRoleId = st.@SecurityRoleId; dm.@SecurityRoleName = st.@SecurityRoleName; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IPropertyBag))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_PropertyBag, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_PropertyBag, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_PropertyBag, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<IPropertyBag, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_PropertyBag>(unitOfWork, _predicate, (dm, st) => { dm.@PropertyBagId = st.@PropertyBagId; dm.@PropertyKey = st.@PropertyKey; dm.@PropertyType = st.@PropertyType; dm.@PropertyValue = st.@PropertyValue; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEventLog))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EventLog, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EventLog, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EventLog, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<IEventLog, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EventLog>(unitOfWork, _predicate, (dm, st) => { dm.@EventLogId = st.@EventLogId; dm.@EventText = st.@EventText; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEmailMessage))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EmailMessage, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EmailMessage, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EmailMessage, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<IEmailMessage, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EmailMessage>(unitOfWork, _predicate, (dm, st) => { dm.@EmailMessageId = st.@EmailMessageId; dm.@From = st.@From; dm.@Sender = st.@Sender; dm.@ReplyTo = st.@ReplyTo; dm.@To = st.@To; dm.@CarbonCopy = st.@CarbonCopy; dm.@BlindCarbonCopy = st.@BlindCarbonCopy; dm.@Subject = st.@Subject; dm.@IsBodyHtml = st.@IsBodyHtml; dm.@Body = st.@Body; dm.@Processed = st.@Processed; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEmailAttachment))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EmailAttachment, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EmailAttachment, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EmailAttachment, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<IEmailAttachment, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EmailAttachment>(unitOfWork, _predicate, (dm, st) => { dm.@EmailAttachmentId = st.@EmailAttachmentId; dm.@EmailMessageId = st.@EmailMessageId; dm.@FileName = st.@FileName; dm.@FileSize = st.@FileSize; dm.@MimeType = st.@MimeType; dm.@AttachmentBits = (object)st.@AttachmentBits != null ? st.@AttachmentBits.ToArray() : null; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IOrganizationHistory))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_OrganizationHistory, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_OrganizationHistory, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_OrganizationHistory, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<IOrganizationHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_OrganizationHistory>(unitOfWork, _predicate, (dm, st) => { dm.@OrganizationHistoryId = st.@OrganizationHistoryId; dm.@OrganizationHistoryTs = st.@OrganizationHistoryTs; dm.@OrganizationId = st.@OrganizationId; dm.@ParentOrganizationId = st.@ParentOrganizationId; dm.@OrganizationName = st.@OrganizationName; dm.@TimeZoneId = st.@TimeZoneId; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IMemberHistory))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_MemberHistory, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_MemberHistory, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_MemberHistory, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<IMemberHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_MemberHistory>(unitOfWork, _predicate, (dm, st) => { dm.@MemberHistoryId = st.@MemberHistoryId; dm.@MemberHistoryTs = st.@MemberHistoryTs; dm.@MemberId = st.@MemberId; dm.@OrganizationId = st.@OrganizationId; dm.@ParentMemberId = st.@ParentMemberId; dm.@MemberName = st.@MemberName; dm.@MemberTitle = st.@MemberTitle; dm.@SecurityRoleId = st.@SecurityRoleId; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IUserHistory))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_UserHistory, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_UserHistory, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_UserHistory, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<IUserHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_UserHistory>(unitOfWork, _predicate, (dm, st) => { dm.@UserHistoryId = st.@UserHistoryId; dm.@UserHistoryTs = st.@UserHistoryTs; dm.@UserId = st.@UserId; dm.@EmailAddress = st.@EmailAddress; dm.@UserName = st.@UserName; dm.@SaltValue = st.@SaltValue; dm.@PasswordHash = st.@PasswordHash; dm.@Question = st.@Question; dm.@AnswerHash = st.@AnswerHash; dm.@LastLoginSuccessTimestamp = st.@LastLoginSuccessTimestamp; dm.@LastLoginFailureTimestamp = st.@LastLoginFailureTimestamp; dm.@FailedLoginCount = st.@FailedLoginCount; dm.@MustChangePassword = st.@MustChangePassword; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(ISecurityRoleHistory))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_SecurityRoleHistory, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_SecurityRoleHistory, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_SecurityRoleHistory, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<ISecurityRoleHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_SecurityRoleHistory>(unitOfWork, _predicate, (dm, st) => { dm.@SecurityRoleHistoryId = st.@SecurityRoleHistoryId; dm.@SecurityRoleHistoryTs = st.@SecurityRoleHistoryTs; dm.@SecurityRoleId = st.@SecurityRoleId; dm.@SecurityRoleName = st.@SecurityRoleName; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IPropertyBagHistory))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_PropertyBagHistory, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_PropertyBagHistory, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_PropertyBagHistory, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<IPropertyBagHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_PropertyBagHistory>(unitOfWork, _predicate, (dm, st) => { dm.@PropertyBagHistoryId = st.@PropertyBagHistoryId; dm.@PropertyBagHistoryTs = st.@PropertyBagHistoryTs; dm.@PropertyBagId = st.@PropertyBagId; dm.@PropertyKey = st.@PropertyKey; dm.@PropertyType = st.@PropertyType; dm.@PropertyValue = st.@PropertyValue; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEventLogHistory))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EventLogHistory, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EventLogHistory, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EventLogHistory, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<IEventLogHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EventLogHistory>(unitOfWork, _predicate, (dm, st) => { dm.@EventLogHistoryId = st.@EventLogHistoryId; dm.@EventLogHistoryTs = st.@EventLogHistoryTs; dm.@EventLogId = st.@EventLogId; dm.@EventText = st.@EventText; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEmailMessageHistory))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EmailMessageHistory, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EmailMessageHistory, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EmailMessageHistory, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<IEmailMessageHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EmailMessageHistory>(unitOfWork, _predicate, (dm, st) => { dm.@EmailMessageHistoryId = st.@EmailMessageHistoryId; dm.@EmailMessageHistoryTs = st.@EmailMessageHistoryTs; dm.@EmailMessageId = st.@EmailMessageId; dm.@From = st.@From; dm.@Sender = st.@Sender; dm.@ReplyTo = st.@ReplyTo; dm.@To = st.@To; dm.@CarbonCopy = st.@CarbonCopy; dm.@BlindCarbonCopy = st.@BlindCarbonCopy; dm.@Subject = st.@Subject; dm.@IsBodyHtml = st.@IsBodyHtml; dm.@Body = st.@Body; dm.@Processed = st.@Processed; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEmailAttachmentHistory))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EmailAttachmentHistory, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EmailAttachmentHistory, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EmailAttachmentHistory, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<IEmailAttachmentHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EmailAttachmentHistory>(unitOfWork, _predicate, (dm, st) => { dm.@EmailAttachmentHistoryId = st.@EmailAttachmentHistoryId; dm.@EmailAttachmentHistoryTs = st.@EmailAttachmentHistoryTs; dm.@EmailMessageId = st.@EmailMessageId; dm.@EmailAttachmentId = st.@EmailAttachmentId; dm.@FileName = st.@FileName; dm.@FileSize = st.@FileSize; dm.@MimeType = st.@MimeType; dm.@AttachmentBits = (object)st.@AttachmentBits != null ? st.@AttachmentBits.ToArray() : null; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(ITabWithPrimaryKeyAsIdentity))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_as_identity, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_as_identity, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_as_identity, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<ITabWithPrimaryKeyAsIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_as_identity>(unitOfWork, _predicate, (dm, st) => { dm.@ColIntIdPk = st.@Col_int_id_pk; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithPrimaryKeyAsDefault))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_as_default, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_as_default, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_as_default, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<ITabWithPrimaryKeyAsDefault, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_as_default>(unitOfWork, _predicate, (dm, st) => { dm.@ColUuidDfPk = st.@Col_uuid_df_pk; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithPrimaryKeyWithDifferentIdentity))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_with_different_identity, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_with_different_identity, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_with_different_identity, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<ITabWithPrimaryKeyWithDifferentIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_with_different_identity>(unitOfWork, _predicate, (dm, st) => { dm.@ColIntPk = st.@Col_int_pk; dm.@ColIntId = st.@Col_int_id; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithNoPrimaryKeyWithIdentity))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_no_primary_key_with_identity, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_no_primary_key_with_identity, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_no_primary_key_with_identity, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<ITabWithNoPrimaryKeyWithIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_no_primary_key_with_identity>(unitOfWork, _predicate, (dm, st) => { dm.@ColIntId = st.@Col_int_id; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithPrimaryKeyNoIdentity))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_no_identity, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_no_identity, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_no_identity, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<ITabWithPrimaryKeyNoIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_no_identity>(unitOfWork, _predicate, (dm, st) => { dm.@ColIntPk = st.@Col_int_pk; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabNoPrimaryKeyNoIdentity))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_no_primary_key_no_identity, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_no_primary_key_no_identity, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_no_primary_key_no_identity, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<ITabNoPrimaryKeyNoIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_no_primary_key_no_identity>(unitOfWork, _predicate, (dm, st) => { dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithCompositePrimaryKeyNoIdentity))
			{
				Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_composite_primary_key_no_identity, bool>> _predicate = underlyingQuery as Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_composite_primary_key_no_identity, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an unsupported underlying query type; expected type is '{1}'; actual type was '{2}'.", modelQuery.GetType().FullName, typeof(Expression<Func<TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_composite_primary_key_no_identity, bool>>).FullName, underlyingQuery.GetType().FullName));

				return (IEnumerable<TModel>)this.LinqFind<ITabWithCompositePrimaryKeyNoIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_composite_primary_key_no_identity>(unitOfWork, _predicate, (dm, st) => { dm.@ColIntPk0 = st.@Col_int_pk0; dm.@ColIntPk1 = st.@Col_int_pk1; dm.@ColIntPk2 = st.@Col_int_pk2; dm.@ColIntPk3 = st.@Col_int_pk3; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else
				throw new ArgumentOutOfRangeException(string.Format("The model type '{0}' was not recognized. Try re-generating the repository code from the templates using TextMetal.exe and try again.", modelType.FullName));
		}

		public override TModel Load<TModel>(IUnitOfWork unitOfWork, TModel prototype)
		{
			Type modelType;

			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)prototype == null)
				throw new ArgumentNullException("prototype");

			modelType = typeof(TModel);

			if (false)
			{
				// do nothing
			}
			else if (modelType == typeof(IOrganization))
			{
				IOrganization _prototype = (IOrganization)(object)prototype;
				return (TModel)this.LinqLoad<IOrganization, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Application_Organization>(unitOfWork, (t) => t.@OrganizationId == _prototype.@OrganizationId, (dm, st) => { dm.@OrganizationId = st.@OrganizationId; dm.@ParentOrganizationId = st.@ParentOrganizationId; dm.@OrganizationName = st.@OrganizationName; dm.@TimeZoneId = st.@TimeZoneId; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IMember))
			{
				IMember _prototype = (IMember)(object)prototype;
				return (TModel)this.LinqLoad<IMember, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Application_Member>(unitOfWork, (t) => t.@MemberId == _prototype.@MemberId, (dm, st) => { dm.@MemberId = st.@MemberId; dm.@OrganizationId = st.@OrganizationId; dm.@ParentMemberId = st.@ParentMemberId; dm.@MemberName = st.@MemberName; dm.@MemberTitle = st.@MemberTitle; dm.@SecurityRoleId = st.@SecurityRoleId; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEventLogExtent))
			{
				IEventLogExtent _prototype = (IEventLogExtent)(object)prototype;
				return (TModel)this.LinqLoad<IEventLogExtent, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent>(unitOfWork, (t) => t.@MinCreationTimestamp == _prototype.@MinCreationTimestamp && t.@AvgDifferenceTimestamps == _prototype.@AvgDifferenceTimestamps && t.@MaxModificationTimestamp == _prototype.@MaxModificationTimestamp, (dm, st) => { dm.@MinCreationTimestamp = st.@MinCreationTimestamp; dm.@AvgDifferenceTimestamps = st.@AvgDifferenceTimestamps; dm.@MaxModificationTimestamp = st.@MaxModificationTimestamp; });
			}
			else if (modelType == typeof(IUser))
			{
				IUser _prototype = (IUser)(object)prototype;
				return (TModel)this.LinqLoad<IUser, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_User>(unitOfWork, (t) => t.@UserId == _prototype.@UserId, (dm, st) => { dm.@UserId = st.@UserId; dm.@EmailAddress = st.@EmailAddress; dm.@UserName = st.@UserName; dm.@SaltValue = st.@SaltValue; dm.@PasswordHash = st.@PasswordHash; dm.@Question = st.@Question; dm.@AnswerHash = st.@AnswerHash; dm.@LastLoginSuccessTimestamp = st.@LastLoginSuccessTimestamp; dm.@LastLoginFailureTimestamp = st.@LastLoginFailureTimestamp; dm.@FailedLoginCount = st.@FailedLoginCount; dm.@MustChangePassword = st.@MustChangePassword; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(ISecurityRole))
			{
				ISecurityRole _prototype = (ISecurityRole)(object)prototype;
				return (TModel)this.LinqLoad<ISecurityRole, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_SecurityRole>(unitOfWork, (t) => t.@SecurityRoleId == _prototype.@SecurityRoleId, (dm, st) => { dm.@SecurityRoleId = st.@SecurityRoleId; dm.@SecurityRoleName = st.@SecurityRoleName; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IPropertyBag))
			{
				IPropertyBag _prototype = (IPropertyBag)(object)prototype;
				return (TModel)this.LinqLoad<IPropertyBag, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_PropertyBag>(unitOfWork, (t) => t.@PropertyBagId == _prototype.@PropertyBagId, (dm, st) => { dm.@PropertyBagId = st.@PropertyBagId; dm.@PropertyKey = st.@PropertyKey; dm.@PropertyType = st.@PropertyType; dm.@PropertyValue = st.@PropertyValue; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEventLog))
			{
				IEventLog _prototype = (IEventLog)(object)prototype;
				return (TModel)this.LinqLoad<IEventLog, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EventLog>(unitOfWork, (t) => t.@EventLogId == _prototype.@EventLogId, (dm, st) => { dm.@EventLogId = st.@EventLogId; dm.@EventText = st.@EventText; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEmailMessage))
			{
				IEmailMessage _prototype = (IEmailMessage)(object)prototype;
				return (TModel)this.LinqLoad<IEmailMessage, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EmailMessage>(unitOfWork, (t) => t.@EmailMessageId == _prototype.@EmailMessageId, (dm, st) => { dm.@EmailMessageId = st.@EmailMessageId; dm.@From = st.@From; dm.@Sender = st.@Sender; dm.@ReplyTo = st.@ReplyTo; dm.@To = st.@To; dm.@CarbonCopy = st.@CarbonCopy; dm.@BlindCarbonCopy = st.@BlindCarbonCopy; dm.@Subject = st.@Subject; dm.@IsBodyHtml = st.@IsBodyHtml; dm.@Body = st.@Body; dm.@Processed = st.@Processed; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEmailAttachment))
			{
				IEmailAttachment _prototype = (IEmailAttachment)(object)prototype;
				return (TModel)this.LinqLoad<IEmailAttachment, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EmailAttachment>(unitOfWork, (t) => t.@EmailMessageId == _prototype.@EmailMessageId, (dm, st) => { dm.@EmailAttachmentId = st.@EmailAttachmentId; dm.@EmailMessageId = st.@EmailMessageId; dm.@FileName = st.@FileName; dm.@FileSize = st.@FileSize; dm.@MimeType = st.@MimeType; dm.@AttachmentBits = (object)st.@AttachmentBits != null ? st.@AttachmentBits.ToArray() : null; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IOrganizationHistory))
			{
				IOrganizationHistory _prototype = (IOrganizationHistory)(object)prototype;
				return (TModel)this.LinqLoad<IOrganizationHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_OrganizationHistory>(unitOfWork, (t) => t.@OrganizationHistoryId == _prototype.@OrganizationHistoryId, (dm, st) => { dm.@OrganizationHistoryId = st.@OrganizationHistoryId; dm.@OrganizationHistoryTs = st.@OrganizationHistoryTs; dm.@OrganizationId = st.@OrganizationId; dm.@ParentOrganizationId = st.@ParentOrganizationId; dm.@OrganizationName = st.@OrganizationName; dm.@TimeZoneId = st.@TimeZoneId; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IMemberHistory))
			{
				IMemberHistory _prototype = (IMemberHistory)(object)prototype;
				return (TModel)this.LinqLoad<IMemberHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_MemberHistory>(unitOfWork, (t) => t.@MemberHistoryId == _prototype.@MemberHistoryId, (dm, st) => { dm.@MemberHistoryId = st.@MemberHistoryId; dm.@MemberHistoryTs = st.@MemberHistoryTs; dm.@MemberId = st.@MemberId; dm.@OrganizationId = st.@OrganizationId; dm.@ParentMemberId = st.@ParentMemberId; dm.@MemberName = st.@MemberName; dm.@MemberTitle = st.@MemberTitle; dm.@SecurityRoleId = st.@SecurityRoleId; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IUserHistory))
			{
				IUserHistory _prototype = (IUserHistory)(object)prototype;
				return (TModel)this.LinqLoad<IUserHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_UserHistory>(unitOfWork, (t) => t.@UserHistoryId == _prototype.@UserHistoryId, (dm, st) => { dm.@UserHistoryId = st.@UserHistoryId; dm.@UserHistoryTs = st.@UserHistoryTs; dm.@UserId = st.@UserId; dm.@EmailAddress = st.@EmailAddress; dm.@UserName = st.@UserName; dm.@SaltValue = st.@SaltValue; dm.@PasswordHash = st.@PasswordHash; dm.@Question = st.@Question; dm.@AnswerHash = st.@AnswerHash; dm.@LastLoginSuccessTimestamp = st.@LastLoginSuccessTimestamp; dm.@LastLoginFailureTimestamp = st.@LastLoginFailureTimestamp; dm.@FailedLoginCount = st.@FailedLoginCount; dm.@MustChangePassword = st.@MustChangePassword; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(ISecurityRoleHistory))
			{
				ISecurityRoleHistory _prototype = (ISecurityRoleHistory)(object)prototype;
				return (TModel)this.LinqLoad<ISecurityRoleHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_SecurityRoleHistory>(unitOfWork, (t) => t.@SecurityRoleHistoryId == _prototype.@SecurityRoleHistoryId, (dm, st) => { dm.@SecurityRoleHistoryId = st.@SecurityRoleHistoryId; dm.@SecurityRoleHistoryTs = st.@SecurityRoleHistoryTs; dm.@SecurityRoleId = st.@SecurityRoleId; dm.@SecurityRoleName = st.@SecurityRoleName; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IPropertyBagHistory))
			{
				IPropertyBagHistory _prototype = (IPropertyBagHistory)(object)prototype;
				return (TModel)this.LinqLoad<IPropertyBagHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_PropertyBagHistory>(unitOfWork, (t) => t.@PropertyBagHistoryId == _prototype.@PropertyBagHistoryId, (dm, st) => { dm.@PropertyBagHistoryId = st.@PropertyBagHistoryId; dm.@PropertyBagHistoryTs = st.@PropertyBagHistoryTs; dm.@PropertyBagId = st.@PropertyBagId; dm.@PropertyKey = st.@PropertyKey; dm.@PropertyType = st.@PropertyType; dm.@PropertyValue = st.@PropertyValue; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEventLogHistory))
			{
				IEventLogHistory _prototype = (IEventLogHistory)(object)prototype;
				return (TModel)this.LinqLoad<IEventLogHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EventLogHistory>(unitOfWork, (t) => t.@EventLogHistoryId == _prototype.@EventLogHistoryId, (dm, st) => { dm.@EventLogHistoryId = st.@EventLogHistoryId; dm.@EventLogHistoryTs = st.@EventLogHistoryTs; dm.@EventLogId = st.@EventLogId; dm.@EventText = st.@EventText; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEmailMessageHistory))
			{
				IEmailMessageHistory _prototype = (IEmailMessageHistory)(object)prototype;
				return (TModel)this.LinqLoad<IEmailMessageHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EmailMessageHistory>(unitOfWork, (t) => t.@EmailMessageHistoryId == _prototype.@EmailMessageHistoryId, (dm, st) => { dm.@EmailMessageHistoryId = st.@EmailMessageHistoryId; dm.@EmailMessageHistoryTs = st.@EmailMessageHistoryTs; dm.@EmailMessageId = st.@EmailMessageId; dm.@From = st.@From; dm.@Sender = st.@Sender; dm.@ReplyTo = st.@ReplyTo; dm.@To = st.@To; dm.@CarbonCopy = st.@CarbonCopy; dm.@BlindCarbonCopy = st.@BlindCarbonCopy; dm.@Subject = st.@Subject; dm.@IsBodyHtml = st.@IsBodyHtml; dm.@Body = st.@Body; dm.@Processed = st.@Processed; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEmailAttachmentHistory))
			{
				IEmailAttachmentHistory _prototype = (IEmailAttachmentHistory)(object)prototype;
				return (TModel)this.LinqLoad<IEmailAttachmentHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EmailAttachmentHistory>(unitOfWork, (t) => t.@EmailAttachmentHistoryId == _prototype.@EmailAttachmentHistoryId, (dm, st) => { dm.@EmailAttachmentHistoryId = st.@EmailAttachmentHistoryId; dm.@EmailAttachmentHistoryTs = st.@EmailAttachmentHistoryTs; dm.@EmailMessageId = st.@EmailMessageId; dm.@EmailAttachmentId = st.@EmailAttachmentId; dm.@FileName = st.@FileName; dm.@FileSize = st.@FileSize; dm.@MimeType = st.@MimeType; dm.@AttachmentBits = (object)st.@AttachmentBits != null ? st.@AttachmentBits.ToArray() : null; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(ITabWithPrimaryKeyAsIdentity))
			{
				ITabWithPrimaryKeyAsIdentity _prototype = (ITabWithPrimaryKeyAsIdentity)(object)prototype;
				return (TModel)this.LinqLoad<ITabWithPrimaryKeyAsIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_as_identity>(unitOfWork, (t) => t.@Col_int_id_pk == _prototype.@ColIntIdPk, (dm, st) => { dm.@ColIntIdPk = st.@Col_int_id_pk; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithPrimaryKeyAsDefault))
			{
				ITabWithPrimaryKeyAsDefault _prototype = (ITabWithPrimaryKeyAsDefault)(object)prototype;
				return (TModel)this.LinqLoad<ITabWithPrimaryKeyAsDefault, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_as_default>(unitOfWork, (t) => t.@Col_uuid_df_pk == _prototype.@ColUuidDfPk, (dm, st) => { dm.@ColUuidDfPk = st.@Col_uuid_df_pk; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithPrimaryKeyWithDifferentIdentity))
			{
				ITabWithPrimaryKeyWithDifferentIdentity _prototype = (ITabWithPrimaryKeyWithDifferentIdentity)(object)prototype;
				return (TModel)this.LinqLoad<ITabWithPrimaryKeyWithDifferentIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_with_different_identity>(unitOfWork, (t) => t.@Col_int_pk == _prototype.@ColIntPk, (dm, st) => { dm.@ColIntPk = st.@Col_int_pk; dm.@ColIntId = st.@Col_int_id; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithNoPrimaryKeyWithIdentity))
			{
				ITabWithNoPrimaryKeyWithIdentity _prototype = (ITabWithNoPrimaryKeyWithIdentity)(object)prototype;
				return (TModel)this.LinqLoad<ITabWithNoPrimaryKeyWithIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_no_primary_key_with_identity>(unitOfWork, (t) => t.@Col_int_id == _prototype.@ColIntId && t.@Col_bigint == _prototype.@ColBigint && t.@Col_binary.ToArray() == _prototype.@ColBinary && t.@Col_bit == _prototype.@ColBit && t.@Col_char == _prototype.@ColChar && t.@Col_date == _prototype.@ColDate && t.@Col_datetime == _prototype.@ColDatetime && t.@Col_datetime2 == _prototype.@ColDatetime2 && t.@Col_datetimeoffset == _prototype.@ColDatetimeoffset && t.@Col_decimal == _prototype.@ColDecimal && t.@Col_float == _prototype.@ColFloat && t.@Col_image.ToArray() == _prototype.@ColImage && t.@Col_int == _prototype.@ColInt && t.@Col_money == _prototype.@ColMoney && t.@Col_nchar == _prototype.@ColNchar && t.@Col_ntext == _prototype.@ColNtext && t.@Col_numeric == _prototype.@ColNumeric && t.@Col_nvarchar == _prototype.@ColNvarchar && t.@Col_real == _prototype.@ColReal && t.@Col_rowversion.ToArray() == _prototype.@ColRowversion && t.@Col_smalldatetime == _prototype.@ColSmalldatetime && t.@Col_smallint == _prototype.@ColSmallint && t.@Col_smallmoney == _prototype.@ColSmallmoney && t.@Col_sql_variant == _prototype.@ColSqlVariant && t.@Col_sysname == _prototype.@ColSysname && t.@Col_text == _prototype.@ColText && t.@Col_time == _prototype.@ColTime && t.@Col_tinyint == _prototype.@ColTinyint && t.@Col_uniqueidentifier == _prototype.@ColUniqueidentifier && t.@Col_varbinary.ToArray() == _prototype.@ColVarbinary && t.@Col_varchar == _prototype.@ColVarchar && t.@Col_xml == ToXElement(_prototype.@ColXml), (dm, st) => { dm.@ColIntId = st.@Col_int_id; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithPrimaryKeyNoIdentity))
			{
				ITabWithPrimaryKeyNoIdentity _prototype = (ITabWithPrimaryKeyNoIdentity)(object)prototype;
				return (TModel)this.LinqLoad<ITabWithPrimaryKeyNoIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_no_identity>(unitOfWork, (t) => t.@Col_int_pk == _prototype.@ColIntPk, (dm, st) => { dm.@ColIntPk = st.@Col_int_pk; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabNoPrimaryKeyNoIdentity))
			{
				ITabNoPrimaryKeyNoIdentity _prototype = (ITabNoPrimaryKeyNoIdentity)(object)prototype;
				return (TModel)this.LinqLoad<ITabNoPrimaryKeyNoIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_no_primary_key_no_identity>(unitOfWork, (t) => t.@Col_bigint == _prototype.@ColBigint && t.@Col_binary.ToArray() == _prototype.@ColBinary && t.@Col_bit == _prototype.@ColBit && t.@Col_char == _prototype.@ColChar && t.@Col_date == _prototype.@ColDate && t.@Col_datetime == _prototype.@ColDatetime && t.@Col_datetime2 == _prototype.@ColDatetime2 && t.@Col_datetimeoffset == _prototype.@ColDatetimeoffset && t.@Col_decimal == _prototype.@ColDecimal && t.@Col_float == _prototype.@ColFloat && t.@Col_image.ToArray() == _prototype.@ColImage && t.@Col_int == _prototype.@ColInt && t.@Col_money == _prototype.@ColMoney && t.@Col_nchar == _prototype.@ColNchar && t.@Col_ntext == _prototype.@ColNtext && t.@Col_numeric == _prototype.@ColNumeric && t.@Col_nvarchar == _prototype.@ColNvarchar && t.@Col_real == _prototype.@ColReal && t.@Col_rowversion.ToArray() == _prototype.@ColRowversion && t.@Col_smalldatetime == _prototype.@ColSmalldatetime && t.@Col_smallint == _prototype.@ColSmallint && t.@Col_smallmoney == _prototype.@ColSmallmoney && t.@Col_sql_variant == _prototype.@ColSqlVariant && t.@Col_sysname == _prototype.@ColSysname && t.@Col_text == _prototype.@ColText && t.@Col_time == _prototype.@ColTime && t.@Col_tinyint == _prototype.@ColTinyint && t.@Col_uniqueidentifier == _prototype.@ColUniqueidentifier && t.@Col_varbinary.ToArray() == _prototype.@ColVarbinary && t.@Col_varchar == _prototype.@ColVarchar && t.@Col_xml == ToXElement(_prototype.@ColXml), (dm, st) => { dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithCompositePrimaryKeyNoIdentity))
			{
				ITabWithCompositePrimaryKeyNoIdentity _prototype = (ITabWithCompositePrimaryKeyNoIdentity)(object)prototype;
				return (TModel)this.LinqLoad<ITabWithCompositePrimaryKeyNoIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_composite_primary_key_no_identity>(unitOfWork, (t) => t.@Col_int_pk0 == _prototype.@ColIntPk0 && t.@Col_int_pk1 == _prototype.@ColIntPk1 && t.@Col_int_pk2 == _prototype.@ColIntPk2 && t.@Col_int_pk3 == _prototype.@ColIntPk3, (dm, st) => { dm.@ColIntPk0 = st.@Col_int_pk0; dm.@ColIntPk1 = st.@Col_int_pk1; dm.@ColIntPk2 = st.@Col_int_pk2; dm.@ColIntPk3 = st.@Col_int_pk3; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else
				throw new ArgumentOutOfRangeException(string.Format("The model type '{0}' was not recognized. Try re-generating the repository code from the templates using TextMetal.exe and try again.", modelType.FullName));
		}

		public override bool Save<TModel>(IUnitOfWork unitOfWork, TModel model)
		{
			Type modelType;

			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)model == null)
				throw new ArgumentNullException("model");

			modelType = typeof(TModel);

			if (false)
			{
				// do nothing
			}
			else if (modelType == typeof(IOrganization))
			{
				IOrganization _model = (IOrganization)(object)model;
				return this.LinqSave<IOrganization, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Application_Organization>(unitOfWork, _model, (t) => t.@OrganizationId == _model.@OrganizationId, (dt, sm) => { dt.@OrganizationId = sm.@OrganizationId; dt.@ParentOrganizationId = sm.@ParentOrganizationId; dt.@OrganizationName = sm.@OrganizationName; dt.@TimeZoneId = sm.@TimeZoneId; dt.@SortOrder = sm.@SortOrder; dt.@CreationTimestamp = sm.@CreationTimestamp; dt.@ModificationTimestamp = sm.@ModificationTimestamp; dt.@CreationUserId = sm.@CreationUserId; dt.@ModificationUserId = sm.@ModificationUserId; dt.@LogicalDelete = sm.@LogicalDelete; }, (dm, st) => { dm.@OrganizationId = st.@OrganizationId; dm.@ParentOrganizationId = st.@ParentOrganizationId; dm.@OrganizationName = st.@OrganizationName; dm.@TimeZoneId = st.@TimeZoneId; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IMember))
			{
				IMember _model = (IMember)(object)model;
				return this.LinqSave<IMember, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Application_Member>(unitOfWork, _model, (t) => t.@MemberId == _model.@MemberId, (dt, sm) => { dt.@MemberId = sm.@MemberId; dt.@OrganizationId = sm.@OrganizationId; dt.@ParentMemberId = sm.@ParentMemberId; dt.@MemberName = sm.@MemberName; dt.@MemberTitle = sm.@MemberTitle; dt.@SecurityRoleId = sm.@SecurityRoleId; dt.@SortOrder = sm.@SortOrder; dt.@CreationTimestamp = sm.@CreationTimestamp; dt.@ModificationTimestamp = sm.@ModificationTimestamp; dt.@CreationUserId = sm.@CreationUserId; dt.@ModificationUserId = sm.@ModificationUserId; dt.@LogicalDelete = sm.@LogicalDelete; }, (dm, st) => { dm.@MemberId = st.@MemberId; dm.@OrganizationId = st.@OrganizationId; dm.@ParentMemberId = st.@ParentMemberId; dm.@MemberName = st.@MemberName; dm.@MemberTitle = st.@MemberTitle; dm.@SecurityRoleId = st.@SecurityRoleId; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEventLogExtent))
			{
				IEventLogExtent _model = (IEventLogExtent)(object)model;
				return this.LinqSave<IEventLogExtent, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.EventLogExtent>(unitOfWork, _model, (t) => t.@MinCreationTimestamp == _model.@MinCreationTimestamp && t.@AvgDifferenceTimestamps == _model.@AvgDifferenceTimestamps && t.@MaxModificationTimestamp == _model.@MaxModificationTimestamp, (dt, sm) => { dt.@MinCreationTimestamp = sm.@MinCreationTimestamp; dt.@AvgDifferenceTimestamps = sm.@AvgDifferenceTimestamps; dt.@MaxModificationTimestamp = sm.@MaxModificationTimestamp; }, (dm, st) => { dm.@MinCreationTimestamp = st.@MinCreationTimestamp; dm.@AvgDifferenceTimestamps = st.@AvgDifferenceTimestamps; dm.@MaxModificationTimestamp = st.@MaxModificationTimestamp; });
			}
			else if (modelType == typeof(IUser))
			{
				IUser _model = (IUser)(object)model;
				return this.LinqSave<IUser, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_User>(unitOfWork, _model, (t) => t.@UserId == _model.@UserId, (dt, sm) => { dt.@UserId = sm.@UserId; dt.@EmailAddress = sm.@EmailAddress; dt.@UserName = sm.@UserName; dt.@SaltValue = sm.@SaltValue; dt.@PasswordHash = sm.@PasswordHash; dt.@Question = sm.@Question; dt.@AnswerHash = sm.@AnswerHash; dt.@LastLoginSuccessTimestamp = sm.@LastLoginSuccessTimestamp; dt.@LastLoginFailureTimestamp = sm.@LastLoginFailureTimestamp; dt.@FailedLoginCount = sm.@FailedLoginCount; dt.@MustChangePassword = sm.@MustChangePassword; dt.@SortOrder = sm.@SortOrder; dt.@CreationTimestamp = sm.@CreationTimestamp; dt.@ModificationTimestamp = sm.@ModificationTimestamp; dt.@CreationUserId = sm.@CreationUserId; dt.@ModificationUserId = sm.@ModificationUserId; dt.@LogicalDelete = sm.@LogicalDelete; }, (dm, st) => { dm.@UserId = st.@UserId; dm.@EmailAddress = st.@EmailAddress; dm.@UserName = st.@UserName; dm.@SaltValue = st.@SaltValue; dm.@PasswordHash = st.@PasswordHash; dm.@Question = st.@Question; dm.@AnswerHash = st.@AnswerHash; dm.@LastLoginSuccessTimestamp = st.@LastLoginSuccessTimestamp; dm.@LastLoginFailureTimestamp = st.@LastLoginFailureTimestamp; dm.@FailedLoginCount = st.@FailedLoginCount; dm.@MustChangePassword = st.@MustChangePassword; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(ISecurityRole))
			{
				ISecurityRole _model = (ISecurityRole)(object)model;
				return this.LinqSave<ISecurityRole, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_SecurityRole>(unitOfWork, _model, (t) => t.@SecurityRoleId == _model.@SecurityRoleId, (dt, sm) => { dt.@SecurityRoleId = sm.@SecurityRoleId; dt.@SecurityRoleName = sm.@SecurityRoleName; dt.@SortOrder = sm.@SortOrder; dt.@CreationTimestamp = sm.@CreationTimestamp; dt.@ModificationTimestamp = sm.@ModificationTimestamp; dt.@CreationUserId = sm.@CreationUserId; dt.@ModificationUserId = sm.@ModificationUserId; dt.@LogicalDelete = sm.@LogicalDelete; }, (dm, st) => { dm.@SecurityRoleId = st.@SecurityRoleId; dm.@SecurityRoleName = st.@SecurityRoleName; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IPropertyBag))
			{
				IPropertyBag _model = (IPropertyBag)(object)model;
				return this.LinqSave<IPropertyBag, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_PropertyBag>(unitOfWork, _model, (t) => t.@PropertyBagId == _model.@PropertyBagId, (dt, sm) => { dt.@PropertyBagId = sm.@PropertyBagId; dt.@PropertyKey = sm.@PropertyKey; dt.@PropertyType = sm.@PropertyType; dt.@PropertyValue = sm.@PropertyValue; dt.@SortOrder = sm.@SortOrder; dt.@CreationTimestamp = sm.@CreationTimestamp; dt.@ModificationTimestamp = sm.@ModificationTimestamp; dt.@CreationUserId = sm.@CreationUserId; dt.@ModificationUserId = sm.@ModificationUserId; dt.@LogicalDelete = sm.@LogicalDelete; }, (dm, st) => { dm.@PropertyBagId = st.@PropertyBagId; dm.@PropertyKey = st.@PropertyKey; dm.@PropertyType = st.@PropertyType; dm.@PropertyValue = st.@PropertyValue; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEventLog))
			{
				IEventLog _model = (IEventLog)(object)model;
				return this.LinqSave<IEventLog, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EventLog>(unitOfWork, _model, (t) => t.@EventLogId == _model.@EventLogId, (dt, sm) => { dt.@EventLogId = sm.@EventLogId; dt.@EventText = sm.@EventText; dt.@SortOrder = sm.@SortOrder; dt.@CreationTimestamp = sm.@CreationTimestamp; dt.@ModificationTimestamp = sm.@ModificationTimestamp; dt.@CreationUserId = sm.@CreationUserId; dt.@ModificationUserId = sm.@ModificationUserId; dt.@LogicalDelete = sm.@LogicalDelete; }, (dm, st) => { dm.@EventLogId = st.@EventLogId; dm.@EventText = st.@EventText; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEmailMessage))
			{
				IEmailMessage _model = (IEmailMessage)(object)model;
				return this.LinqSave<IEmailMessage, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EmailMessage>(unitOfWork, _model, (t) => t.@EmailMessageId == _model.@EmailMessageId, (dt, sm) => { dt.@EmailMessageId = sm.@EmailMessageId; dt.@From = sm.@From; dt.@Sender = sm.@Sender; dt.@ReplyTo = sm.@ReplyTo; dt.@To = sm.@To; dt.@CarbonCopy = sm.@CarbonCopy; dt.@BlindCarbonCopy = sm.@BlindCarbonCopy; dt.@Subject = sm.@Subject; dt.@IsBodyHtml = sm.@IsBodyHtml; dt.@Body = sm.@Body; dt.@Processed = sm.@Processed; dt.@SortOrder = sm.@SortOrder; dt.@CreationTimestamp = sm.@CreationTimestamp; dt.@ModificationTimestamp = sm.@ModificationTimestamp; dt.@CreationUserId = sm.@CreationUserId; dt.@ModificationUserId = sm.@ModificationUserId; dt.@LogicalDelete = sm.@LogicalDelete; }, (dm, st) => { dm.@EmailMessageId = st.@EmailMessageId; dm.@From = st.@From; dm.@Sender = st.@Sender; dm.@ReplyTo = st.@ReplyTo; dm.@To = st.@To; dm.@CarbonCopy = st.@CarbonCopy; dm.@BlindCarbonCopy = st.@BlindCarbonCopy; dm.@Subject = st.@Subject; dm.@IsBodyHtml = st.@IsBodyHtml; dm.@Body = st.@Body; dm.@Processed = st.@Processed; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEmailAttachment))
			{
				IEmailAttachment _model = (IEmailAttachment)(object)model;
				return this.LinqSave<IEmailAttachment, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Global_EmailAttachment>(unitOfWork, _model, (t) => t.@EmailMessageId == _model.@EmailMessageId, (dt, sm) => { dt.@EmailAttachmentId = sm.@EmailAttachmentId; dt.@EmailMessageId = sm.@EmailMessageId; dt.@FileName = sm.@FileName; dt.@FileSize = sm.@FileSize; dt.@MimeType = sm.@MimeType; if ((object)sm.@AttachmentBits != null) dt.@AttachmentBits = sm.@AttachmentBits; dt.@SortOrder = sm.@SortOrder; dt.@CreationTimestamp = sm.@CreationTimestamp; dt.@ModificationTimestamp = sm.@ModificationTimestamp; dt.@CreationUserId = sm.@CreationUserId; dt.@ModificationUserId = sm.@ModificationUserId; dt.@LogicalDelete = sm.@LogicalDelete; }, (dm, st) => { dm.@EmailAttachmentId = st.@EmailAttachmentId; dm.@EmailMessageId = st.@EmailMessageId; dm.@FileName = st.@FileName; dm.@FileSize = st.@FileSize; dm.@MimeType = st.@MimeType; dm.@AttachmentBits = (object)st.@AttachmentBits != null ? st.@AttachmentBits.ToArray() : null; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IOrganizationHistory))
			{
				IOrganizationHistory _model = (IOrganizationHistory)(object)model;
				return this.LinqSave<IOrganizationHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_OrganizationHistory>(unitOfWork, _model, (t) => t.@OrganizationHistoryId == _model.@OrganizationHistoryId, (dt, sm) => { dt.@OrganizationHistoryId = sm.@OrganizationHistoryId; dt.@OrganizationHistoryTs = sm.@OrganizationHistoryTs; dt.@OrganizationId = sm.@OrganizationId; dt.@ParentOrganizationId = sm.@ParentOrganizationId; dt.@OrganizationName = sm.@OrganizationName; dt.@TimeZoneId = sm.@TimeZoneId; dt.@SortOrder = sm.@SortOrder; dt.@CreationTimestamp = sm.@CreationTimestamp; dt.@ModificationTimestamp = sm.@ModificationTimestamp; dt.@CreationUserId = sm.@CreationUserId; dt.@ModificationUserId = sm.@ModificationUserId; dt.@LogicalDelete = sm.@LogicalDelete; }, (dm, st) => { dm.@OrganizationHistoryId = st.@OrganizationHistoryId; dm.@OrganizationHistoryTs = st.@OrganizationHistoryTs; dm.@OrganizationId = st.@OrganizationId; dm.@ParentOrganizationId = st.@ParentOrganizationId; dm.@OrganizationName = st.@OrganizationName; dm.@TimeZoneId = st.@TimeZoneId; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IMemberHistory))
			{
				IMemberHistory _model = (IMemberHistory)(object)model;
				return this.LinqSave<IMemberHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_MemberHistory>(unitOfWork, _model, (t) => t.@MemberHistoryId == _model.@MemberHistoryId, (dt, sm) => { dt.@MemberHistoryId = sm.@MemberHistoryId; dt.@MemberHistoryTs = sm.@MemberHistoryTs; dt.@MemberId = sm.@MemberId; dt.@OrganizationId = sm.@OrganizationId; dt.@ParentMemberId = sm.@ParentMemberId; dt.@MemberName = sm.@MemberName; dt.@MemberTitle = sm.@MemberTitle; dt.@SecurityRoleId = sm.@SecurityRoleId; dt.@SortOrder = sm.@SortOrder; dt.@CreationTimestamp = sm.@CreationTimestamp; dt.@ModificationTimestamp = sm.@ModificationTimestamp; dt.@CreationUserId = sm.@CreationUserId; dt.@ModificationUserId = sm.@ModificationUserId; dt.@LogicalDelete = sm.@LogicalDelete; }, (dm, st) => { dm.@MemberHistoryId = st.@MemberHistoryId; dm.@MemberHistoryTs = st.@MemberHistoryTs; dm.@MemberId = st.@MemberId; dm.@OrganizationId = st.@OrganizationId; dm.@ParentMemberId = st.@ParentMemberId; dm.@MemberName = st.@MemberName; dm.@MemberTitle = st.@MemberTitle; dm.@SecurityRoleId = st.@SecurityRoleId; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IUserHistory))
			{
				IUserHistory _model = (IUserHistory)(object)model;
				return this.LinqSave<IUserHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_UserHistory>(unitOfWork, _model, (t) => t.@UserHistoryId == _model.@UserHistoryId, (dt, sm) => { dt.@UserHistoryId = sm.@UserHistoryId; dt.@UserHistoryTs = sm.@UserHistoryTs; dt.@UserId = sm.@UserId; dt.@EmailAddress = sm.@EmailAddress; dt.@UserName = sm.@UserName; dt.@SaltValue = sm.@SaltValue; dt.@PasswordHash = sm.@PasswordHash; dt.@Question = sm.@Question; dt.@AnswerHash = sm.@AnswerHash; dt.@LastLoginSuccessTimestamp = sm.@LastLoginSuccessTimestamp; dt.@LastLoginFailureTimestamp = sm.@LastLoginFailureTimestamp; dt.@FailedLoginCount = sm.@FailedLoginCount; dt.@MustChangePassword = sm.@MustChangePassword; dt.@SortOrder = sm.@SortOrder; dt.@CreationTimestamp = sm.@CreationTimestamp; dt.@ModificationTimestamp = sm.@ModificationTimestamp; dt.@CreationUserId = sm.@CreationUserId; dt.@ModificationUserId = sm.@ModificationUserId; dt.@LogicalDelete = sm.@LogicalDelete; }, (dm, st) => { dm.@UserHistoryId = st.@UserHistoryId; dm.@UserHistoryTs = st.@UserHistoryTs; dm.@UserId = st.@UserId; dm.@EmailAddress = st.@EmailAddress; dm.@UserName = st.@UserName; dm.@SaltValue = st.@SaltValue; dm.@PasswordHash = st.@PasswordHash; dm.@Question = st.@Question; dm.@AnswerHash = st.@AnswerHash; dm.@LastLoginSuccessTimestamp = st.@LastLoginSuccessTimestamp; dm.@LastLoginFailureTimestamp = st.@LastLoginFailureTimestamp; dm.@FailedLoginCount = st.@FailedLoginCount; dm.@MustChangePassword = st.@MustChangePassword; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(ISecurityRoleHistory))
			{
				ISecurityRoleHistory _model = (ISecurityRoleHistory)(object)model;
				return this.LinqSave<ISecurityRoleHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_SecurityRoleHistory>(unitOfWork, _model, (t) => t.@SecurityRoleHistoryId == _model.@SecurityRoleHistoryId, (dt, sm) => { dt.@SecurityRoleHistoryId = sm.@SecurityRoleHistoryId; dt.@SecurityRoleHistoryTs = sm.@SecurityRoleHistoryTs; dt.@SecurityRoleId = sm.@SecurityRoleId; dt.@SecurityRoleName = sm.@SecurityRoleName; dt.@SortOrder = sm.@SortOrder; dt.@CreationTimestamp = sm.@CreationTimestamp; dt.@ModificationTimestamp = sm.@ModificationTimestamp; dt.@CreationUserId = sm.@CreationUserId; dt.@ModificationUserId = sm.@ModificationUserId; dt.@LogicalDelete = sm.@LogicalDelete; }, (dm, st) => { dm.@SecurityRoleHistoryId = st.@SecurityRoleHistoryId; dm.@SecurityRoleHistoryTs = st.@SecurityRoleHistoryTs; dm.@SecurityRoleId = st.@SecurityRoleId; dm.@SecurityRoleName = st.@SecurityRoleName; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IPropertyBagHistory))
			{
				IPropertyBagHistory _model = (IPropertyBagHistory)(object)model;
				return this.LinqSave<IPropertyBagHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_PropertyBagHistory>(unitOfWork, _model, (t) => t.@PropertyBagHistoryId == _model.@PropertyBagHistoryId, (dt, sm) => { dt.@PropertyBagHistoryId = sm.@PropertyBagHistoryId; dt.@PropertyBagHistoryTs = sm.@PropertyBagHistoryTs; dt.@PropertyBagId = sm.@PropertyBagId; dt.@PropertyKey = sm.@PropertyKey; dt.@PropertyType = sm.@PropertyType; dt.@PropertyValue = sm.@PropertyValue; dt.@SortOrder = sm.@SortOrder; dt.@CreationTimestamp = sm.@CreationTimestamp; dt.@ModificationTimestamp = sm.@ModificationTimestamp; dt.@CreationUserId = sm.@CreationUserId; dt.@ModificationUserId = sm.@ModificationUserId; dt.@LogicalDelete = sm.@LogicalDelete; }, (dm, st) => { dm.@PropertyBagHistoryId = st.@PropertyBagHistoryId; dm.@PropertyBagHistoryTs = st.@PropertyBagHistoryTs; dm.@PropertyBagId = st.@PropertyBagId; dm.@PropertyKey = st.@PropertyKey; dm.@PropertyType = st.@PropertyType; dm.@PropertyValue = st.@PropertyValue; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEventLogHistory))
			{
				IEventLogHistory _model = (IEventLogHistory)(object)model;
				return this.LinqSave<IEventLogHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EventLogHistory>(unitOfWork, _model, (t) => t.@EventLogHistoryId == _model.@EventLogHistoryId, (dt, sm) => { dt.@EventLogHistoryId = sm.@EventLogHistoryId; dt.@EventLogHistoryTs = sm.@EventLogHistoryTs; dt.@EventLogId = sm.@EventLogId; dt.@EventText = sm.@EventText; dt.@SortOrder = sm.@SortOrder; dt.@CreationTimestamp = sm.@CreationTimestamp; dt.@ModificationTimestamp = sm.@ModificationTimestamp; dt.@CreationUserId = sm.@CreationUserId; dt.@ModificationUserId = sm.@ModificationUserId; dt.@LogicalDelete = sm.@LogicalDelete; }, (dm, st) => { dm.@EventLogHistoryId = st.@EventLogHistoryId; dm.@EventLogHistoryTs = st.@EventLogHistoryTs; dm.@EventLogId = st.@EventLogId; dm.@EventText = st.@EventText; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEmailMessageHistory))
			{
				IEmailMessageHistory _model = (IEmailMessageHistory)(object)model;
				return this.LinqSave<IEmailMessageHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EmailMessageHistory>(unitOfWork, _model, (t) => t.@EmailMessageHistoryId == _model.@EmailMessageHistoryId, (dt, sm) => { dt.@EmailMessageHistoryId = sm.@EmailMessageHistoryId; dt.@EmailMessageHistoryTs = sm.@EmailMessageHistoryTs; dt.@EmailMessageId = sm.@EmailMessageId; dt.@From = sm.@From; dt.@Sender = sm.@Sender; dt.@ReplyTo = sm.@ReplyTo; dt.@To = sm.@To; dt.@CarbonCopy = sm.@CarbonCopy; dt.@BlindCarbonCopy = sm.@BlindCarbonCopy; dt.@Subject = sm.@Subject; dt.@IsBodyHtml = sm.@IsBodyHtml; dt.@Body = sm.@Body; dt.@Processed = sm.@Processed; dt.@SortOrder = sm.@SortOrder; dt.@CreationTimestamp = sm.@CreationTimestamp; dt.@ModificationTimestamp = sm.@ModificationTimestamp; dt.@CreationUserId = sm.@CreationUserId; dt.@ModificationUserId = sm.@ModificationUserId; dt.@LogicalDelete = sm.@LogicalDelete; }, (dm, st) => { dm.@EmailMessageHistoryId = st.@EmailMessageHistoryId; dm.@EmailMessageHistoryTs = st.@EmailMessageHistoryTs; dm.@EmailMessageId = st.@EmailMessageId; dm.@From = st.@From; dm.@Sender = st.@Sender; dm.@ReplyTo = st.@ReplyTo; dm.@To = st.@To; dm.@CarbonCopy = st.@CarbonCopy; dm.@BlindCarbonCopy = st.@BlindCarbonCopy; dm.@Subject = st.@Subject; dm.@IsBodyHtml = st.@IsBodyHtml; dm.@Body = st.@Body; dm.@Processed = st.@Processed; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(IEmailAttachmentHistory))
			{
				IEmailAttachmentHistory _model = (IEmailAttachmentHistory)(object)model;
				return this.LinqSave<IEmailAttachmentHistory, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.History_EmailAttachmentHistory>(unitOfWork, _model, (t) => t.@EmailAttachmentHistoryId == _model.@EmailAttachmentHistoryId, (dt, sm) => { dt.@EmailAttachmentHistoryId = sm.@EmailAttachmentHistoryId; dt.@EmailAttachmentHistoryTs = sm.@EmailAttachmentHistoryTs; dt.@EmailMessageId = sm.@EmailMessageId; dt.@EmailAttachmentId = sm.@EmailAttachmentId; dt.@FileName = sm.@FileName; dt.@FileSize = sm.@FileSize; dt.@MimeType = sm.@MimeType; if ((object)sm.@AttachmentBits != null) dt.@AttachmentBits = sm.@AttachmentBits; dt.@SortOrder = sm.@SortOrder; dt.@CreationTimestamp = sm.@CreationTimestamp; dt.@ModificationTimestamp = sm.@ModificationTimestamp; dt.@CreationUserId = sm.@CreationUserId; dt.@ModificationUserId = sm.@ModificationUserId; dt.@LogicalDelete = sm.@LogicalDelete; }, (dm, st) => { dm.@EmailAttachmentHistoryId = st.@EmailAttachmentHistoryId; dm.@EmailAttachmentHistoryTs = st.@EmailAttachmentHistoryTs; dm.@EmailMessageId = st.@EmailMessageId; dm.@EmailAttachmentId = st.@EmailAttachmentId; dm.@FileName = st.@FileName; dm.@FileSize = st.@FileSize; dm.@MimeType = st.@MimeType; dm.@AttachmentBits = (object)st.@AttachmentBits != null ? st.@AttachmentBits.ToArray() : null; dm.@SortOrder = st.@SortOrder; dm.@CreationTimestamp = st.@CreationTimestamp; dm.@ModificationTimestamp = st.@ModificationTimestamp; dm.@CreationUserId = st.@CreationUserId; dm.@ModificationUserId = st.@ModificationUserId; dm.@LogicalDelete = st.@LogicalDelete; });
			}
			else if (modelType == typeof(ITabWithPrimaryKeyAsIdentity))
			{
				ITabWithPrimaryKeyAsIdentity _model = (ITabWithPrimaryKeyAsIdentity)(object)model;
				return this.LinqSave<ITabWithPrimaryKeyAsIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_as_identity>(unitOfWork, _model, (t) => t.@Col_int_id_pk == _model.@ColIntIdPk, (dt, sm) => { dt.@Col_int_id_pk = sm.@ColIntIdPk; dt.@Col_bigint = sm.@ColBigint; if ((object)sm.@ColBinary != null) dt.@Col_binary = sm.@ColBinary; dt.@Col_bit = sm.@ColBit; dt.@Col_char = sm.@ColChar; dt.@Col_date = sm.@ColDate; dt.@Col_datetime = sm.@ColDatetime; dt.@Col_datetime2 = sm.@ColDatetime2; dt.@Col_datetimeoffset = sm.@ColDatetimeoffset; dt.@Col_decimal = sm.@ColDecimal; dt.@Col_float = sm.@ColFloat; if ((object)sm.@ColImage != null) dt.@Col_image = sm.@ColImage; dt.@Col_int = sm.@ColInt; dt.@Col_money = sm.@ColMoney; dt.@Col_nchar = sm.@ColNchar; dt.@Col_ntext = sm.@ColNtext; dt.@Col_numeric = sm.@ColNumeric; dt.@Col_nvarchar = sm.@ColNvarchar; dt.@Col_real = sm.@ColReal; if ((object)sm.@ColRowversion != null) dt.@Col_rowversion = sm.@ColRowversion; dt.@Col_smalldatetime = sm.@ColSmalldatetime; dt.@Col_smallint = sm.@ColSmallint; dt.@Col_smallmoney = sm.@ColSmallmoney; dt.@Col_sql_variant = sm.@ColSqlVariant; dt.@Col_sysname = sm.@ColSysname; dt.@Col_text = sm.@ColText; dt.@Col_time = sm.@ColTime; dt.@Col_tinyint = sm.@ColTinyint; dt.@Col_uniqueidentifier = sm.@ColUniqueidentifier; if ((object)sm.@ColVarbinary != null) dt.@Col_varbinary = sm.@ColVarbinary; dt.@Col_varchar = sm.@ColVarchar; if ((object)sm.@ColXml != null) dt.@Col_xml = ToXElement(sm.@ColXml); }, (dm, st) => { dm.@ColIntIdPk = st.@Col_int_id_pk; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithPrimaryKeyAsDefault))
			{
				ITabWithPrimaryKeyAsDefault _model = (ITabWithPrimaryKeyAsDefault)(object)model;
				return this.LinqSave<ITabWithPrimaryKeyAsDefault, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_as_default>(unitOfWork, _model, (t) => t.@Col_uuid_df_pk == _model.@ColUuidDfPk, (dt, sm) => { dt.@Col_uuid_df_pk = sm.@ColUuidDfPk; dt.@Col_bigint = sm.@ColBigint; if ((object)sm.@ColBinary != null) dt.@Col_binary = sm.@ColBinary; dt.@Col_bit = sm.@ColBit; dt.@Col_char = sm.@ColChar; dt.@Col_date = sm.@ColDate; dt.@Col_datetime = sm.@ColDatetime; dt.@Col_datetime2 = sm.@ColDatetime2; dt.@Col_datetimeoffset = sm.@ColDatetimeoffset; dt.@Col_decimal = sm.@ColDecimal; dt.@Col_float = sm.@ColFloat; if ((object)sm.@ColImage != null) dt.@Col_image = sm.@ColImage; dt.@Col_int = sm.@ColInt; dt.@Col_money = sm.@ColMoney; dt.@Col_nchar = sm.@ColNchar; dt.@Col_ntext = sm.@ColNtext; dt.@Col_numeric = sm.@ColNumeric; dt.@Col_nvarchar = sm.@ColNvarchar; dt.@Col_real = sm.@ColReal; if ((object)sm.@ColRowversion != null) dt.@Col_rowversion = sm.@ColRowversion; dt.@Col_smalldatetime = sm.@ColSmalldatetime; dt.@Col_smallint = sm.@ColSmallint; dt.@Col_smallmoney = sm.@ColSmallmoney; dt.@Col_sql_variant = sm.@ColSqlVariant; dt.@Col_sysname = sm.@ColSysname; dt.@Col_text = sm.@ColText; dt.@Col_time = sm.@ColTime; dt.@Col_tinyint = sm.@ColTinyint; dt.@Col_uniqueidentifier = sm.@ColUniqueidentifier; if ((object)sm.@ColVarbinary != null) dt.@Col_varbinary = sm.@ColVarbinary; dt.@Col_varchar = sm.@ColVarchar; if ((object)sm.@ColXml != null) dt.@Col_xml = ToXElement(sm.@ColXml); }, (dm, st) => { dm.@ColUuidDfPk = st.@Col_uuid_df_pk; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithPrimaryKeyWithDifferentIdentity))
			{
				ITabWithPrimaryKeyWithDifferentIdentity _model = (ITabWithPrimaryKeyWithDifferentIdentity)(object)model;
				return this.LinqSave<ITabWithPrimaryKeyWithDifferentIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_with_different_identity>(unitOfWork, _model, (t) => t.@Col_int_pk == _model.@ColIntPk, (dt, sm) => { dt.@Col_int_pk = sm.@ColIntPk; dt.@Col_int_id = sm.@ColIntId; dt.@Col_bigint = sm.@ColBigint; if ((object)sm.@ColBinary != null) dt.@Col_binary = sm.@ColBinary; dt.@Col_bit = sm.@ColBit; dt.@Col_char = sm.@ColChar; dt.@Col_date = sm.@ColDate; dt.@Col_datetime = sm.@ColDatetime; dt.@Col_datetime2 = sm.@ColDatetime2; dt.@Col_datetimeoffset = sm.@ColDatetimeoffset; dt.@Col_decimal = sm.@ColDecimal; dt.@Col_float = sm.@ColFloat; if ((object)sm.@ColImage != null) dt.@Col_image = sm.@ColImage; dt.@Col_int = sm.@ColInt; dt.@Col_money = sm.@ColMoney; dt.@Col_nchar = sm.@ColNchar; dt.@Col_ntext = sm.@ColNtext; dt.@Col_numeric = sm.@ColNumeric; dt.@Col_nvarchar = sm.@ColNvarchar; dt.@Col_real = sm.@ColReal; if ((object)sm.@ColRowversion != null) dt.@Col_rowversion = sm.@ColRowversion; dt.@Col_smalldatetime = sm.@ColSmalldatetime; dt.@Col_smallint = sm.@ColSmallint; dt.@Col_smallmoney = sm.@ColSmallmoney; dt.@Col_sql_variant = sm.@ColSqlVariant; dt.@Col_sysname = sm.@ColSysname; dt.@Col_text = sm.@ColText; dt.@Col_time = sm.@ColTime; dt.@Col_tinyint = sm.@ColTinyint; dt.@Col_uniqueidentifier = sm.@ColUniqueidentifier; if ((object)sm.@ColVarbinary != null) dt.@Col_varbinary = sm.@ColVarbinary; dt.@Col_varchar = sm.@ColVarchar; if ((object)sm.@ColXml != null) dt.@Col_xml = ToXElement(sm.@ColXml); }, (dm, st) => { dm.@ColIntPk = st.@Col_int_pk; dm.@ColIntId = st.@Col_int_id; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithNoPrimaryKeyWithIdentity))
			{
				ITabWithNoPrimaryKeyWithIdentity _model = (ITabWithNoPrimaryKeyWithIdentity)(object)model;
				return this.LinqSave<ITabWithNoPrimaryKeyWithIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_no_primary_key_with_identity>(unitOfWork, _model, (t) => t.@Col_int_id == _model.@ColIntId && t.@Col_bigint == _model.@ColBigint && t.@Col_binary.ToArray() == _model.@ColBinary && t.@Col_bit == _model.@ColBit && t.@Col_char == _model.@ColChar && t.@Col_date == _model.@ColDate && t.@Col_datetime == _model.@ColDatetime && t.@Col_datetime2 == _model.@ColDatetime2 && t.@Col_datetimeoffset == _model.@ColDatetimeoffset && t.@Col_decimal == _model.@ColDecimal && t.@Col_float == _model.@ColFloat && t.@Col_image.ToArray() == _model.@ColImage && t.@Col_int == _model.@ColInt && t.@Col_money == _model.@ColMoney && t.@Col_nchar == _model.@ColNchar && t.@Col_ntext == _model.@ColNtext && t.@Col_numeric == _model.@ColNumeric && t.@Col_nvarchar == _model.@ColNvarchar && t.@Col_real == _model.@ColReal && t.@Col_rowversion.ToArray() == _model.@ColRowversion && t.@Col_smalldatetime == _model.@ColSmalldatetime && t.@Col_smallint == _model.@ColSmallint && t.@Col_smallmoney == _model.@ColSmallmoney && t.@Col_sql_variant == _model.@ColSqlVariant && t.@Col_sysname == _model.@ColSysname && t.@Col_text == _model.@ColText && t.@Col_time == _model.@ColTime && t.@Col_tinyint == _model.@ColTinyint && t.@Col_uniqueidentifier == _model.@ColUniqueidentifier && t.@Col_varbinary.ToArray() == _model.@ColVarbinary && t.@Col_varchar == _model.@ColVarchar && t.@Col_xml == ToXElement(_model.@ColXml), (dt, sm) => { dt.@Col_int_id = sm.@ColIntId; dt.@Col_bigint = sm.@ColBigint; if ((object)sm.@ColBinary != null) dt.@Col_binary = sm.@ColBinary; dt.@Col_bit = sm.@ColBit; dt.@Col_char = sm.@ColChar; dt.@Col_date = sm.@ColDate; dt.@Col_datetime = sm.@ColDatetime; dt.@Col_datetime2 = sm.@ColDatetime2; dt.@Col_datetimeoffset = sm.@ColDatetimeoffset; dt.@Col_decimal = sm.@ColDecimal; dt.@Col_float = sm.@ColFloat; if ((object)sm.@ColImage != null) dt.@Col_image = sm.@ColImage; dt.@Col_int = sm.@ColInt; dt.@Col_money = sm.@ColMoney; dt.@Col_nchar = sm.@ColNchar; dt.@Col_ntext = sm.@ColNtext; dt.@Col_numeric = sm.@ColNumeric; dt.@Col_nvarchar = sm.@ColNvarchar; dt.@Col_real = sm.@ColReal; if ((object)sm.@ColRowversion != null) dt.@Col_rowversion = sm.@ColRowversion; dt.@Col_smalldatetime = sm.@ColSmalldatetime; dt.@Col_smallint = sm.@ColSmallint; dt.@Col_smallmoney = sm.@ColSmallmoney; dt.@Col_sql_variant = sm.@ColSqlVariant; dt.@Col_sysname = sm.@ColSysname; dt.@Col_text = sm.@ColText; dt.@Col_time = sm.@ColTime; dt.@Col_tinyint = sm.@ColTinyint; dt.@Col_uniqueidentifier = sm.@ColUniqueidentifier; if ((object)sm.@ColVarbinary != null) dt.@Col_varbinary = sm.@ColVarbinary; dt.@Col_varchar = sm.@ColVarchar; if ((object)sm.@ColXml != null) dt.@Col_xml = ToXElement(sm.@ColXml); }, (dm, st) => { dm.@ColIntId = st.@Col_int_id; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithPrimaryKeyNoIdentity))
			{
				ITabWithPrimaryKeyNoIdentity _model = (ITabWithPrimaryKeyNoIdentity)(object)model;
				return this.LinqSave<ITabWithPrimaryKeyNoIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_primary_key_no_identity>(unitOfWork, _model, (t) => t.@Col_int_pk == _model.@ColIntPk, (dt, sm) => { dt.@Col_int_pk = sm.@ColIntPk; dt.@Col_bigint = sm.@ColBigint; if ((object)sm.@ColBinary != null) dt.@Col_binary = sm.@ColBinary; dt.@Col_bit = sm.@ColBit; dt.@Col_char = sm.@ColChar; dt.@Col_date = sm.@ColDate; dt.@Col_datetime = sm.@ColDatetime; dt.@Col_datetime2 = sm.@ColDatetime2; dt.@Col_datetimeoffset = sm.@ColDatetimeoffset; dt.@Col_decimal = sm.@ColDecimal; dt.@Col_float = sm.@ColFloat; if ((object)sm.@ColImage != null) dt.@Col_image = sm.@ColImage; dt.@Col_int = sm.@ColInt; dt.@Col_money = sm.@ColMoney; dt.@Col_nchar = sm.@ColNchar; dt.@Col_ntext = sm.@ColNtext; dt.@Col_numeric = sm.@ColNumeric; dt.@Col_nvarchar = sm.@ColNvarchar; dt.@Col_real = sm.@ColReal; if ((object)sm.@ColRowversion != null) dt.@Col_rowversion = sm.@ColRowversion; dt.@Col_smalldatetime = sm.@ColSmalldatetime; dt.@Col_smallint = sm.@ColSmallint; dt.@Col_smallmoney = sm.@ColSmallmoney; dt.@Col_sql_variant = sm.@ColSqlVariant; dt.@Col_sysname = sm.@ColSysname; dt.@Col_text = sm.@ColText; dt.@Col_time = sm.@ColTime; dt.@Col_tinyint = sm.@ColTinyint; dt.@Col_uniqueidentifier = sm.@ColUniqueidentifier; if ((object)sm.@ColVarbinary != null) dt.@Col_varbinary = sm.@ColVarbinary; dt.@Col_varchar = sm.@ColVarchar; if ((object)sm.@ColXml != null) dt.@Col_xml = ToXElement(sm.@ColXml); }, (dm, st) => { dm.@ColIntPk = st.@Col_int_pk; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabNoPrimaryKeyNoIdentity))
			{
				ITabNoPrimaryKeyNoIdentity _model = (ITabNoPrimaryKeyNoIdentity)(object)model;
				return this.LinqSave<ITabNoPrimaryKeyNoIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_no_primary_key_no_identity>(unitOfWork, _model, (t) => t.@Col_bigint == _model.@ColBigint && t.@Col_binary.ToArray() == _model.@ColBinary && t.@Col_bit == _model.@ColBit && t.@Col_char == _model.@ColChar && t.@Col_date == _model.@ColDate && t.@Col_datetime == _model.@ColDatetime && t.@Col_datetime2 == _model.@ColDatetime2 && t.@Col_datetimeoffset == _model.@ColDatetimeoffset && t.@Col_decimal == _model.@ColDecimal && t.@Col_float == _model.@ColFloat && t.@Col_image.ToArray() == _model.@ColImage && t.@Col_int == _model.@ColInt && t.@Col_money == _model.@ColMoney && t.@Col_nchar == _model.@ColNchar && t.@Col_ntext == _model.@ColNtext && t.@Col_numeric == _model.@ColNumeric && t.@Col_nvarchar == _model.@ColNvarchar && t.@Col_real == _model.@ColReal && t.@Col_rowversion.ToArray() == _model.@ColRowversion && t.@Col_smalldatetime == _model.@ColSmalldatetime && t.@Col_smallint == _model.@ColSmallint && t.@Col_smallmoney == _model.@ColSmallmoney && t.@Col_sql_variant == _model.@ColSqlVariant && t.@Col_sysname == _model.@ColSysname && t.@Col_text == _model.@ColText && t.@Col_time == _model.@ColTime && t.@Col_tinyint == _model.@ColTinyint && t.@Col_uniqueidentifier == _model.@ColUniqueidentifier && t.@Col_varbinary.ToArray() == _model.@ColVarbinary && t.@Col_varchar == _model.@ColVarchar && t.@Col_xml == ToXElement(_model.@ColXml), (dt, sm) => { dt.@Col_bigint = sm.@ColBigint; if ((object)sm.@ColBinary != null) dt.@Col_binary = sm.@ColBinary; dt.@Col_bit = sm.@ColBit; dt.@Col_char = sm.@ColChar; dt.@Col_date = sm.@ColDate; dt.@Col_datetime = sm.@ColDatetime; dt.@Col_datetime2 = sm.@ColDatetime2; dt.@Col_datetimeoffset = sm.@ColDatetimeoffset; dt.@Col_decimal = sm.@ColDecimal; dt.@Col_float = sm.@ColFloat; if ((object)sm.@ColImage != null) dt.@Col_image = sm.@ColImage; dt.@Col_int = sm.@ColInt; dt.@Col_money = sm.@ColMoney; dt.@Col_nchar = sm.@ColNchar; dt.@Col_ntext = sm.@ColNtext; dt.@Col_numeric = sm.@ColNumeric; dt.@Col_nvarchar = sm.@ColNvarchar; dt.@Col_real = sm.@ColReal; if ((object)sm.@ColRowversion != null) dt.@Col_rowversion = sm.@ColRowversion; dt.@Col_smalldatetime = sm.@ColSmalldatetime; dt.@Col_smallint = sm.@ColSmallint; dt.@Col_smallmoney = sm.@ColSmallmoney; dt.@Col_sql_variant = sm.@ColSqlVariant; dt.@Col_sysname = sm.@ColSysname; dt.@Col_text = sm.@ColText; dt.@Col_time = sm.@ColTime; dt.@Col_tinyint = sm.@ColTinyint; dt.@Col_uniqueidentifier = sm.@ColUniqueidentifier; if ((object)sm.@ColVarbinary != null) dt.@Col_varbinary = sm.@ColVarbinary; dt.@Col_varchar = sm.@ColVarchar; if ((object)sm.@ColXml != null) dt.@Col_xml = ToXElement(sm.@ColXml); }, (dm, st) => { dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else if (modelType == typeof(ITabWithCompositePrimaryKeyNoIdentity))
			{
				ITabWithCompositePrimaryKeyNoIdentity _model = (ITabWithCompositePrimaryKeyNoIdentity)(object)model;
				return this.LinqSave<ITabWithCompositePrimaryKeyNoIdentity, TextMetal.HostImpl.AspNetSample.DomainModel.L2S.Testcases_Tab_with_composite_primary_key_no_identity>(unitOfWork, _model, (t) => t.@Col_int_pk0 == _model.@ColIntPk0 && t.@Col_int_pk1 == _model.@ColIntPk1 && t.@Col_int_pk2 == _model.@ColIntPk2 && t.@Col_int_pk3 == _model.@ColIntPk3, (dt, sm) => { dt.@Col_int_pk0 = sm.@ColIntPk0; dt.@Col_int_pk1 = sm.@ColIntPk1; dt.@Col_int_pk2 = sm.@ColIntPk2; dt.@Col_int_pk3 = sm.@ColIntPk3; dt.@Col_bigint = sm.@ColBigint; if ((object)sm.@ColBinary != null) dt.@Col_binary = sm.@ColBinary; dt.@Col_bit = sm.@ColBit; dt.@Col_char = sm.@ColChar; dt.@Col_date = sm.@ColDate; dt.@Col_datetime = sm.@ColDatetime; dt.@Col_datetime2 = sm.@ColDatetime2; dt.@Col_datetimeoffset = sm.@ColDatetimeoffset; dt.@Col_decimal = sm.@ColDecimal; dt.@Col_float = sm.@ColFloat; if ((object)sm.@ColImage != null) dt.@Col_image = sm.@ColImage; dt.@Col_int = sm.@ColInt; dt.@Col_money = sm.@ColMoney; dt.@Col_nchar = sm.@ColNchar; dt.@Col_ntext = sm.@ColNtext; dt.@Col_numeric = sm.@ColNumeric; dt.@Col_nvarchar = sm.@ColNvarchar; dt.@Col_real = sm.@ColReal; if ((object)sm.@ColRowversion != null) dt.@Col_rowversion = sm.@ColRowversion; dt.@Col_smalldatetime = sm.@ColSmalldatetime; dt.@Col_smallint = sm.@ColSmallint; dt.@Col_smallmoney = sm.@ColSmallmoney; dt.@Col_sql_variant = sm.@ColSqlVariant; dt.@Col_sysname = sm.@ColSysname; dt.@Col_text = sm.@ColText; dt.@Col_time = sm.@ColTime; dt.@Col_tinyint = sm.@ColTinyint; dt.@Col_uniqueidentifier = sm.@ColUniqueidentifier; if ((object)sm.@ColVarbinary != null) dt.@Col_varbinary = sm.@ColVarbinary; dt.@Col_varchar = sm.@ColVarchar; if ((object)sm.@ColXml != null) dt.@Col_xml = ToXElement(sm.@ColXml); }, (dm, st) => { dm.@ColIntPk0 = st.@Col_int_pk0; dm.@ColIntPk1 = st.@Col_int_pk1; dm.@ColIntPk2 = st.@Col_int_pk2; dm.@ColIntPk3 = st.@Col_int_pk3; dm.@ColBigint = st.@Col_bigint; dm.@ColBinary = (object)st.@Col_binary != null ? st.@Col_binary.ToArray() : null; dm.@ColBit = st.@Col_bit; dm.@ColChar = st.@Col_char; dm.@ColDate = st.@Col_date; dm.@ColDatetime = st.@Col_datetime; dm.@ColDatetime2 = st.@Col_datetime2; dm.@ColDatetimeoffset = st.@Col_datetimeoffset; dm.@ColDecimal = st.@Col_decimal; dm.@ColFloat = st.@Col_float; dm.@ColImage = (object)st.@Col_image != null ? st.@Col_image.ToArray() : null; dm.@ColInt = st.@Col_int; dm.@ColMoney = st.@Col_money; dm.@ColNchar = st.@Col_nchar; dm.@ColNtext = st.@Col_ntext; dm.@ColNumeric = st.@Col_numeric; dm.@ColNvarchar = st.@Col_nvarchar; dm.@ColReal = st.@Col_real; dm.@ColRowversion = (object)st.@Col_rowversion != null ? st.@Col_rowversion.ToArray() : null; dm.@ColSmalldatetime = st.@Col_smalldatetime; dm.@ColSmallint = st.@Col_smallint; dm.@ColSmallmoney = st.@Col_smallmoney; dm.@ColSqlVariant = st.@Col_sql_variant; dm.@ColSysname = st.@Col_sysname; dm.@ColText = st.@Col_text; dm.@ColTime = st.@Col_time; dm.@ColTinyint = st.@Col_tinyint; dm.@ColUniqueidentifier = st.@Col_uniqueidentifier; dm.@ColVarbinary = (object)st.@Col_varbinary != null ? st.@Col_varbinary.ToArray() : null; dm.@ColVarchar = st.@Col_varchar; dm.@ColXml = (object)st.@Col_xml != null ? ToXmlDocument(st.@Col_xml) : null; });
			}
			else
				throw new ArgumentOutOfRangeException(string.Format("The model type '{0}' was not recognized. Try re-generating the repository code from the templates using TextMetal.exe and try again.", modelType.FullName));
		}

		#endregion
	}
}
