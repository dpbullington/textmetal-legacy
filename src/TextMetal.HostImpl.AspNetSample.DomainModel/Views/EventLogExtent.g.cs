//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by:
// TextMetal 6.0.0.37114;
// 		Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
//		Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
//		Project URL: https://github.com/dpbullington/textmetal
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------

/*
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
*/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
using TextMetal.Common.Data.Framework;
using TextMetal.Common.Syntax.Expressions;
using TextMetal.Common.Syntax.Operators;
using TextMetal.Common.Syntax.Statements;

namespace TextMetal.HostImpl.AspNetSample.DomainModel.Views
{
	public partial class EventLogExtent : Object, INotifyPropertyChanged, IEventLogExtent
	{
		#region Constructors/Destructors

		public EventLogExtent()
		{
		}

		#endregion

		#region Fields/Constants

		public const string SCHEMA_NAME = "dbo";
		public const string TABLE_NAME = "EventLogExtent";
		public const bool HAS_SINGLE_COLUMN_SERVER_GENERATED_PRIMARY_KEY = false;
		public const string COLUMN_NAME_MIN_CREATION_TIMESTAMP = "MinCreationTimestamp";
		public const string COLUMN_NAME_AVG_DIFFERENCE_TIMESTAMPS = "AvgDifferenceTimestamps";
		public const string COLUMN_NAME_MAX_MODIFICATION_TIMESTAMP = "MaxModificationTimestamp";

		private Nullable<DateTime> @minCreationTimestamp;
		private Nullable<Int32> @avgDifferenceTimestamps;
		private Nullable<DateTime> @maxModificationTimestamp;

		#endregion

		#region Properties/Indexers/Events

		public event PropertyChangedEventHandler PropertyChanged;

		public virtual bool IsNew
		{
			get
			{
				throw new NotSupportedException(string.Format("The model type '{0}' does not support the IsNew property.", this.GetType().FullName));
			}
			set
			{
				throw new NotSupportedException(string.Format("The model type '{0}' does not support the IsNew property.", this.GetType().FullName));
			}
		}
		
		/* PRIMARY_KEY */
		public Nullable<DateTime> @MinCreationTimestamp
		{
			get
			{
				return this.@minCreationTimestamp;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@minCreationTimestamp, value))
				{
					this.@minCreationTimestamp = value;
					OnPropertyChanged("MinCreationTimestamp");
				}
			}
		}
		
		/* PRIMARY_KEY */
		public Nullable<Int32> @AvgDifferenceTimestamps
		{
			get
			{
				return this.@avgDifferenceTimestamps;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@avgDifferenceTimestamps, value))
				{
					this.@avgDifferenceTimestamps = value;
					OnPropertyChanged("AvgDifferenceTimestamps");
				}
			}
		}
		
		/* PRIMARY_KEY */
		public Nullable<DateTime> @MaxModificationTimestamp
		{
			get
			{
				return this.@maxModificationTimestamp;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@maxModificationTimestamp, value))
				{
					this.@maxModificationTimestamp = value;
					OnPropertyChanged("MaxModificationTimestamp");
				}
			}
		}
		
		#endregion

		#region Methods/Operators

		partial void OnMark();

		partial void OnValidate(ref IEnumerable<Message> messages);

		public virtual void Mark()
		{
			this.OnMark();
		}

		public virtual IEnumerable<Message> Validate()
		{
			IEnumerable<Message> messages = null;

			this.OnValidate(ref messages);

			return messages ?? new Message[] { };
		}

		protected void OnAllPropertiesChanged()
        {
			this.OnPropertyChanged(null);
		}

		protected void OnPropertyChanged(string propertyName)
        {
			if ((object)this.PropertyChanged != null)
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

		#endregion
	}
}
