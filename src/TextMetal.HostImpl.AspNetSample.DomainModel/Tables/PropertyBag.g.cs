//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by:
// TextMetal 6.0.0.37114;
// 		Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
//		Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
//		Project URL: https://github.com/dpbullington/textmetal
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------

/*
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
*/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
using TextMetal.Common.Data.Framework;
using TextMetal.Common.Syntax.Expressions;
using TextMetal.Common.Syntax.Operators;
using TextMetal.Common.Syntax.Statements;

namespace TextMetal.HostImpl.AspNetSample.DomainModel.Tables
{
	public partial class PropertyBag : Object, INotifyPropertyChanged, IPropertyBag
	{
		#region Constructors/Destructors

		public PropertyBag()
		{
		}

		#endregion

		#region Fields/Constants

		public const string SCHEMA_NAME = "global";
		public const string TABLE_NAME = "PropertyBag";
		public const bool HAS_SINGLE_COLUMN_SERVER_GENERATED_PRIMARY_KEY = true;
		public const string COLUMN_NAME_PROPERTY_BAG_ID = "PropertyBagId";
		public const string COLUMN_NAME_PROPERTY_KEY = "PropertyKey";
		public const string COLUMN_NAME_PROPERTY_TYPE = "PropertyType";
		public const string COLUMN_NAME_PROPERTY_VALUE = "PropertyValue";
		public const string COLUMN_NAME_SORT_ORDER = "SortOrder";
		public const string COLUMN_NAME_CREATION_TIMESTAMP = "CreationTimestamp";
		public const string COLUMN_NAME_MODIFICATION_TIMESTAMP = "ModificationTimestamp";
		public const string COLUMN_NAME_CREATION_USER_ID = "CreationUserId";
		public const string COLUMN_NAME_MODIFICATION_USER_ID = "ModificationUserId";
		public const string COLUMN_NAME_LOGICAL_DELETE = "LogicalDelete";

		private Nullable<Int32> @propertyBagId;
		private String @propertyKey;
		private String @propertyType;
		private String @propertyValue;
		private Nullable<Byte> @sortOrder;
		private Nullable<DateTime> @creationTimestamp;
		private Nullable<DateTime> @modificationTimestamp;
		private Nullable<Int32> @creationUserId;
		private Nullable<Int32> @modificationUserId;
		private Nullable<Boolean> @logicalDelete;

		#endregion

		#region Properties/Indexers/Events

		public event PropertyChangedEventHandler PropertyChanged;

		public virtual bool IsNew
		{
			get
			{
				return this.@PropertyBagId == default(Nullable<Int32>);
			}
			set
			{
				if(value)
					this.@PropertyBagId =  default(Nullable<Int32>);
			}
		}
		
		/* PRIMARY_KEY */
		public Nullable<Int32> @PropertyBagId
		{
			get
			{
				return this.@propertyBagId;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@propertyBagId, value))
				{
					this.@propertyBagId = value;
					OnPropertyChanged("PropertyBagId");
				}
			}
		}
		
		public String @PropertyKey
		{
			get
			{
				return this.@propertyKey;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@propertyKey, value))
				{
					this.@propertyKey = value;
					OnPropertyChanged("PropertyKey");
				}
			}
		}
		
		public String @PropertyType
		{
			get
			{
				return this.@propertyType;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@propertyType, value))
				{
					this.@propertyType = value;
					OnPropertyChanged("PropertyType");
				}
			}
		}
		
		public String @PropertyValue
		{
			get
			{
				return this.@propertyValue;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@propertyValue, value))
				{
					this.@propertyValue = value;
					OnPropertyChanged("PropertyValue");
				}
			}
		}
		
		public Nullable<Byte> @SortOrder
		{
			get
			{
				return this.@sortOrder;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@sortOrder, value))
				{
					this.@sortOrder = value;
					OnPropertyChanged("SortOrder");
				}
			}
		}
		
		public Nullable<DateTime> @CreationTimestamp
		{
			get
			{
				return this.@creationTimestamp;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@creationTimestamp, value))
				{
					this.@creationTimestamp = value;
					OnPropertyChanged("CreationTimestamp");
				}
			}
		}
		
		public Nullable<DateTime> @ModificationTimestamp
		{
			get
			{
				return this.@modificationTimestamp;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@modificationTimestamp, value))
				{
					this.@modificationTimestamp = value;
					OnPropertyChanged("ModificationTimestamp");
				}
			}
		}
		
		public Nullable<Int32> @CreationUserId
		{
			get
			{
				return this.@creationUserId;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@creationUserId, value))
				{
					this.@creationUserId = value;
					OnPropertyChanged("CreationUserId");
				}
			}
		}
		
		public Nullable<Int32> @ModificationUserId
		{
			get
			{
				return this.@modificationUserId;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@modificationUserId, value))
				{
					this.@modificationUserId = value;
					OnPropertyChanged("ModificationUserId");
				}
			}
		}
		
		public Nullable<Boolean> @LogicalDelete
		{
			get
			{
				return this.@logicalDelete;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@logicalDelete, value))
				{
					this.@logicalDelete = value;
					OnPropertyChanged("LogicalDelete");
				}
			}
		}
		
		#endregion

		#region Methods/Operators

		partial void OnMark();

		partial void OnValidate(ref IEnumerable<Message> messages);

		public virtual void Mark()
		{
			this.OnMark();
		}

		public virtual IEnumerable<Message> Validate()
		{
			IEnumerable<Message> messages = null;

			this.OnValidate(ref messages);

			return messages ?? new Message[] { };
		}

		protected void OnAllPropertiesChanged()
        {
			this.OnPropertyChanged(null);
		}

		protected void OnPropertyChanged(string propertyName)
        {
			if ((object)this.PropertyChanged != null)
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

		#endregion
	}
}
