//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by:
// TextMetal 6.0.0.37114;
// 		Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
//		Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
//		Project URL: https://github.com/dpbullington/textmetal
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------

/*
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
*/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
using TextMetal.Common.Data.Framework;
using TextMetal.Common.Syntax.Expressions;
using TextMetal.Common.Syntax.Operators;
using TextMetal.Common.Syntax.Statements;

namespace TextMetal.HostImpl.AspNetSample.DomainModel.Tables
{
	public partial class UserHistory : Object, INotifyPropertyChanged, IUserHistory
	{
		#region Constructors/Destructors

		public UserHistory()
		{
		}

		#endregion

		#region Fields/Constants

		public const string SCHEMA_NAME = "history";
		public const string TABLE_NAME = "UserHistory";
		public const bool HAS_SINGLE_COLUMN_SERVER_GENERATED_PRIMARY_KEY = true;
		public const string COLUMN_NAME_USER_HISTORY_ID = "UserHistoryId";
		public const string COLUMN_NAME_USER_HISTORY_TS = "UserHistoryTs";
		public const string COLUMN_NAME_USER_ID = "UserId";
		public const string COLUMN_NAME_EMAIL_ADDRESS = "EmailAddress";
		public const string COLUMN_NAME_USER_NAME = "UserName";
		public const string COLUMN_NAME_SALT_VALUE = "SaltValue";
		public const string COLUMN_NAME_PASSWORD_HASH = "PasswordHash";
		public const string COLUMN_NAME_QUESTION = "Question";
		public const string COLUMN_NAME_ANSWER_HASH = "AnswerHash";
		public const string COLUMN_NAME_LAST_LOGIN_SUCCESS_TIMESTAMP = "LastLoginSuccessTimestamp";
		public const string COLUMN_NAME_LAST_LOGIN_FAILURE_TIMESTAMP = "LastLoginFailureTimestamp";
		public const string COLUMN_NAME_FAILED_LOGIN_COUNT = "FailedLoginCount";
		public const string COLUMN_NAME_MUST_CHANGE_PASSWORD = "MustChangePassword";
		public const string COLUMN_NAME_SORT_ORDER = "SortOrder";
		public const string COLUMN_NAME_CREATION_TIMESTAMP = "CreationTimestamp";
		public const string COLUMN_NAME_MODIFICATION_TIMESTAMP = "ModificationTimestamp";
		public const string COLUMN_NAME_CREATION_USER_ID = "CreationUserId";
		public const string COLUMN_NAME_MODIFICATION_USER_ID = "ModificationUserId";
		public const string COLUMN_NAME_LOGICAL_DELETE = "LogicalDelete";

		private Nullable<Int64> @userHistoryId;
		private Nullable<DateTime> @userHistoryTs;
		private Nullable<Int32> @userId;
		private String @emailAddress;
		private String @userName;
		private String @saltValue;
		private String @passwordHash;
		private String @question;
		private String @answerHash;
		private Nullable<DateTime> @lastLoginSuccessTimestamp;
		private Nullable<DateTime> @lastLoginFailureTimestamp;
		private Nullable<Int16> @failedLoginCount;
		private Nullable<Boolean> @mustChangePassword;
		private Nullable<Byte> @sortOrder;
		private Nullable<DateTime> @creationTimestamp;
		private Nullable<DateTime> @modificationTimestamp;
		private Nullable<Int32> @creationUserId;
		private Nullable<Int32> @modificationUserId;
		private Nullable<Boolean> @logicalDelete;

		#endregion

		#region Properties/Indexers/Events

		public event PropertyChangedEventHandler PropertyChanged;

		public virtual bool IsNew
		{
			get
			{
				return this.@UserHistoryId == default(Nullable<Int64>);
			}
			set
			{
				if(value)
					this.@UserHistoryId =  default(Nullable<Int64>);
			}
		}
		
		/* PRIMARY_KEY */
		public Nullable<Int64> @UserHistoryId
		{
			get
			{
				return this.@userHistoryId;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@userHistoryId, value))
				{
					this.@userHistoryId = value;
					OnPropertyChanged("UserHistoryId");
				}
			}
		}
		
		public Nullable<DateTime> @UserHistoryTs
		{
			get
			{
				return this.@userHistoryTs;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@userHistoryTs, value))
				{
					this.@userHistoryTs = value;
					OnPropertyChanged("UserHistoryTs");
				}
			}
		}
		
		public Nullable<Int32> @UserId
		{
			get
			{
				return this.@userId;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@userId, value))
				{
					this.@userId = value;
					OnPropertyChanged("UserId");
				}
			}
		}
		
		public String @EmailAddress
		{
			get
			{
				return this.@emailAddress;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@emailAddress, value))
				{
					this.@emailAddress = value;
					OnPropertyChanged("EmailAddress");
				}
			}
		}
		
		public String @UserName
		{
			get
			{
				return this.@userName;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@userName, value))
				{
					this.@userName = value;
					OnPropertyChanged("UserName");
				}
			}
		}
		
		public String @SaltValue
		{
			get
			{
				return this.@saltValue;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@saltValue, value))
				{
					this.@saltValue = value;
					OnPropertyChanged("SaltValue");
				}
			}
		}
		
		public String @PasswordHash
		{
			get
			{
				return this.@passwordHash;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@passwordHash, value))
				{
					this.@passwordHash = value;
					OnPropertyChanged("PasswordHash");
				}
			}
		}
		
		public String @Question
		{
			get
			{
				return this.@question;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@question, value))
				{
					this.@question = value;
					OnPropertyChanged("Question");
				}
			}
		}
		
		public String @AnswerHash
		{
			get
			{
				return this.@answerHash;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@answerHash, value))
				{
					this.@answerHash = value;
					OnPropertyChanged("AnswerHash");
				}
			}
		}
		
		public Nullable<DateTime> @LastLoginSuccessTimestamp
		{
			get
			{
				return this.@lastLoginSuccessTimestamp;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@lastLoginSuccessTimestamp, value))
				{
					this.@lastLoginSuccessTimestamp = value;
					OnPropertyChanged("LastLoginSuccessTimestamp");
				}
			}
		}
		
		public Nullable<DateTime> @LastLoginFailureTimestamp
		{
			get
			{
				return this.@lastLoginFailureTimestamp;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@lastLoginFailureTimestamp, value))
				{
					this.@lastLoginFailureTimestamp = value;
					OnPropertyChanged("LastLoginFailureTimestamp");
				}
			}
		}
		
		public Nullable<Int16> @FailedLoginCount
		{
			get
			{
				return this.@failedLoginCount;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@failedLoginCount, value))
				{
					this.@failedLoginCount = value;
					OnPropertyChanged("FailedLoginCount");
				}
			}
		}
		
		public Nullable<Boolean> @MustChangePassword
		{
			get
			{
				return this.@mustChangePassword;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@mustChangePassword, value))
				{
					this.@mustChangePassword = value;
					OnPropertyChanged("MustChangePassword");
				}
			}
		}
		
		public Nullable<Byte> @SortOrder
		{
			get
			{
				return this.@sortOrder;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@sortOrder, value))
				{
					this.@sortOrder = value;
					OnPropertyChanged("SortOrder");
				}
			}
		}
		
		public Nullable<DateTime> @CreationTimestamp
		{
			get
			{
				return this.@creationTimestamp;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@creationTimestamp, value))
				{
					this.@creationTimestamp = value;
					OnPropertyChanged("CreationTimestamp");
				}
			}
		}
		
		public Nullable<DateTime> @ModificationTimestamp
		{
			get
			{
				return this.@modificationTimestamp;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@modificationTimestamp, value))
				{
					this.@modificationTimestamp = value;
					OnPropertyChanged("ModificationTimestamp");
				}
			}
		}
		
		public Nullable<Int32> @CreationUserId
		{
			get
			{
				return this.@creationUserId;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@creationUserId, value))
				{
					this.@creationUserId = value;
					OnPropertyChanged("CreationUserId");
				}
			}
		}
		
		public Nullable<Int32> @ModificationUserId
		{
			get
			{
				return this.@modificationUserId;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@modificationUserId, value))
				{
					this.@modificationUserId = value;
					OnPropertyChanged("ModificationUserId");
				}
			}
		}
		
		public Nullable<Boolean> @LogicalDelete
		{
			get
			{
				return this.@logicalDelete;
			}
			set
			{
				if (!DataType.ObjectsEqualValueSemantics(this.@logicalDelete, value))
				{
					this.@logicalDelete = value;
					OnPropertyChanged("LogicalDelete");
				}
			}
		}
		
		#endregion

		#region Methods/Operators

		partial void OnMark();

		partial void OnValidate(ref IEnumerable<Message> messages);

		public virtual void Mark()
		{
			this.OnMark();
		}

		public virtual IEnumerable<Message> Validate()
		{
			IEnumerable<Message> messages = null;

			this.OnValidate(ref messages);

			return messages ?? new Message[] { };
		}

		protected void OnAllPropertiesChanged()
        {
			this.OnPropertyChanged(null);
		}

		protected void OnPropertyChanged(string propertyName)
        {
			if ((object)this.PropertyChanged != null)
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

		#endregion
	}
}
