//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by:
// TextMetal 5.0.3.597;
// 		Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
//		Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
//		Project URL: https://github.com/dpbullington/textmetal
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------

/*
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Linq;
using System.Linq;
using System.Xml;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
using TextMetal.Common.Data.LinqToSql;

using TextMetal.HostImpl.AspNetSample.Objects.Model.Tables;
using TextMetal.HostImpl.AspNetSample.Objects.Model.Views;

namespace TextMetal.HostImpl.AspNetSample.Objects.Model
{
	public partial class Repository
	{		
		#region Methods/Operators
		
		public User LoadUser(Int32 @userId)
		{
			User @user;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@user = this.LoadUser(unitOfWork, @userId);

					unitOfWork.Complete();
				}
			}
			else
				@user = this.LoadUser(UnitOfWork.Current, @userId);
			
			return @user;
		}
		
		public User LoadUser(IUnitOfWork unitOfWork, Int32 @userId)
		{			
			User @user;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.User query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.Users.SingleOrDefault(lo => lo.@UserId == @userId);

				if ((object)query == null)
					return null; // does not exist
				
				@user = new User()
								{
									// map result to POCO from L2S object
									@UserId = query.@UserId,
									@EmailAddress = query.@EmailAddress,
									@UserName = query.@UserName,
									@SaltValue = query.@SaltValue,
									@PasswordHash = query.@PasswordHash,
									@Question = query.@Question,
									@AnswerHash = query.@AnswerHash,
									@LastLoginSuccessTimestamp = query.@LastLoginSuccessTimestamp,
									@LastLoginFailureTimestamp = query.@LastLoginFailureTimestamp,
									@FailedLoginCount = query.@FailedLoginCount,
									@MustChangePassword = query.@MustChangePassword,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectUser(unitOfWork, @user);

				return @user;
			}
		}
		
		public IEnumerable<User> FindUsers(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.User>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.User>> callback)
		{
			IEnumerable<User> @users;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@users = this.FindUsers(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @users.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@users = this.FindUsers(UnitOfWork.Current, callback);
				
				return @users; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<User> FindUsers(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.User>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.User>> callback)
		{
			IEnumerable<User> @users;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.User> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@Users);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@users = queryable.Select(lo => new User()
												 {
													// map results to POCOs from L2S objects
													@UserId = lo.@UserId,
													@EmailAddress = lo.@EmailAddress,
													@UserName = lo.@UserName,
													@SaltValue = lo.@SaltValue,
													@PasswordHash = lo.@PasswordHash,
													@Question = lo.@Question,
													@AnswerHash = lo.@AnswerHash,
													@LastLoginSuccessTimestamp = lo.@LastLoginSuccessTimestamp,
													@LastLoginFailureTimestamp = lo.@LastLoginFailureTimestamp,
													@FailedLoginCount = lo.@FailedLoginCount,
													@MustChangePassword = lo.@MustChangePassword,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (User @user in @users)
				{
					this.OnSelectUser(unitOfWork, @user);
					
					yield return @user; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveUser(User @user)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveUser(unitOfWork, @user);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveUser(UnitOfWork.Current, @user);
			
			return retval;
		}
		
		public bool SaveUser(IUnitOfWork unitOfWork, User @user)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.User query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@user == null)
				throw new ArgumentNullException("user");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @user.IsNew;

				if (wasNew)
				{
					this.OnPreInsertUser(unitOfWork, @user);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.User();

					wrapper.Disposable.Users.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateUser(unitOfWork, @user);
					
					query = wrapper.Disposable.Users.SingleOrDefault(lo => lo.@UserId == @user.@UserId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@UserId = @user.@UserId;
				query.@EmailAddress = @user.@EmailAddress;
				query.@UserName = @user.@UserName;
				query.@SaltValue = @user.@SaltValue;
				query.@PasswordHash = @user.@PasswordHash;
				query.@Question = @user.@Question;
				query.@AnswerHash = @user.@AnswerHash;
				query.@LastLoginSuccessTimestamp = @user.@LastLoginSuccessTimestamp;
				query.@LastLoginFailureTimestamp = @user.@LastLoginFailureTimestamp;
				query.@FailedLoginCount = @user.@FailedLoginCount;
				query.@MustChangePassword = @user.@MustChangePassword;
				query.@SortOrder = @user.@SortOrder;
				query.@CreationTimestamp = @user.@CreationTimestamp;
				query.@ModificationTimestamp = @user.@ModificationTimestamp;
				query.@CreationUserId = @user.@CreationUserId;
				query.@ModificationUserId = @user.@ModificationUserId;
				query.@LogicalDelete = @user.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictUser(unitOfWork, @user);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@user.@UserId = query.@UserId;
				@user.@EmailAddress = query.@EmailAddress;
				@user.@UserName = query.@UserName;
				@user.@SaltValue = query.@SaltValue;
				@user.@PasswordHash = query.@PasswordHash;
				@user.@Question = query.@Question;
				@user.@AnswerHash = query.@AnswerHash;
				@user.@LastLoginSuccessTimestamp = query.@LastLoginSuccessTimestamp;
				@user.@LastLoginFailureTimestamp = query.@LastLoginFailureTimestamp;
				@user.@FailedLoginCount = query.@FailedLoginCount;
				@user.@MustChangePassword = query.@MustChangePassword;
				@user.@SortOrder = query.@SortOrder;
				@user.@CreationTimestamp = query.@CreationTimestamp;
				@user.@ModificationTimestamp = query.@ModificationTimestamp;
				@user.@CreationUserId = query.@CreationUserId;
				@user.@ModificationUserId = query.@ModificationUserId;
				@user.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertUser(unitOfWork, @user);
				}
				else
				{
					this.OnPostUpdateUser(unitOfWork, @user);
				}

				return true;
			}
		}
		
		public bool DiscardUser(User @user)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardUser(unitOfWork, @user);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardUser(UnitOfWork.Current, @user);
			
			return retval;
		}
		
		public bool DiscardUser(IUnitOfWork unitOfWork, User @user)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.User query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@user == null)
				throw new ArgumentNullException("user");
				
			if (@user.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteUser(unitOfWork, @user);
				
				query = wrapper.Disposable.@Users.SingleOrDefault(lo => lo.@UserId == @user.@UserId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@Users.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictUser(unitOfWork, @user);
					
					return false;
				}

				this.OnPostDeleteUser(unitOfWork, @user);
				
				@user.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertUser(IUnitOfWork unitOfWork, User @user);
		
		partial void OnPostInsertUser(IUnitOfWork unitOfWork, User @user);
		
		partial void OnPreUpdateUser(IUnitOfWork unitOfWork, User @user);
		
		partial void OnPostUpdateUser(IUnitOfWork unitOfWork, User @user);
		
		partial void OnSaveConflictUser(IUnitOfWork unitOfWork, User @user);
		
		partial void OnDiscardConflictUser(IUnitOfWork unitOfWork, User @user);
				
		partial void OnPreDeleteUser(IUnitOfWork unitOfWork, User @user);
		
		partial void OnPostDeleteUser(IUnitOfWork unitOfWork, User @user);
		
		partial void OnSelectUser(IUnitOfWork unitOfWork, User @user);		

		public EventLog LoadEventLog(Int32 @eventLogId)
		{
			EventLog @eventLog;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@eventLog = this.LoadEventLog(unitOfWork, @eventLogId);

					unitOfWork.Complete();
				}
			}
			else
				@eventLog = this.LoadEventLog(UnitOfWork.Current, @eventLogId);
			
			return @eventLog;
		}
		
		public EventLog LoadEventLog(IUnitOfWork unitOfWork, Int32 @eventLogId)
		{			
			EventLog @eventLog;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.EventLogs.SingleOrDefault(lo => lo.@EventLogId == @eventLogId);

				if ((object)query == null)
					return null; // does not exist
				
				@eventLog = new EventLog()
								{
									// map result to POCO from L2S object
									@EventLogId = query.@EventLogId,
									@EventText = query.@EventText,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEventLog(unitOfWork, @eventLog);

				return @eventLog;
			}
		}
		
		public IEnumerable<EventLog> FindEventLogs(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog>> callback)
		{
			IEnumerable<EventLog> @eventLogs;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@eventLogs = this.FindEventLogs(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @eventLogs.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@eventLogs = this.FindEventLogs(UnitOfWork.Current, callback);
				
				return @eventLogs; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<EventLog> FindEventLogs(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog>> callback)
		{
			IEnumerable<EventLog> @eventLogs;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@EventLogs);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@eventLogs = queryable.Select(lo => new EventLog()
												 {
													// map results to POCOs from L2S objects
													@EventLogId = lo.@EventLogId,
													@EventText = lo.@EventText,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (EventLog @eventLog in @eventLogs)
				{
					this.OnSelectEventLog(unitOfWork, @eventLog);
					
					yield return @eventLog; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveEventLog(EventLog @eventLog)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveEventLog(unitOfWork, @eventLog);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveEventLog(UnitOfWork.Current, @eventLog);
			
			return retval;
		}
		
		public bool SaveEventLog(IUnitOfWork unitOfWork, EventLog @eventLog)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@eventLog == null)
				throw new ArgumentNullException("eventLog");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @eventLog.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEventLog(unitOfWork, @eventLog);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog();

					wrapper.Disposable.EventLogs.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEventLog(unitOfWork, @eventLog);
					
					query = wrapper.Disposable.EventLogs.SingleOrDefault(lo => lo.@EventLogId == @eventLog.@EventLogId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@EventLogId = @eventLog.@EventLogId;
				query.@EventText = @eventLog.@EventText;
				query.@SortOrder = @eventLog.@SortOrder;
				query.@CreationTimestamp = @eventLog.@CreationTimestamp;
				query.@ModificationTimestamp = @eventLog.@ModificationTimestamp;
				query.@CreationUserId = @eventLog.@CreationUserId;
				query.@ModificationUserId = @eventLog.@ModificationUserId;
				query.@LogicalDelete = @eventLog.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEventLog(unitOfWork, @eventLog);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@eventLog.@EventLogId = query.@EventLogId;
				@eventLog.@EventText = query.@EventText;
				@eventLog.@SortOrder = query.@SortOrder;
				@eventLog.@CreationTimestamp = query.@CreationTimestamp;
				@eventLog.@ModificationTimestamp = query.@ModificationTimestamp;
				@eventLog.@CreationUserId = query.@CreationUserId;
				@eventLog.@ModificationUserId = query.@ModificationUserId;
				@eventLog.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEventLog(unitOfWork, @eventLog);
				}
				else
				{
					this.OnPostUpdateEventLog(unitOfWork, @eventLog);
				}

				return true;
			}
		}
		
		public bool DiscardEventLog(EventLog @eventLog)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardEventLog(unitOfWork, @eventLog);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardEventLog(UnitOfWork.Current, @eventLog);
			
			return retval;
		}
		
		public bool DiscardEventLog(IUnitOfWork unitOfWork, EventLog @eventLog)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@eventLog == null)
				throw new ArgumentNullException("eventLog");
				
			if (@eventLog.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEventLog(unitOfWork, @eventLog);
				
				query = wrapper.Disposable.@EventLogs.SingleOrDefault(lo => lo.@EventLogId == @eventLog.@EventLogId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@EventLogs.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEventLog(unitOfWork, @eventLog);
					
					return false;
				}

				this.OnPostDeleteEventLog(unitOfWork, @eventLog);
				
				@eventLog.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);
		
		partial void OnPostInsertEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);
		
		partial void OnPreUpdateEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);
		
		partial void OnPostUpdateEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);
		
		partial void OnSaveConflictEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);
		
		partial void OnDiscardConflictEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);
				
		partial void OnPreDeleteEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);
		
		partial void OnPostDeleteEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);
		
		partial void OnSelectEventLog(IUnitOfWork unitOfWork, EventLog @eventLog);		

		public EmailMessage LoadEmailMessage(Int32 @emailMessageId)
		{
			EmailMessage @emailMessage;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@emailMessage = this.LoadEmailMessage(unitOfWork, @emailMessageId);

					unitOfWork.Complete();
				}
			}
			else
				@emailMessage = this.LoadEmailMessage(UnitOfWork.Current, @emailMessageId);
			
			return @emailMessage;
		}
		
		public EmailMessage LoadEmailMessage(IUnitOfWork unitOfWork, Int32 @emailMessageId)
		{			
			EmailMessage @emailMessage;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.EmailMessages.SingleOrDefault(lo => lo.@EmailMessageId == @emailMessageId);

				if ((object)query == null)
					return null; // does not exist
				
				@emailMessage = new EmailMessage()
								{
									// map result to POCO from L2S object
									@EmailMessageId = query.@EmailMessageId,
									@From = query.@From,
									@Sender = query.@Sender,
									@ReplyTo = query.@ReplyTo,
									@To = query.@To,
									@CarbonCopy = query.@CarbonCopy,
									@BlindCarbonCopy = query.@BlindCarbonCopy,
									@Subject = query.@Subject,
									@IsBodyHtml = query.@IsBodyHtml,
									@Body = query.@Body,
									@Processed = query.@Processed,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEmailMessage(unitOfWork, @emailMessage);

				return @emailMessage;
			}
		}
		
		public IEnumerable<EmailMessage> FindEmailMessages(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage>> callback)
		{
			IEnumerable<EmailMessage> @emailMessages;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@emailMessages = this.FindEmailMessages(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @emailMessages.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@emailMessages = this.FindEmailMessages(UnitOfWork.Current, callback);
				
				return @emailMessages; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<EmailMessage> FindEmailMessages(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage>> callback)
		{
			IEnumerable<EmailMessage> @emailMessages;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@EmailMessages);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@emailMessages = queryable.Select(lo => new EmailMessage()
												 {
													// map results to POCOs from L2S objects
													@EmailMessageId = lo.@EmailMessageId,
													@From = lo.@From,
													@Sender = lo.@Sender,
													@ReplyTo = lo.@ReplyTo,
													@To = lo.@To,
													@CarbonCopy = lo.@CarbonCopy,
													@BlindCarbonCopy = lo.@BlindCarbonCopy,
													@Subject = lo.@Subject,
													@IsBodyHtml = lo.@IsBodyHtml,
													@Body = lo.@Body,
													@Processed = lo.@Processed,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (EmailMessage @emailMessage in @emailMessages)
				{
					this.OnSelectEmailMessage(unitOfWork, @emailMessage);
					
					yield return @emailMessage; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveEmailMessage(EmailMessage @emailMessage)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveEmailMessage(unitOfWork, @emailMessage);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveEmailMessage(UnitOfWork.Current, @emailMessage);
			
			return retval;
		}
		
		public bool SaveEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@emailMessage == null)
				throw new ArgumentNullException("emailMessage");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @emailMessage.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEmailMessage(unitOfWork, @emailMessage);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage();

					wrapper.Disposable.EmailMessages.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEmailMessage(unitOfWork, @emailMessage);
					
					query = wrapper.Disposable.EmailMessages.SingleOrDefault(lo => lo.@EmailMessageId == @emailMessage.@EmailMessageId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@EmailMessageId = @emailMessage.@EmailMessageId;
				query.@From = @emailMessage.@From;
				query.@Sender = @emailMessage.@Sender;
				query.@ReplyTo = @emailMessage.@ReplyTo;
				query.@To = @emailMessage.@To;
				query.@CarbonCopy = @emailMessage.@CarbonCopy;
				query.@BlindCarbonCopy = @emailMessage.@BlindCarbonCopy;
				query.@Subject = @emailMessage.@Subject;
				query.@IsBodyHtml = @emailMessage.@IsBodyHtml;
				query.@Body = @emailMessage.@Body;
				query.@Processed = @emailMessage.@Processed;
				query.@SortOrder = @emailMessage.@SortOrder;
				query.@CreationTimestamp = @emailMessage.@CreationTimestamp;
				query.@ModificationTimestamp = @emailMessage.@ModificationTimestamp;
				query.@CreationUserId = @emailMessage.@CreationUserId;
				query.@ModificationUserId = @emailMessage.@ModificationUserId;
				query.@LogicalDelete = @emailMessage.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEmailMessage(unitOfWork, @emailMessage);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@emailMessage.@EmailMessageId = query.@EmailMessageId;
				@emailMessage.@From = query.@From;
				@emailMessage.@Sender = query.@Sender;
				@emailMessage.@ReplyTo = query.@ReplyTo;
				@emailMessage.@To = query.@To;
				@emailMessage.@CarbonCopy = query.@CarbonCopy;
				@emailMessage.@BlindCarbonCopy = query.@BlindCarbonCopy;
				@emailMessage.@Subject = query.@Subject;
				@emailMessage.@IsBodyHtml = query.@IsBodyHtml;
				@emailMessage.@Body = query.@Body;
				@emailMessage.@Processed = query.@Processed;
				@emailMessage.@SortOrder = query.@SortOrder;
				@emailMessage.@CreationTimestamp = query.@CreationTimestamp;
				@emailMessage.@ModificationTimestamp = query.@ModificationTimestamp;
				@emailMessage.@CreationUserId = query.@CreationUserId;
				@emailMessage.@ModificationUserId = query.@ModificationUserId;
				@emailMessage.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEmailMessage(unitOfWork, @emailMessage);
				}
				else
				{
					this.OnPostUpdateEmailMessage(unitOfWork, @emailMessage);
				}

				return true;
			}
		}
		
		public bool DiscardEmailMessage(EmailMessage @emailMessage)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardEmailMessage(unitOfWork, @emailMessage);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardEmailMessage(UnitOfWork.Current, @emailMessage);
			
			return retval;
		}
		
		public bool DiscardEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@emailMessage == null)
				throw new ArgumentNullException("emailMessage");
				
			if (@emailMessage.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEmailMessage(unitOfWork, @emailMessage);
				
				query = wrapper.Disposable.@EmailMessages.SingleOrDefault(lo => lo.@EmailMessageId == @emailMessage.@EmailMessageId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@EmailMessages.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEmailMessage(unitOfWork, @emailMessage);
					
					return false;
				}

				this.OnPostDeleteEmailMessage(unitOfWork, @emailMessage);
				
				@emailMessage.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);
		
		partial void OnPostInsertEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);
		
		partial void OnPreUpdateEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);
		
		partial void OnPostUpdateEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);
		
		partial void OnSaveConflictEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);
		
		partial void OnDiscardConflictEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);
				
		partial void OnPreDeleteEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);
		
		partial void OnPostDeleteEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);
		
		partial void OnSelectEmailMessage(IUnitOfWork unitOfWork, EmailMessage @emailMessage);		

		public EmailAttachment LoadEmailAttachment(Int32 @emailMessageId)
		{
			EmailAttachment @emailAttachment;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@emailAttachment = this.LoadEmailAttachment(unitOfWork, @emailMessageId);

					unitOfWork.Complete();
				}
			}
			else
				@emailAttachment = this.LoadEmailAttachment(UnitOfWork.Current, @emailMessageId);
			
			return @emailAttachment;
		}
		
		public EmailAttachment LoadEmailAttachment(IUnitOfWork unitOfWork, Int32 @emailMessageId)
		{			
			EmailAttachment @emailAttachment;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.EmailAttachments.SingleOrDefault(lo => lo.@EmailMessageId == @emailMessageId);

				if ((object)query == null)
					return null; // does not exist
				
				@emailAttachment = new EmailAttachment()
								{
									// map result to POCO from L2S object
									@EmailAttachmentId = query.@EmailAttachmentId,
									@EmailMessageId = query.@EmailMessageId,
									@FileName = query.@FileName,
									@FileSize = query.@FileSize,
									@MimeType = query.@MimeType,
									@AttachmentBits = (object)query.AttachmentBits != null ? query.@AttachmentBits.ToArray() : null,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEmailAttachment(unitOfWork, @emailAttachment);

				return @emailAttachment;
			}
		}
		
		public IEnumerable<EmailAttachment> FindEmailAttachments(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment>> callback)
		{
			IEnumerable<EmailAttachment> @emailAttachments;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@emailAttachments = this.FindEmailAttachments(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @emailAttachments.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@emailAttachments = this.FindEmailAttachments(UnitOfWork.Current, callback);
				
				return @emailAttachments; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<EmailAttachment> FindEmailAttachments(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment>> callback)
		{
			IEnumerable<EmailAttachment> @emailAttachments;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@EmailAttachments);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@emailAttachments = queryable.Select(lo => new EmailAttachment()
												 {
													// map results to POCOs from L2S objects
													@EmailAttachmentId = lo.@EmailAttachmentId,
													@EmailMessageId = lo.@EmailMessageId,
													@FileName = lo.@FileName,
													@FileSize = lo.@FileSize,
													@MimeType = lo.@MimeType,
													@AttachmentBits = (object)lo.@AttachmentBits != null ? lo.@AttachmentBits.ToArray() : null,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (EmailAttachment @emailAttachment in @emailAttachments)
				{
					this.OnSelectEmailAttachment(unitOfWork, @emailAttachment);
					
					yield return @emailAttachment; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveEmailAttachment(EmailAttachment @emailAttachment)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveEmailAttachment(unitOfWork, @emailAttachment);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveEmailAttachment(UnitOfWork.Current, @emailAttachment);
			
			return retval;
		}
		
		public bool SaveEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@emailAttachment == null)
				throw new ArgumentNullException("emailAttachment");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @emailAttachment.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEmailAttachment(unitOfWork, @emailAttachment);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment();

					wrapper.Disposable.EmailAttachments.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEmailAttachment(unitOfWork, @emailAttachment);
					
					query = wrapper.Disposable.EmailAttachments.SingleOrDefault(lo => lo.@EmailMessageId == @emailAttachment.@EmailMessageId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@EmailAttachmentId = @emailAttachment.@EmailAttachmentId;
				query.@EmailMessageId = @emailAttachment.@EmailMessageId;
				query.@FileName = @emailAttachment.@FileName;
				query.@FileSize = @emailAttachment.@FileSize;
				query.@MimeType = @emailAttachment.@MimeType;
				query.@AttachmentBits = @emailAttachment.@AttachmentBits;
				query.@SortOrder = @emailAttachment.@SortOrder;
				query.@CreationTimestamp = @emailAttachment.@CreationTimestamp;
				query.@ModificationTimestamp = @emailAttachment.@ModificationTimestamp;
				query.@CreationUserId = @emailAttachment.@CreationUserId;
				query.@ModificationUserId = @emailAttachment.@ModificationUserId;
				query.@LogicalDelete = @emailAttachment.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEmailAttachment(unitOfWork, @emailAttachment);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@emailAttachment.@EmailAttachmentId = query.@EmailAttachmentId;
				@emailAttachment.@EmailMessageId = query.@EmailMessageId;
				@emailAttachment.@FileName = query.@FileName;
				@emailAttachment.@FileSize = query.@FileSize;
				@emailAttachment.@MimeType = query.@MimeType;
				@emailAttachment.@AttachmentBits = (object)query.@AttachmentBits != null ? query.@AttachmentBits.ToArray() : null;
				@emailAttachment.@SortOrder = query.@SortOrder;
				@emailAttachment.@CreationTimestamp = query.@CreationTimestamp;
				@emailAttachment.@ModificationTimestamp = query.@ModificationTimestamp;
				@emailAttachment.@CreationUserId = query.@CreationUserId;
				@emailAttachment.@ModificationUserId = query.@ModificationUserId;
				@emailAttachment.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEmailAttachment(unitOfWork, @emailAttachment);
				}
				else
				{
					this.OnPostUpdateEmailAttachment(unitOfWork, @emailAttachment);
				}

				return true;
			}
		}
		
		public bool DiscardEmailAttachment(EmailAttachment @emailAttachment)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardEmailAttachment(unitOfWork, @emailAttachment);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardEmailAttachment(UnitOfWork.Current, @emailAttachment);
			
			return retval;
		}
		
		public bool DiscardEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@emailAttachment == null)
				throw new ArgumentNullException("emailAttachment");
				
			if (@emailAttachment.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEmailAttachment(unitOfWork, @emailAttachment);
				
				query = wrapper.Disposable.@EmailAttachments.SingleOrDefault(lo => lo.@EmailMessageId == @emailAttachment.@EmailMessageId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@EmailAttachments.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEmailAttachment(unitOfWork, @emailAttachment);
					
					return false;
				}

				this.OnPostDeleteEmailAttachment(unitOfWork, @emailAttachment);
				
				@emailAttachment.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);
		
		partial void OnPostInsertEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);
		
		partial void OnPreUpdateEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);
		
		partial void OnPostUpdateEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);
		
		partial void OnSaveConflictEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);
		
		partial void OnDiscardConflictEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);
				
		partial void OnPreDeleteEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);
		
		partial void OnPostDeleteEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);
		
		partial void OnSelectEmailAttachment(IUnitOfWork unitOfWork, EmailAttachment @emailAttachment);		

		public TableWithPrimaryKeyAsIdentity LoadTableWithPrimaryKeyAsIdentity(Int32 @pkId)
		{
			TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithPrimaryKeyAsIdentity = this.LoadTableWithPrimaryKeyAsIdentity(unitOfWork, @pkId);

					unitOfWork.Complete();
				}
			}
			else
				@tableWithPrimaryKeyAsIdentity = this.LoadTableWithPrimaryKeyAsIdentity(UnitOfWork.Current, @pkId);
			
			return @tableWithPrimaryKeyAsIdentity;
		}
		
		public TableWithPrimaryKeyAsIdentity LoadTableWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, Int32 @pkId)
		{			
			TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TableWithPrimaryKeyAsIdentities.SingleOrDefault(lo => lo.@PkId == @pkId);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithPrimaryKeyAsIdentity = new TableWithPrimaryKeyAsIdentity()
								{
									// map result to POCO from L2S object
									@PkId = query.@PkId,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithPrimaryKeyAsIdentity(unitOfWork, @tableWithPrimaryKeyAsIdentity);

				return @tableWithPrimaryKeyAsIdentity;
			}
		}
		
		public IEnumerable<TableWithPrimaryKeyAsIdentity> FindTableWithPrimaryKeyAsIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity>> callback)
		{
			IEnumerable<TableWithPrimaryKeyAsIdentity> @tableWithPrimaryKeyAsIdentities;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithPrimaryKeyAsIdentities = this.FindTableWithPrimaryKeyAsIdentities(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @tableWithPrimaryKeyAsIdentities.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@tableWithPrimaryKeyAsIdentities = this.FindTableWithPrimaryKeyAsIdentities(UnitOfWork.Current, callback);
				
				return @tableWithPrimaryKeyAsIdentities; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<TableWithPrimaryKeyAsIdentity> FindTableWithPrimaryKeyAsIdentities(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity>> callback)
		{
			IEnumerable<TableWithPrimaryKeyAsIdentity> @tableWithPrimaryKeyAsIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TableWithPrimaryKeyAsIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tableWithPrimaryKeyAsIdentities = queryable.Select(lo => new TableWithPrimaryKeyAsIdentity()
												 {
													// map results to POCOs from L2S objects
													@PkId = lo.@PkId,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity in @tableWithPrimaryKeyAsIdentities)
				{
					this.OnSelectTableWithPrimaryKeyAsIdentity(unitOfWork, @tableWithPrimaryKeyAsIdentity);
					
					yield return @tableWithPrimaryKeyAsIdentity; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTableWithPrimaryKeyAsIdentity(TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTableWithPrimaryKeyAsIdentity(unitOfWork, @tableWithPrimaryKeyAsIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTableWithPrimaryKeyAsIdentity(UnitOfWork.Current, @tableWithPrimaryKeyAsIdentity);
			
			return retval;
		}
		
		public bool SaveTableWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithPrimaryKeyAsIdentity == null)
				throw new ArgumentNullException("tableWithPrimaryKeyAsIdentity");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithPrimaryKeyAsIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithPrimaryKeyAsIdentity(unitOfWork, @tableWithPrimaryKeyAsIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity();

					wrapper.Disposable.TableWithPrimaryKeyAsIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithPrimaryKeyAsIdentity(unitOfWork, @tableWithPrimaryKeyAsIdentity);
					
					query = wrapper.Disposable.TableWithPrimaryKeyAsIdentities.SingleOrDefault(lo => lo.@PkId == @tableWithPrimaryKeyAsIdentity.@PkId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@PkId = @tableWithPrimaryKeyAsIdentity.@PkId;
				query.@Data01 = @tableWithPrimaryKeyAsIdentity.@Data01;
				query.@Data02 = @tableWithPrimaryKeyAsIdentity.@Data02;
				query.@Data03 = @tableWithPrimaryKeyAsIdentity.@Data03;
				query.@Data04 = @tableWithPrimaryKeyAsIdentity.@Data04;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithPrimaryKeyAsIdentity(unitOfWork, @tableWithPrimaryKeyAsIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithPrimaryKeyAsIdentity.@PkId = query.@PkId;
				@tableWithPrimaryKeyAsIdentity.@Data01 = query.@Data01;
				@tableWithPrimaryKeyAsIdentity.@Data02 = query.@Data02;
				@tableWithPrimaryKeyAsIdentity.@Data03 = query.@Data03;
				@tableWithPrimaryKeyAsIdentity.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithPrimaryKeyAsIdentity(unitOfWork, @tableWithPrimaryKeyAsIdentity);
				}
				else
				{
					this.OnPostUpdateTableWithPrimaryKeyAsIdentity(unitOfWork, @tableWithPrimaryKeyAsIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithPrimaryKeyAsIdentity(TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTableWithPrimaryKeyAsIdentity(unitOfWork, @tableWithPrimaryKeyAsIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTableWithPrimaryKeyAsIdentity(UnitOfWork.Current, @tableWithPrimaryKeyAsIdentity);
			
			return retval;
		}
		
		public bool DiscardTableWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithPrimaryKeyAsIdentity == null)
				throw new ArgumentNullException("tableWithPrimaryKeyAsIdentity");
				
			if (@tableWithPrimaryKeyAsIdentity.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithPrimaryKeyAsIdentity(unitOfWork, @tableWithPrimaryKeyAsIdentity);
				
				query = wrapper.Disposable.@TableWithPrimaryKeyAsIdentities.SingleOrDefault(lo => lo.@PkId == @tableWithPrimaryKeyAsIdentity.@PkId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TableWithPrimaryKeyAsIdentities.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithPrimaryKeyAsIdentity(unitOfWork, @tableWithPrimaryKeyAsIdentity);
					
					return false;
				}

				this.OnPostDeleteTableWithPrimaryKeyAsIdentity(unitOfWork, @tableWithPrimaryKeyAsIdentity);
				
				@tableWithPrimaryKeyAsIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);
		
		partial void OnPostInsertTableWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);
		
		partial void OnPreUpdateTableWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);
		
		partial void OnPostUpdateTableWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);
		
		partial void OnSaveConflictTableWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);
		
		partial void OnDiscardConflictTableWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);
				
		partial void OnPreDeleteTableWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);
		
		partial void OnPostDeleteTableWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);
		
		partial void OnSelectTableWithPrimaryKeyAsIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);		

		public TableWithPrimaryKeyAsDefault LoadTableWithPrimaryKeyAsDefault(Guid @pkDf)
		{
			TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithPrimaryKeyAsDefault = this.LoadTableWithPrimaryKeyAsDefault(unitOfWork, @pkDf);

					unitOfWork.Complete();
				}
			}
			else
				@tableWithPrimaryKeyAsDefault = this.LoadTableWithPrimaryKeyAsDefault(UnitOfWork.Current, @pkDf);
			
			return @tableWithPrimaryKeyAsDefault;
		}
		
		public TableWithPrimaryKeyAsDefault LoadTableWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, Guid @pkDf)
		{			
			TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TableWithPrimaryKeyAsDefaults.SingleOrDefault(lo => lo.@PkDf == @pkDf);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithPrimaryKeyAsDefault = new TableWithPrimaryKeyAsDefault()
								{
									// map result to POCO from L2S object
									@PkDf = query.@PkDf,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithPrimaryKeyAsDefault(unitOfWork, @tableWithPrimaryKeyAsDefault);

				return @tableWithPrimaryKeyAsDefault;
			}
		}
		
		public IEnumerable<TableWithPrimaryKeyAsDefault> FindTableWithPrimaryKeyAsDefaults(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault>> callback)
		{
			IEnumerable<TableWithPrimaryKeyAsDefault> @tableWithPrimaryKeyAsDefaults;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithPrimaryKeyAsDefaults = this.FindTableWithPrimaryKeyAsDefaults(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @tableWithPrimaryKeyAsDefaults.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@tableWithPrimaryKeyAsDefaults = this.FindTableWithPrimaryKeyAsDefaults(UnitOfWork.Current, callback);
				
				return @tableWithPrimaryKeyAsDefaults; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<TableWithPrimaryKeyAsDefault> FindTableWithPrimaryKeyAsDefaults(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault>> callback)
		{
			IEnumerable<TableWithPrimaryKeyAsDefault> @tableWithPrimaryKeyAsDefaults;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TableWithPrimaryKeyAsDefaults);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tableWithPrimaryKeyAsDefaults = queryable.Select(lo => new TableWithPrimaryKeyAsDefault()
												 {
													// map results to POCOs from L2S objects
													@PkDf = lo.@PkDf,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault in @tableWithPrimaryKeyAsDefaults)
				{
					this.OnSelectTableWithPrimaryKeyAsDefault(unitOfWork, @tableWithPrimaryKeyAsDefault);
					
					yield return @tableWithPrimaryKeyAsDefault; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTableWithPrimaryKeyAsDefault(TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTableWithPrimaryKeyAsDefault(unitOfWork, @tableWithPrimaryKeyAsDefault);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTableWithPrimaryKeyAsDefault(UnitOfWork.Current, @tableWithPrimaryKeyAsDefault);
			
			return retval;
		}
		
		public bool SaveTableWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithPrimaryKeyAsDefault == null)
				throw new ArgumentNullException("tableWithPrimaryKeyAsDefault");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithPrimaryKeyAsDefault.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithPrimaryKeyAsDefault(unitOfWork, @tableWithPrimaryKeyAsDefault);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault();

					wrapper.Disposable.TableWithPrimaryKeyAsDefaults.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithPrimaryKeyAsDefault(unitOfWork, @tableWithPrimaryKeyAsDefault);
					
					query = wrapper.Disposable.TableWithPrimaryKeyAsDefaults.SingleOrDefault(lo => lo.@PkDf == @tableWithPrimaryKeyAsDefault.@PkDf);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@PkDf = @tableWithPrimaryKeyAsDefault.@PkDf;
				query.@Data01 = @tableWithPrimaryKeyAsDefault.@Data01;
				query.@Data02 = @tableWithPrimaryKeyAsDefault.@Data02;
				query.@Data03 = @tableWithPrimaryKeyAsDefault.@Data03;
				query.@Data04 = @tableWithPrimaryKeyAsDefault.@Data04;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithPrimaryKeyAsDefault(unitOfWork, @tableWithPrimaryKeyAsDefault);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithPrimaryKeyAsDefault.@PkDf = query.@PkDf;
				@tableWithPrimaryKeyAsDefault.@Data01 = query.@Data01;
				@tableWithPrimaryKeyAsDefault.@Data02 = query.@Data02;
				@tableWithPrimaryKeyAsDefault.@Data03 = query.@Data03;
				@tableWithPrimaryKeyAsDefault.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithPrimaryKeyAsDefault(unitOfWork, @tableWithPrimaryKeyAsDefault);
				}
				else
				{
					this.OnPostUpdateTableWithPrimaryKeyAsDefault(unitOfWork, @tableWithPrimaryKeyAsDefault);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithPrimaryKeyAsDefault(TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTableWithPrimaryKeyAsDefault(unitOfWork, @tableWithPrimaryKeyAsDefault);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTableWithPrimaryKeyAsDefault(UnitOfWork.Current, @tableWithPrimaryKeyAsDefault);
			
			return retval;
		}
		
		public bool DiscardTableWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithPrimaryKeyAsDefault == null)
				throw new ArgumentNullException("tableWithPrimaryKeyAsDefault");
				
			if (@tableWithPrimaryKeyAsDefault.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithPrimaryKeyAsDefault(unitOfWork, @tableWithPrimaryKeyAsDefault);
				
				query = wrapper.Disposable.@TableWithPrimaryKeyAsDefaults.SingleOrDefault(lo => lo.@PkDf == @tableWithPrimaryKeyAsDefault.@PkDf);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TableWithPrimaryKeyAsDefaults.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithPrimaryKeyAsDefault(unitOfWork, @tableWithPrimaryKeyAsDefault);
					
					return false;
				}

				this.OnPostDeleteTableWithPrimaryKeyAsDefault(unitOfWork, @tableWithPrimaryKeyAsDefault);
				
				@tableWithPrimaryKeyAsDefault.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);
		
		partial void OnPostInsertTableWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);
		
		partial void OnPreUpdateTableWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);
		
		partial void OnPostUpdateTableWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);
		
		partial void OnSaveConflictTableWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);
		
		partial void OnDiscardConflictTableWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);
				
		partial void OnPreDeleteTableWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);
		
		partial void OnPostDeleteTableWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);
		
		partial void OnSelectTableWithPrimaryKeyAsDefault(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);		

		public TableWithPrimaryKeyWithDiffIdentity LoadTableWithPrimaryKeyWithDiffIdentity(Int32 @pk)
		{
			TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithPrimaryKeyWithDiffIdentity = this.LoadTableWithPrimaryKeyWithDiffIdentity(unitOfWork, @pk);

					unitOfWork.Complete();
				}
			}
			else
				@tableWithPrimaryKeyWithDiffIdentity = this.LoadTableWithPrimaryKeyWithDiffIdentity(UnitOfWork.Current, @pk);
			
			return @tableWithPrimaryKeyWithDiffIdentity;
		}
		
		public TableWithPrimaryKeyWithDiffIdentity LoadTableWithPrimaryKeyWithDiffIdentity(IUnitOfWork unitOfWork, Int32 @pk)
		{			
			TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TableWithPrimaryKeyWithDiffIdentities.SingleOrDefault(lo => lo.@Pk == @pk);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithPrimaryKeyWithDiffIdentity = new TableWithPrimaryKeyWithDiffIdentity()
								{
									// map result to POCO from L2S object
									@Pk = query.@Pk,
									@Id = query.@Id,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithPrimaryKeyWithDiffIdentity(unitOfWork, @tableWithPrimaryKeyWithDiffIdentity);

				return @tableWithPrimaryKeyWithDiffIdentity;
			}
		}
		
		public IEnumerable<TableWithPrimaryKeyWithDiffIdentity> FindTableWithPrimaryKeyWithDiffIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity>> callback)
		{
			IEnumerable<TableWithPrimaryKeyWithDiffIdentity> @tableWithPrimaryKeyWithDiffIdentities;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithPrimaryKeyWithDiffIdentities = this.FindTableWithPrimaryKeyWithDiffIdentities(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @tableWithPrimaryKeyWithDiffIdentities.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@tableWithPrimaryKeyWithDiffIdentities = this.FindTableWithPrimaryKeyWithDiffIdentities(UnitOfWork.Current, callback);
				
				return @tableWithPrimaryKeyWithDiffIdentities; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<TableWithPrimaryKeyWithDiffIdentity> FindTableWithPrimaryKeyWithDiffIdentities(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity>> callback)
		{
			IEnumerable<TableWithPrimaryKeyWithDiffIdentity> @tableWithPrimaryKeyWithDiffIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TableWithPrimaryKeyWithDiffIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tableWithPrimaryKeyWithDiffIdentities = queryable.Select(lo => new TableWithPrimaryKeyWithDiffIdentity()
												 {
													// map results to POCOs from L2S objects
													@Pk = lo.@Pk,
													@Id = lo.@Id,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity in @tableWithPrimaryKeyWithDiffIdentities)
				{
					this.OnSelectTableWithPrimaryKeyWithDiffIdentity(unitOfWork, @tableWithPrimaryKeyWithDiffIdentity);
					
					yield return @tableWithPrimaryKeyWithDiffIdentity; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTableWithPrimaryKeyWithDiffIdentity(TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTableWithPrimaryKeyWithDiffIdentity(unitOfWork, @tableWithPrimaryKeyWithDiffIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTableWithPrimaryKeyWithDiffIdentity(UnitOfWork.Current, @tableWithPrimaryKeyWithDiffIdentity);
			
			return retval;
		}
		
		public bool SaveTableWithPrimaryKeyWithDiffIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithPrimaryKeyWithDiffIdentity == null)
				throw new ArgumentNullException("tableWithPrimaryKeyWithDiffIdentity");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithPrimaryKeyWithDiffIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithPrimaryKeyWithDiffIdentity(unitOfWork, @tableWithPrimaryKeyWithDiffIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity();

					wrapper.Disposable.TableWithPrimaryKeyWithDiffIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithPrimaryKeyWithDiffIdentity(unitOfWork, @tableWithPrimaryKeyWithDiffIdentity);
					
					query = wrapper.Disposable.TableWithPrimaryKeyWithDiffIdentities.SingleOrDefault(lo => lo.@Pk == @tableWithPrimaryKeyWithDiffIdentity.@Pk);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@Pk = @tableWithPrimaryKeyWithDiffIdentity.@Pk;
				query.@Id = @tableWithPrimaryKeyWithDiffIdentity.@Id;
				query.@Data01 = @tableWithPrimaryKeyWithDiffIdentity.@Data01;
				query.@Data02 = @tableWithPrimaryKeyWithDiffIdentity.@Data02;
				query.@Data03 = @tableWithPrimaryKeyWithDiffIdentity.@Data03;
				query.@Data04 = @tableWithPrimaryKeyWithDiffIdentity.@Data04;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithPrimaryKeyWithDiffIdentity(unitOfWork, @tableWithPrimaryKeyWithDiffIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithPrimaryKeyWithDiffIdentity.@Pk = query.@Pk;
				@tableWithPrimaryKeyWithDiffIdentity.@Id = query.@Id;
				@tableWithPrimaryKeyWithDiffIdentity.@Data01 = query.@Data01;
				@tableWithPrimaryKeyWithDiffIdentity.@Data02 = query.@Data02;
				@tableWithPrimaryKeyWithDiffIdentity.@Data03 = query.@Data03;
				@tableWithPrimaryKeyWithDiffIdentity.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithPrimaryKeyWithDiffIdentity(unitOfWork, @tableWithPrimaryKeyWithDiffIdentity);
				}
				else
				{
					this.OnPostUpdateTableWithPrimaryKeyWithDiffIdentity(unitOfWork, @tableWithPrimaryKeyWithDiffIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithPrimaryKeyWithDiffIdentity(TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTableWithPrimaryKeyWithDiffIdentity(unitOfWork, @tableWithPrimaryKeyWithDiffIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTableWithPrimaryKeyWithDiffIdentity(UnitOfWork.Current, @tableWithPrimaryKeyWithDiffIdentity);
			
			return retval;
		}
		
		public bool DiscardTableWithPrimaryKeyWithDiffIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithPrimaryKeyWithDiffIdentity == null)
				throw new ArgumentNullException("tableWithPrimaryKeyWithDiffIdentity");
				
			if (@tableWithPrimaryKeyWithDiffIdentity.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithPrimaryKeyWithDiffIdentity(unitOfWork, @tableWithPrimaryKeyWithDiffIdentity);
				
				query = wrapper.Disposable.@TableWithPrimaryKeyWithDiffIdentities.SingleOrDefault(lo => lo.@Pk == @tableWithPrimaryKeyWithDiffIdentity.@Pk);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TableWithPrimaryKeyWithDiffIdentities.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithPrimaryKeyWithDiffIdentity(unitOfWork, @tableWithPrimaryKeyWithDiffIdentity);
					
					return false;
				}

				this.OnPostDeleteTableWithPrimaryKeyWithDiffIdentity(unitOfWork, @tableWithPrimaryKeyWithDiffIdentity);
				
				@tableWithPrimaryKeyWithDiffIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithPrimaryKeyWithDiffIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);
		
		partial void OnPostInsertTableWithPrimaryKeyWithDiffIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);
		
		partial void OnPreUpdateTableWithPrimaryKeyWithDiffIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);
		
		partial void OnPostUpdateTableWithPrimaryKeyWithDiffIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);
		
		partial void OnSaveConflictTableWithPrimaryKeyWithDiffIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);
		
		partial void OnDiscardConflictTableWithPrimaryKeyWithDiffIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);
				
		partial void OnPreDeleteTableWithPrimaryKeyWithDiffIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);
		
		partial void OnPostDeleteTableWithPrimaryKeyWithDiffIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);
		
		partial void OnSelectTableWithPrimaryKeyWithDiffIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);		

		public TableNoPrimaryKeyWithIdentity LoadTableNoPrimaryKeyWithIdentity(Int32 @id, Boolean @data01, DateTime @data02, Int32 @data03, String @data04)
		{
			TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableNoPrimaryKeyWithIdentity = this.LoadTableNoPrimaryKeyWithIdentity(unitOfWork, @id, @data01, @data02, @data03, @data04);

					unitOfWork.Complete();
				}
			}
			else
				@tableNoPrimaryKeyWithIdentity = this.LoadTableNoPrimaryKeyWithIdentity(UnitOfWork.Current, @id, @data01, @data02, @data03, @data04);
			
			return @tableNoPrimaryKeyWithIdentity;
		}
		
		public TableNoPrimaryKeyWithIdentity LoadTableNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, Int32 @id, Boolean @data01, DateTime @data02, Int32 @data03, String @data04)
		{			
			TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TableNoPrimaryKeyWithIdentities.SingleOrDefault(lo => lo.@Id == @id && lo.@Data01 == @data01 && lo.@Data02 == @data02 && lo.@Data03 == @data03 && lo.@Data04 == @data04);

				if ((object)query == null)
					return null; // does not exist
				
				@tableNoPrimaryKeyWithIdentity = new TableNoPrimaryKeyWithIdentity()
								{
									// map result to POCO from L2S object
									@Id = query.@Id,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableNoPrimaryKeyWithIdentity(unitOfWork, @tableNoPrimaryKeyWithIdentity);

				return @tableNoPrimaryKeyWithIdentity;
			}
		}
		
		public IEnumerable<TableNoPrimaryKeyWithIdentity> FindTableNoPrimaryKeyWithIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity>> callback)
		{
			IEnumerable<TableNoPrimaryKeyWithIdentity> @tableNoPrimaryKeyWithIdentities;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableNoPrimaryKeyWithIdentities = this.FindTableNoPrimaryKeyWithIdentities(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @tableNoPrimaryKeyWithIdentities.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@tableNoPrimaryKeyWithIdentities = this.FindTableNoPrimaryKeyWithIdentities(UnitOfWork.Current, callback);
				
				return @tableNoPrimaryKeyWithIdentities; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<TableNoPrimaryKeyWithIdentity> FindTableNoPrimaryKeyWithIdentities(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity>> callback)
		{
			IEnumerable<TableNoPrimaryKeyWithIdentity> @tableNoPrimaryKeyWithIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TableNoPrimaryKeyWithIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tableNoPrimaryKeyWithIdentities = queryable.Select(lo => new TableNoPrimaryKeyWithIdentity()
												 {
													// map results to POCOs from L2S objects
													@Id = lo.@Id,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity in @tableNoPrimaryKeyWithIdentities)
				{
					this.OnSelectTableNoPrimaryKeyWithIdentity(unitOfWork, @tableNoPrimaryKeyWithIdentity);
					
					yield return @tableNoPrimaryKeyWithIdentity; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTableNoPrimaryKeyWithIdentity(TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTableNoPrimaryKeyWithIdentity(unitOfWork, @tableNoPrimaryKeyWithIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTableNoPrimaryKeyWithIdentity(UnitOfWork.Current, @tableNoPrimaryKeyWithIdentity);
			
			return retval;
		}
		
		public bool SaveTableNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableNoPrimaryKeyWithIdentity == null)
				throw new ArgumentNullException("tableNoPrimaryKeyWithIdentity");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableNoPrimaryKeyWithIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableNoPrimaryKeyWithIdentity(unitOfWork, @tableNoPrimaryKeyWithIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity();

					wrapper.Disposable.TableNoPrimaryKeyWithIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableNoPrimaryKeyWithIdentity(unitOfWork, @tableNoPrimaryKeyWithIdentity);
					
					query = wrapper.Disposable.TableNoPrimaryKeyWithIdentities.SingleOrDefault(lo => lo.@Id == @tableNoPrimaryKeyWithIdentity.@Id && lo.@Data01 == @tableNoPrimaryKeyWithIdentity.@Data01 && lo.@Data02 == @tableNoPrimaryKeyWithIdentity.@Data02 && lo.@Data03 == @tableNoPrimaryKeyWithIdentity.@Data03 && lo.@Data04 == @tableNoPrimaryKeyWithIdentity.@Data04);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@Id = @tableNoPrimaryKeyWithIdentity.@Id;
				query.@Data01 = @tableNoPrimaryKeyWithIdentity.@Data01;
				query.@Data02 = @tableNoPrimaryKeyWithIdentity.@Data02;
				query.@Data03 = @tableNoPrimaryKeyWithIdentity.@Data03;
				query.@Data04 = @tableNoPrimaryKeyWithIdentity.@Data04;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableNoPrimaryKeyWithIdentity(unitOfWork, @tableNoPrimaryKeyWithIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableNoPrimaryKeyWithIdentity.@Id = query.@Id;
				@tableNoPrimaryKeyWithIdentity.@Data01 = query.@Data01;
				@tableNoPrimaryKeyWithIdentity.@Data02 = query.@Data02;
				@tableNoPrimaryKeyWithIdentity.@Data03 = query.@Data03;
				@tableNoPrimaryKeyWithIdentity.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableNoPrimaryKeyWithIdentity(unitOfWork, @tableNoPrimaryKeyWithIdentity);
				}
				else
				{
					this.OnPostUpdateTableNoPrimaryKeyWithIdentity(unitOfWork, @tableNoPrimaryKeyWithIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTableNoPrimaryKeyWithIdentity(TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTableNoPrimaryKeyWithIdentity(unitOfWork, @tableNoPrimaryKeyWithIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTableNoPrimaryKeyWithIdentity(UnitOfWork.Current, @tableNoPrimaryKeyWithIdentity);
			
			return retval;
		}
		
		public bool DiscardTableNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableNoPrimaryKeyWithIdentity == null)
				throw new ArgumentNullException("tableNoPrimaryKeyWithIdentity");
				
			if (@tableNoPrimaryKeyWithIdentity.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableNoPrimaryKeyWithIdentity(unitOfWork, @tableNoPrimaryKeyWithIdentity);
				
				query = wrapper.Disposable.@TableNoPrimaryKeyWithIdentities.SingleOrDefault(lo => lo.@Id == @tableNoPrimaryKeyWithIdentity.@Id && lo.@Data01 == @tableNoPrimaryKeyWithIdentity.@Data01 && lo.@Data02 == @tableNoPrimaryKeyWithIdentity.@Data02 && lo.@Data03 == @tableNoPrimaryKeyWithIdentity.@Data03 && lo.@Data04 == @tableNoPrimaryKeyWithIdentity.@Data04);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TableNoPrimaryKeyWithIdentities.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableNoPrimaryKeyWithIdentity(unitOfWork, @tableNoPrimaryKeyWithIdentity);
					
					return false;
				}

				this.OnPostDeleteTableNoPrimaryKeyWithIdentity(unitOfWork, @tableNoPrimaryKeyWithIdentity);
				
				@tableNoPrimaryKeyWithIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);
		
		partial void OnPostInsertTableNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);
		
		partial void OnPreUpdateTableNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);
		
		partial void OnPostUpdateTableNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);
		
		partial void OnSaveConflictTableNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);
		
		partial void OnDiscardConflictTableNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);
				
		partial void OnPreDeleteTableNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);
		
		partial void OnPostDeleteTableNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);
		
		partial void OnSelectTableNoPrimaryKeyWithIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);		

		public TableWithPrimaryKeyNoIdentity LoadTableWithPrimaryKeyNoIdentity(Int32 @pk)
		{
			TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithPrimaryKeyNoIdentity = this.LoadTableWithPrimaryKeyNoIdentity(unitOfWork, @pk);

					unitOfWork.Complete();
				}
			}
			else
				@tableWithPrimaryKeyNoIdentity = this.LoadTableWithPrimaryKeyNoIdentity(UnitOfWork.Current, @pk);
			
			return @tableWithPrimaryKeyNoIdentity;
		}
		
		public TableWithPrimaryKeyNoIdentity LoadTableWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, Int32 @pk)
		{			
			TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TableWithPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Pk == @pk);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithPrimaryKeyNoIdentity = new TableWithPrimaryKeyNoIdentity()
								{
									// map result to POCO from L2S object
									@Pk = query.@Pk,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithPrimaryKeyNoIdentity(unitOfWork, @tableWithPrimaryKeyNoIdentity);

				return @tableWithPrimaryKeyNoIdentity;
			}
		}
		
		public IEnumerable<TableWithPrimaryKeyNoIdentity> FindTableWithPrimaryKeyNoIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity>> callback)
		{
			IEnumerable<TableWithPrimaryKeyNoIdentity> @tableWithPrimaryKeyNoIdentities;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithPrimaryKeyNoIdentities = this.FindTableWithPrimaryKeyNoIdentities(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @tableWithPrimaryKeyNoIdentities.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@tableWithPrimaryKeyNoIdentities = this.FindTableWithPrimaryKeyNoIdentities(UnitOfWork.Current, callback);
				
				return @tableWithPrimaryKeyNoIdentities; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<TableWithPrimaryKeyNoIdentity> FindTableWithPrimaryKeyNoIdentities(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity>> callback)
		{
			IEnumerable<TableWithPrimaryKeyNoIdentity> @tableWithPrimaryKeyNoIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TableWithPrimaryKeyNoIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tableWithPrimaryKeyNoIdentities = queryable.Select(lo => new TableWithPrimaryKeyNoIdentity()
												 {
													// map results to POCOs from L2S objects
													@Pk = lo.@Pk,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity in @tableWithPrimaryKeyNoIdentities)
				{
					this.OnSelectTableWithPrimaryKeyNoIdentity(unitOfWork, @tableWithPrimaryKeyNoIdentity);
					
					yield return @tableWithPrimaryKeyNoIdentity; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTableWithPrimaryKeyNoIdentity(TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTableWithPrimaryKeyNoIdentity(unitOfWork, @tableWithPrimaryKeyNoIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTableWithPrimaryKeyNoIdentity(UnitOfWork.Current, @tableWithPrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool SaveTableWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithPrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tableWithPrimaryKeyNoIdentity");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithPrimaryKeyNoIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithPrimaryKeyNoIdentity(unitOfWork, @tableWithPrimaryKeyNoIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity();

					wrapper.Disposable.TableWithPrimaryKeyNoIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithPrimaryKeyNoIdentity(unitOfWork, @tableWithPrimaryKeyNoIdentity);
					
					query = wrapper.Disposable.TableWithPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Pk == @tableWithPrimaryKeyNoIdentity.@Pk);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@Pk = @tableWithPrimaryKeyNoIdentity.@Pk;
				query.@Data01 = @tableWithPrimaryKeyNoIdentity.@Data01;
				query.@Data02 = @tableWithPrimaryKeyNoIdentity.@Data02;
				query.@Data03 = @tableWithPrimaryKeyNoIdentity.@Data03;
				query.@Data04 = @tableWithPrimaryKeyNoIdentity.@Data04;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithPrimaryKeyNoIdentity(unitOfWork, @tableWithPrimaryKeyNoIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithPrimaryKeyNoIdentity.@Pk = query.@Pk;
				@tableWithPrimaryKeyNoIdentity.@Data01 = query.@Data01;
				@tableWithPrimaryKeyNoIdentity.@Data02 = query.@Data02;
				@tableWithPrimaryKeyNoIdentity.@Data03 = query.@Data03;
				@tableWithPrimaryKeyNoIdentity.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithPrimaryKeyNoIdentity(unitOfWork, @tableWithPrimaryKeyNoIdentity);
				}
				else
				{
					this.OnPostUpdateTableWithPrimaryKeyNoIdentity(unitOfWork, @tableWithPrimaryKeyNoIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithPrimaryKeyNoIdentity(TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTableWithPrimaryKeyNoIdentity(unitOfWork, @tableWithPrimaryKeyNoIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTableWithPrimaryKeyNoIdentity(UnitOfWork.Current, @tableWithPrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool DiscardTableWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithPrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tableWithPrimaryKeyNoIdentity");
				
			if (@tableWithPrimaryKeyNoIdentity.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithPrimaryKeyNoIdentity(unitOfWork, @tableWithPrimaryKeyNoIdentity);
				
				query = wrapper.Disposable.@TableWithPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Pk == @tableWithPrimaryKeyNoIdentity.@Pk);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TableWithPrimaryKeyNoIdentities.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithPrimaryKeyNoIdentity(unitOfWork, @tableWithPrimaryKeyNoIdentity);
					
					return false;
				}

				this.OnPostDeleteTableWithPrimaryKeyNoIdentity(unitOfWork, @tableWithPrimaryKeyNoIdentity);
				
				@tableWithPrimaryKeyNoIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);
		
		partial void OnPostInsertTableWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);
		
		partial void OnPreUpdateTableWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);
		
		partial void OnPostUpdateTableWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);
		
		partial void OnSaveConflictTableWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);
		
		partial void OnDiscardConflictTableWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);
				
		partial void OnPreDeleteTableWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);
		
		partial void OnPostDeleteTableWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);
		
		partial void OnSelectTableWithPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);		

		public TableWithCompositePrimaryKeyNoIdentity LoadTableWithCompositePrimaryKeyNoIdentity(Int32 @pk0, Int32 @pk1, Int32 @pk2, Int32 @pk3)
		{
			TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithCompositePrimaryKeyNoIdentity = this.LoadTableWithCompositePrimaryKeyNoIdentity(unitOfWork, @pk0, @pk1, @pk2, @pk3);

					unitOfWork.Complete();
				}
			}
			else
				@tableWithCompositePrimaryKeyNoIdentity = this.LoadTableWithCompositePrimaryKeyNoIdentity(UnitOfWork.Current, @pk0, @pk1, @pk2, @pk3);
			
			return @tableWithCompositePrimaryKeyNoIdentity;
		}
		
		public TableWithCompositePrimaryKeyNoIdentity LoadTableWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, Int32 @pk0, Int32 @pk1, Int32 @pk2, Int32 @pk3)
		{			
			TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TableWithCompositePrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Pk0 == @pk0 && lo.@Pk1 == @pk1 && lo.@Pk2 == @pk2 && lo.@Pk3 == @pk3);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithCompositePrimaryKeyNoIdentity = new TableWithCompositePrimaryKeyNoIdentity()
								{
									// map result to POCO from L2S object
									@Pk0 = query.@Pk0,
									@Pk1 = query.@Pk1,
									@Pk2 = query.@Pk2,
									@Pk3 = query.@Pk3,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithCompositePrimaryKeyNoIdentity(unitOfWork, @tableWithCompositePrimaryKeyNoIdentity);

				return @tableWithCompositePrimaryKeyNoIdentity;
			}
		}
		
		public IEnumerable<TableWithCompositePrimaryKeyNoIdentity> FindTableWithCompositePrimaryKeyNoIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity>> callback)
		{
			IEnumerable<TableWithCompositePrimaryKeyNoIdentity> @tableWithCompositePrimaryKeyNoIdentities;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithCompositePrimaryKeyNoIdentities = this.FindTableWithCompositePrimaryKeyNoIdentities(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @tableWithCompositePrimaryKeyNoIdentities.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@tableWithCompositePrimaryKeyNoIdentities = this.FindTableWithCompositePrimaryKeyNoIdentities(UnitOfWork.Current, callback);
				
				return @tableWithCompositePrimaryKeyNoIdentities; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<TableWithCompositePrimaryKeyNoIdentity> FindTableWithCompositePrimaryKeyNoIdentities(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity>> callback)
		{
			IEnumerable<TableWithCompositePrimaryKeyNoIdentity> @tableWithCompositePrimaryKeyNoIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TableWithCompositePrimaryKeyNoIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tableWithCompositePrimaryKeyNoIdentities = queryable.Select(lo => new TableWithCompositePrimaryKeyNoIdentity()
												 {
													// map results to POCOs from L2S objects
													@Pk0 = lo.@Pk0,
													@Pk1 = lo.@Pk1,
													@Pk2 = lo.@Pk2,
													@Pk3 = lo.@Pk3,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity in @tableWithCompositePrimaryKeyNoIdentities)
				{
					this.OnSelectTableWithCompositePrimaryKeyNoIdentity(unitOfWork, @tableWithCompositePrimaryKeyNoIdentity);
					
					yield return @tableWithCompositePrimaryKeyNoIdentity; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTableWithCompositePrimaryKeyNoIdentity(TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTableWithCompositePrimaryKeyNoIdentity(unitOfWork, @tableWithCompositePrimaryKeyNoIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTableWithCompositePrimaryKeyNoIdentity(UnitOfWork.Current, @tableWithCompositePrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool SaveTableWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithCompositePrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tableWithCompositePrimaryKeyNoIdentity");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithCompositePrimaryKeyNoIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithCompositePrimaryKeyNoIdentity(unitOfWork, @tableWithCompositePrimaryKeyNoIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity();

					wrapper.Disposable.TableWithCompositePrimaryKeyNoIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithCompositePrimaryKeyNoIdentity(unitOfWork, @tableWithCompositePrimaryKeyNoIdentity);
					
					query = wrapper.Disposable.TableWithCompositePrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Pk0 == @tableWithCompositePrimaryKeyNoIdentity.@Pk0 && lo.@Pk1 == @tableWithCompositePrimaryKeyNoIdentity.@Pk1 && lo.@Pk2 == @tableWithCompositePrimaryKeyNoIdentity.@Pk2 && lo.@Pk3 == @tableWithCompositePrimaryKeyNoIdentity.@Pk3);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@Pk0 = @tableWithCompositePrimaryKeyNoIdentity.@Pk0;
				query.@Pk1 = @tableWithCompositePrimaryKeyNoIdentity.@Pk1;
				query.@Pk2 = @tableWithCompositePrimaryKeyNoIdentity.@Pk2;
				query.@Pk3 = @tableWithCompositePrimaryKeyNoIdentity.@Pk3;
				query.@Data01 = @tableWithCompositePrimaryKeyNoIdentity.@Data01;
				query.@Data02 = @tableWithCompositePrimaryKeyNoIdentity.@Data02;
				query.@Data03 = @tableWithCompositePrimaryKeyNoIdentity.@Data03;
				query.@Data04 = @tableWithCompositePrimaryKeyNoIdentity.@Data04;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithCompositePrimaryKeyNoIdentity(unitOfWork, @tableWithCompositePrimaryKeyNoIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithCompositePrimaryKeyNoIdentity.@Pk0 = query.@Pk0;
				@tableWithCompositePrimaryKeyNoIdentity.@Pk1 = query.@Pk1;
				@tableWithCompositePrimaryKeyNoIdentity.@Pk2 = query.@Pk2;
				@tableWithCompositePrimaryKeyNoIdentity.@Pk3 = query.@Pk3;
				@tableWithCompositePrimaryKeyNoIdentity.@Data01 = query.@Data01;
				@tableWithCompositePrimaryKeyNoIdentity.@Data02 = query.@Data02;
				@tableWithCompositePrimaryKeyNoIdentity.@Data03 = query.@Data03;
				@tableWithCompositePrimaryKeyNoIdentity.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithCompositePrimaryKeyNoIdentity(unitOfWork, @tableWithCompositePrimaryKeyNoIdentity);
				}
				else
				{
					this.OnPostUpdateTableWithCompositePrimaryKeyNoIdentity(unitOfWork, @tableWithCompositePrimaryKeyNoIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithCompositePrimaryKeyNoIdentity(TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTableWithCompositePrimaryKeyNoIdentity(unitOfWork, @tableWithCompositePrimaryKeyNoIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTableWithCompositePrimaryKeyNoIdentity(UnitOfWork.Current, @tableWithCompositePrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool DiscardTableWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithCompositePrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tableWithCompositePrimaryKeyNoIdentity");
				
			if (@tableWithCompositePrimaryKeyNoIdentity.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithCompositePrimaryKeyNoIdentity(unitOfWork, @tableWithCompositePrimaryKeyNoIdentity);
				
				query = wrapper.Disposable.@TableWithCompositePrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Pk0 == @tableWithCompositePrimaryKeyNoIdentity.@Pk0 && lo.@Pk1 == @tableWithCompositePrimaryKeyNoIdentity.@Pk1 && lo.@Pk2 == @tableWithCompositePrimaryKeyNoIdentity.@Pk2 && lo.@Pk3 == @tableWithCompositePrimaryKeyNoIdentity.@Pk3);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TableWithCompositePrimaryKeyNoIdentities.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithCompositePrimaryKeyNoIdentity(unitOfWork, @tableWithCompositePrimaryKeyNoIdentity);
					
					return false;
				}

				this.OnPostDeleteTableWithCompositePrimaryKeyNoIdentity(unitOfWork, @tableWithCompositePrimaryKeyNoIdentity);
				
				@tableWithCompositePrimaryKeyNoIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);
		
		partial void OnPostInsertTableWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);
		
		partial void OnPreUpdateTableWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);
		
		partial void OnPostUpdateTableWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);
		
		partial void OnSaveConflictTableWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);
		
		partial void OnDiscardConflictTableWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);
				
		partial void OnPreDeleteTableWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);
		
		partial void OnPostDeleteTableWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);
		
		partial void OnSelectTableWithCompositePrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);		

		public TableNoPrimaryKeyNoIdentity LoadTableNoPrimaryKeyNoIdentity(Int32 @value, Boolean @data01, DateTime @data02, Int32 @data03, String @data04)
		{
			TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableNoPrimaryKeyNoIdentity = this.LoadTableNoPrimaryKeyNoIdentity(unitOfWork, @value, @data01, @data02, @data03, @data04);

					unitOfWork.Complete();
				}
			}
			else
				@tableNoPrimaryKeyNoIdentity = this.LoadTableNoPrimaryKeyNoIdentity(UnitOfWork.Current, @value, @data01, @data02, @data03, @data04);
			
			return @tableNoPrimaryKeyNoIdentity;
		}
		
		public TableNoPrimaryKeyNoIdentity LoadTableNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, Int32 @value, Boolean @data01, DateTime @data02, Int32 @data03, String @data04)
		{			
			TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TableNoPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Value == @value && lo.@Data01 == @data01 && lo.@Data02 == @data02 && lo.@Data03 == @data03 && lo.@Data04 == @data04);

				if ((object)query == null)
					return null; // does not exist
				
				@tableNoPrimaryKeyNoIdentity = new TableNoPrimaryKeyNoIdentity()
								{
									// map result to POCO from L2S object
									@Value = query.@Value,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableNoPrimaryKeyNoIdentity(unitOfWork, @tableNoPrimaryKeyNoIdentity);

				return @tableNoPrimaryKeyNoIdentity;
			}
		}
		
		public IEnumerable<TableNoPrimaryKeyNoIdentity> FindTableNoPrimaryKeyNoIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity>> callback)
		{
			IEnumerable<TableNoPrimaryKeyNoIdentity> @tableNoPrimaryKeyNoIdentities;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableNoPrimaryKeyNoIdentities = this.FindTableNoPrimaryKeyNoIdentities(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @tableNoPrimaryKeyNoIdentities.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@tableNoPrimaryKeyNoIdentities = this.FindTableNoPrimaryKeyNoIdentities(UnitOfWork.Current, callback);
				
				return @tableNoPrimaryKeyNoIdentities; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<TableNoPrimaryKeyNoIdentity> FindTableNoPrimaryKeyNoIdentities(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity>> callback)
		{
			IEnumerable<TableNoPrimaryKeyNoIdentity> @tableNoPrimaryKeyNoIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TableNoPrimaryKeyNoIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tableNoPrimaryKeyNoIdentities = queryable.Select(lo => new TableNoPrimaryKeyNoIdentity()
												 {
													// map results to POCOs from L2S objects
													@Value = lo.@Value,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity in @tableNoPrimaryKeyNoIdentities)
				{
					this.OnSelectTableNoPrimaryKeyNoIdentity(unitOfWork, @tableNoPrimaryKeyNoIdentity);
					
					yield return @tableNoPrimaryKeyNoIdentity; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTableNoPrimaryKeyNoIdentity(TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTableNoPrimaryKeyNoIdentity(unitOfWork, @tableNoPrimaryKeyNoIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTableNoPrimaryKeyNoIdentity(UnitOfWork.Current, @tableNoPrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool SaveTableNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableNoPrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tableNoPrimaryKeyNoIdentity");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableNoPrimaryKeyNoIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableNoPrimaryKeyNoIdentity(unitOfWork, @tableNoPrimaryKeyNoIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity();

					wrapper.Disposable.TableNoPrimaryKeyNoIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableNoPrimaryKeyNoIdentity(unitOfWork, @tableNoPrimaryKeyNoIdentity);
					
					query = wrapper.Disposable.TableNoPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Value == @tableNoPrimaryKeyNoIdentity.@Value && lo.@Data01 == @tableNoPrimaryKeyNoIdentity.@Data01 && lo.@Data02 == @tableNoPrimaryKeyNoIdentity.@Data02 && lo.@Data03 == @tableNoPrimaryKeyNoIdentity.@Data03 && lo.@Data04 == @tableNoPrimaryKeyNoIdentity.@Data04);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@Value = @tableNoPrimaryKeyNoIdentity.@Value;
				query.@Data01 = @tableNoPrimaryKeyNoIdentity.@Data01;
				query.@Data02 = @tableNoPrimaryKeyNoIdentity.@Data02;
				query.@Data03 = @tableNoPrimaryKeyNoIdentity.@Data03;
				query.@Data04 = @tableNoPrimaryKeyNoIdentity.@Data04;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableNoPrimaryKeyNoIdentity(unitOfWork, @tableNoPrimaryKeyNoIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableNoPrimaryKeyNoIdentity.@Value = query.@Value;
				@tableNoPrimaryKeyNoIdentity.@Data01 = query.@Data01;
				@tableNoPrimaryKeyNoIdentity.@Data02 = query.@Data02;
				@tableNoPrimaryKeyNoIdentity.@Data03 = query.@Data03;
				@tableNoPrimaryKeyNoIdentity.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableNoPrimaryKeyNoIdentity(unitOfWork, @tableNoPrimaryKeyNoIdentity);
				}
				else
				{
					this.OnPostUpdateTableNoPrimaryKeyNoIdentity(unitOfWork, @tableNoPrimaryKeyNoIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTableNoPrimaryKeyNoIdentity(TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTableNoPrimaryKeyNoIdentity(unitOfWork, @tableNoPrimaryKeyNoIdentity);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTableNoPrimaryKeyNoIdentity(UnitOfWork.Current, @tableNoPrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool DiscardTableNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableNoPrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tableNoPrimaryKeyNoIdentity");
				
			if (@tableNoPrimaryKeyNoIdentity.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableNoPrimaryKeyNoIdentity(unitOfWork, @tableNoPrimaryKeyNoIdentity);
				
				query = wrapper.Disposable.@TableNoPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Value == @tableNoPrimaryKeyNoIdentity.@Value && lo.@Data01 == @tableNoPrimaryKeyNoIdentity.@Data01 && lo.@Data02 == @tableNoPrimaryKeyNoIdentity.@Data02 && lo.@Data03 == @tableNoPrimaryKeyNoIdentity.@Data03 && lo.@Data04 == @tableNoPrimaryKeyNoIdentity.@Data04);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TableNoPrimaryKeyNoIdentities.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableNoPrimaryKeyNoIdentity(unitOfWork, @tableNoPrimaryKeyNoIdentity);
					
					return false;
				}

				this.OnPostDeleteTableNoPrimaryKeyNoIdentity(unitOfWork, @tableNoPrimaryKeyNoIdentity);
				
				@tableNoPrimaryKeyNoIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);
		
		partial void OnPostInsertTableNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);
		
		partial void OnPreUpdateTableNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);
		
		partial void OnPostUpdateTableNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);
		
		partial void OnSaveConflictTableNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);
		
		partial void OnDiscardConflictTableNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);
				
		partial void OnPreDeleteTableNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);
		
		partial void OnPostDeleteTableNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);
		
		partial void OnSelectTableNoPrimaryKeyNoIdentity(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);		

		public TableTypeTest LoadTableTypeTest(Int32 @pkId)
		{
			TableTypeTest @tableTypeTest;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableTypeTest = this.LoadTableTypeTest(unitOfWork, @pkId);

					unitOfWork.Complete();
				}
			}
			else
				@tableTypeTest = this.LoadTableTypeTest(UnitOfWork.Current, @pkId);
			
			return @tableTypeTest;
		}
		
		public TableTypeTest LoadTableTypeTest(IUnitOfWork unitOfWork, Int32 @pkId)
		{			
			TableTypeTest @tableTypeTest;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TableTypeTests.SingleOrDefault(lo => lo.@PkId == @pkId);

				if ((object)query == null)
					return null; // does not exist
				
				@tableTypeTest = new TableTypeTest()
								{
									// map result to POCO from L2S object
									@PkId = query.@PkId,
									@Data00 = query.@Data00,
									@Data01 = (object)query.Data01 != null ? query.@Data01.ToArray() : null,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data05 = query.@Data05,
									@Data06 = query.@Data06,
									@Data07 = query.@Data07,
									@Data08 = query.@Data08,
									@Data09 = query.@Data09,
									@Data10 = query.@Data10,
									@Data12 = (object)query.Data12 != null ? query.@Data12.ToArray() : null,
									@Data13 = query.@Data13,
									@Data14 = query.@Data14,
									@Data15 = query.@Data15,
									@Data16 = query.@Data16,
									@Data17 = query.@Data17,
									@Data18 = query.@Data18,
									@Data19 = query.@Data19,
									@Data20 = query.@Data20,
									@Data21 = query.@Data21,
									@Data22 = query.@Data22,
									@Data26 = query.@Data26,
									@Data27 = query.@Data27,
									@Data29 = query.@Data29,
									@Data30 = query.@Data30,
									@Data31 = (object)query.Data31 != null ? query.@Data31.ToArray() : null,
									@Data32 = query.@Data32
								};	

				this.OnSelectTableTypeTest(unitOfWork, @tableTypeTest);

				return @tableTypeTest;
			}
		}
		
		public IEnumerable<TableTypeTest> FindTableTypeTests(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest>> callback)
		{
			IEnumerable<TableTypeTest> @tableTypeTests;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableTypeTests = this.FindTableTypeTests(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @tableTypeTests.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@tableTypeTests = this.FindTableTypeTests(UnitOfWork.Current, callback);
				
				return @tableTypeTests; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<TableTypeTest> FindTableTypeTests(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest>> callback)
		{
			IEnumerable<TableTypeTest> @tableTypeTests;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TableTypeTests);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tableTypeTests = queryable.Select(lo => new TableTypeTest()
												 {
													// map results to POCOs from L2S objects
													@PkId = lo.@PkId,
													@Data00 = lo.@Data00,
													@Data01 = (object)lo.@Data01 != null ? lo.@Data01.ToArray() : null,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data05 = lo.@Data05,
													@Data06 = lo.@Data06,
													@Data07 = lo.@Data07,
													@Data08 = lo.@Data08,
													@Data09 = lo.@Data09,
													@Data10 = lo.@Data10,
													@Data12 = (object)lo.@Data12 != null ? lo.@Data12.ToArray() : null,
													@Data13 = lo.@Data13,
													@Data14 = lo.@Data14,
													@Data15 = lo.@Data15,
													@Data16 = lo.@Data16,
													@Data17 = lo.@Data17,
													@Data18 = lo.@Data18,
													@Data19 = lo.@Data19,
													@Data20 = lo.@Data20,
													@Data21 = lo.@Data21,
													@Data22 = lo.@Data22,
													@Data26 = lo.@Data26,
													@Data27 = lo.@Data27,
													@Data29 = lo.@Data29,
													@Data30 = lo.@Data30,
													@Data31 = (object)lo.@Data31 != null ? lo.@Data31.ToArray() : null,
													@Data32 = lo.@Data32
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TableTypeTest @tableTypeTest in @tableTypeTests)
				{
					this.OnSelectTableTypeTest(unitOfWork, @tableTypeTest);
					
					yield return @tableTypeTest; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTableTypeTest(TableTypeTest @tableTypeTest)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTableTypeTest(unitOfWork, @tableTypeTest);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTableTypeTest(UnitOfWork.Current, @tableTypeTest);
			
			return retval;
		}
		
		public bool SaveTableTypeTest(IUnitOfWork unitOfWork, TableTypeTest @tableTypeTest)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableTypeTest == null)
				throw new ArgumentNullException("tableTypeTest");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableTypeTest.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableTypeTest(unitOfWork, @tableTypeTest);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest();

					wrapper.Disposable.TableTypeTests.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableTypeTest(unitOfWork, @tableTypeTest);
					
					query = wrapper.Disposable.TableTypeTests.SingleOrDefault(lo => lo.@PkId == @tableTypeTest.@PkId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@PkId = @tableTypeTest.@PkId;
				query.@Data00 = @tableTypeTest.@Data00;
				query.@Data01 = @tableTypeTest.@Data01;
				query.@Data02 = @tableTypeTest.@Data02;
				query.@Data03 = @tableTypeTest.@Data03;
				query.@Data05 = @tableTypeTest.@Data05;
				query.@Data06 = @tableTypeTest.@Data06;
				query.@Data07 = @tableTypeTest.@Data07;
				query.@Data08 = @tableTypeTest.@Data08;
				query.@Data09 = @tableTypeTest.@Data09;
				query.@Data10 = @tableTypeTest.@Data10;
				if ((object)@tableTypeTest.@Data12 != null) // prevent implicit conversion of null -> exception
					query.@Data12 = @tableTypeTest.@Data12;
				query.@Data13 = @tableTypeTest.@Data13;
				query.@Data14 = @tableTypeTest.@Data14;
				query.@Data15 = @tableTypeTest.@Data15;
				query.@Data16 = @tableTypeTest.@Data16;
				query.@Data17 = @tableTypeTest.@Data17;
				query.@Data18 = @tableTypeTest.@Data18;
				query.@Data19 = @tableTypeTest.@Data19;
				query.@Data20 = @tableTypeTest.@Data20;
				query.@Data21 = @tableTypeTest.@Data21;
				query.@Data22 = @tableTypeTest.@Data22;
				query.@Data26 = @tableTypeTest.@Data26;
				query.@Data27 = @tableTypeTest.@Data27;
				query.@Data29 = @tableTypeTest.@Data29;
				query.@Data30 = @tableTypeTest.@Data30;
				query.@Data31 = @tableTypeTest.@Data31;
				query.@Data32 = @tableTypeTest.@Data32;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableTypeTest(unitOfWork, @tableTypeTest);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableTypeTest.@PkId = query.@PkId;
				@tableTypeTest.@Data00 = query.@Data00;
				@tableTypeTest.@Data01 = (object)query.@Data01 != null ? query.@Data01.ToArray() : null;
				@tableTypeTest.@Data02 = query.@Data02;
				@tableTypeTest.@Data03 = query.@Data03;
				@tableTypeTest.@Data05 = query.@Data05;
				@tableTypeTest.@Data06 = query.@Data06;
				@tableTypeTest.@Data07 = query.@Data07;
				@tableTypeTest.@Data08 = query.@Data08;
				@tableTypeTest.@Data09 = query.@Data09;
				@tableTypeTest.@Data10 = query.@Data10;
				@tableTypeTest.@Data12 = (object)query.@Data12 != null ? query.@Data12.ToArray() : null;
				@tableTypeTest.@Data13 = query.@Data13;
				@tableTypeTest.@Data14 = query.@Data14;
				@tableTypeTest.@Data15 = query.@Data15;
				@tableTypeTest.@Data16 = query.@Data16;
				@tableTypeTest.@Data17 = query.@Data17;
				@tableTypeTest.@Data18 = query.@Data18;
				@tableTypeTest.@Data19 = query.@Data19;
				@tableTypeTest.@Data20 = query.@Data20;
				@tableTypeTest.@Data21 = query.@Data21;
				@tableTypeTest.@Data22 = query.@Data22;
				@tableTypeTest.@Data26 = query.@Data26;
				@tableTypeTest.@Data27 = query.@Data27;
				@tableTypeTest.@Data29 = query.@Data29;
				@tableTypeTest.@Data30 = query.@Data30;
				@tableTypeTest.@Data31 = (object)query.@Data31 != null ? query.@Data31.ToArray() : null;
				@tableTypeTest.@Data32 = query.@Data32;
						
				if (wasNew)
				{
					this.OnPostInsertTableTypeTest(unitOfWork, @tableTypeTest);
				}
				else
				{
					this.OnPostUpdateTableTypeTest(unitOfWork, @tableTypeTest);
				}

				return true;
			}
		}
		
		public bool DiscardTableTypeTest(TableTypeTest @tableTypeTest)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTableTypeTest(unitOfWork, @tableTypeTest);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTableTypeTest(UnitOfWork.Current, @tableTypeTest);
			
			return retval;
		}
		
		public bool DiscardTableTypeTest(IUnitOfWork unitOfWork, TableTypeTest @tableTypeTest)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableTypeTest == null)
				throw new ArgumentNullException("tableTypeTest");
				
			if (@tableTypeTest.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableTypeTest(unitOfWork, @tableTypeTest);
				
				query = wrapper.Disposable.@TableTypeTests.SingleOrDefault(lo => lo.@PkId == @tableTypeTest.@PkId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TableTypeTests.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableTypeTest(unitOfWork, @tableTypeTest);
					
					return false;
				}

				this.OnPostDeleteTableTypeTest(unitOfWork, @tableTypeTest);
				
				@tableTypeTest.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableTypeTest(IUnitOfWork unitOfWork, TableTypeTest @tableTypeTest);
		
		partial void OnPostInsertTableTypeTest(IUnitOfWork unitOfWork, TableTypeTest @tableTypeTest);
		
		partial void OnPreUpdateTableTypeTest(IUnitOfWork unitOfWork, TableTypeTest @tableTypeTest);
		
		partial void OnPostUpdateTableTypeTest(IUnitOfWork unitOfWork, TableTypeTest @tableTypeTest);
		
		partial void OnSaveConflictTableTypeTest(IUnitOfWork unitOfWork, TableTypeTest @tableTypeTest);
		
		partial void OnDiscardConflictTableTypeTest(IUnitOfWork unitOfWork, TableTypeTest @tableTypeTest);
				
		partial void OnPreDeleteTableTypeTest(IUnitOfWork unitOfWork, TableTypeTest @tableTypeTest);
		
		partial void OnPostDeleteTableTypeTest(IUnitOfWork unitOfWork, TableTypeTest @tableTypeTest);
		
		partial void OnSelectTableTypeTest(IUnitOfWork unitOfWork, TableTypeTest @tableTypeTest);		

		public EventLogAggregation LoadEventLogAggregation(DateTime @minCreationTimestamp, DateTime @maxModificationTimestamp)
		{
			EventLogAggregation @eventLogAggregation;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@eventLogAggregation = this.LoadEventLogAggregation(unitOfWork, @minCreationTimestamp, @maxModificationTimestamp);

					unitOfWork.Complete();
				}
			}
			else
				@eventLogAggregation = this.LoadEventLogAggregation(UnitOfWork.Current, @minCreationTimestamp, @maxModificationTimestamp);
			
			return @eventLogAggregation;
		}
		
		public EventLogAggregation LoadEventLogAggregation(IUnitOfWork unitOfWork, DateTime @minCreationTimestamp, DateTime @maxModificationTimestamp)
		{			
			EventLogAggregation @eventLogAggregation;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.EventLogAggregations.SingleOrDefault(lo => lo.@MinCreationTimestamp == @minCreationTimestamp && lo.@MaxModificationTimestamp == @maxModificationTimestamp);

				if ((object)query == null)
					return null; // does not exist
				
				@eventLogAggregation = new EventLogAggregation()
								{
									// map result to POCO from L2S object
									@MinCreationTimestamp = query.@MinCreationTimestamp,
									@MaxModificationTimestamp = query.@MaxModificationTimestamp
								};	

				this.OnSelectEventLogAggregation(unitOfWork, @eventLogAggregation);

				return @eventLogAggregation;
			}
		}
		
		public IEnumerable<EventLogAggregation> FindEventLogAggregations(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation>> callback)
		{
			IEnumerable<EventLogAggregation> @eventLogAggregations;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@eventLogAggregations = this.FindEventLogAggregations(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @eventLogAggregations.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@eventLogAggregations = this.FindEventLogAggregations(UnitOfWork.Current, callback);
				
				return @eventLogAggregations; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<EventLogAggregation> FindEventLogAggregations(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation>> callback)
		{
			IEnumerable<EventLogAggregation> @eventLogAggregations;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@EventLogAggregations);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@eventLogAggregations = queryable.Select(lo => new EventLogAggregation()
												 {
													// map results to POCOs from L2S objects
													@MinCreationTimestamp = lo.@MinCreationTimestamp,
													@MaxModificationTimestamp = lo.@MaxModificationTimestamp
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (EventLogAggregation @eventLogAggregation in @eventLogAggregations)
				{
					this.OnSelectEventLogAggregation(unitOfWork, @eventLogAggregation);
					
					yield return @eventLogAggregation; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveEventLogAggregation(EventLogAggregation @eventLogAggregation)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveEventLogAggregation(unitOfWork, @eventLogAggregation);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveEventLogAggregation(UnitOfWork.Current, @eventLogAggregation);
			
			return retval;
		}
		
		public bool SaveEventLogAggregation(IUnitOfWork unitOfWork, EventLogAggregation @eventLogAggregation)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@eventLogAggregation == null)
				throw new ArgumentNullException("eventLogAggregation");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @eventLogAggregation.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEventLogAggregation(unitOfWork, @eventLogAggregation);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation();

					wrapper.Disposable.EventLogAggregations.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEventLogAggregation(unitOfWork, @eventLogAggregation);
					
					query = wrapper.Disposable.EventLogAggregations.SingleOrDefault(lo => lo.@MinCreationTimestamp == @eventLogAggregation.@MinCreationTimestamp && lo.@MaxModificationTimestamp == @eventLogAggregation.@MaxModificationTimestamp);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@MinCreationTimestamp = @eventLogAggregation.@MinCreationTimestamp;
				query.@MaxModificationTimestamp = @eventLogAggregation.@MaxModificationTimestamp;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEventLogAggregation(unitOfWork, @eventLogAggregation);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@eventLogAggregation.@MinCreationTimestamp = query.@MinCreationTimestamp;
				@eventLogAggregation.@MaxModificationTimestamp = query.@MaxModificationTimestamp;
						
				if (wasNew)
				{
					this.OnPostInsertEventLogAggregation(unitOfWork, @eventLogAggregation);
				}
				else
				{
					this.OnPostUpdateEventLogAggregation(unitOfWork, @eventLogAggregation);
				}

				return true;
			}
		}
		
		public bool DiscardEventLogAggregation(EventLogAggregation @eventLogAggregation)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardEventLogAggregation(unitOfWork, @eventLogAggregation);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardEventLogAggregation(UnitOfWork.Current, @eventLogAggregation);
			
			return retval;
		}
		
		public bool DiscardEventLogAggregation(IUnitOfWork unitOfWork, EventLogAggregation @eventLogAggregation)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@eventLogAggregation == null)
				throw new ArgumentNullException("eventLogAggregation");
				
			if (@eventLogAggregation.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEventLogAggregation(unitOfWork, @eventLogAggregation);
				
				query = wrapper.Disposable.@EventLogAggregations.SingleOrDefault(lo => lo.@MinCreationTimestamp == @eventLogAggregation.@MinCreationTimestamp && lo.@MaxModificationTimestamp == @eventLogAggregation.@MaxModificationTimestamp);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@EventLogAggregations.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEventLogAggregation(unitOfWork, @eventLogAggregation);
					
					return false;
				}

				this.OnPostDeleteEventLogAggregation(unitOfWork, @eventLogAggregation);
				
				@eventLogAggregation.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEventLogAggregation(IUnitOfWork unitOfWork, EventLogAggregation @eventLogAggregation);
		
		partial void OnPostInsertEventLogAggregation(IUnitOfWork unitOfWork, EventLogAggregation @eventLogAggregation);
		
		partial void OnPreUpdateEventLogAggregation(IUnitOfWork unitOfWork, EventLogAggregation @eventLogAggregation);
		
		partial void OnPostUpdateEventLogAggregation(IUnitOfWork unitOfWork, EventLogAggregation @eventLogAggregation);
		
		partial void OnSaveConflictEventLogAggregation(IUnitOfWork unitOfWork, EventLogAggregation @eventLogAggregation);
		
		partial void OnDiscardConflictEventLogAggregation(IUnitOfWork unitOfWork, EventLogAggregation @eventLogAggregation);
				
		partial void OnPreDeleteEventLogAggregation(IUnitOfWork unitOfWork, EventLogAggregation @eventLogAggregation);
		
		partial void OnPostDeleteEventLogAggregation(IUnitOfWork unitOfWork, EventLogAggregation @eventLogAggregation);
		
		partial void OnSelectEventLogAggregation(IUnitOfWork unitOfWork, EventLogAggregation @eventLogAggregation);		
		public UserHistory LoadUserHistory(Int64 @timestampId, Int32 @userId)
		{
			UserHistory @userHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@userHistory = this.LoadUserHistory(unitOfWork, @timestampId, @userId);

					unitOfWork.Complete();
				}
			}
			else
				@userHistory = this.LoadUserHistory(UnitOfWork.Current, @timestampId, @userId);
			
			return @userHistory;
		}
		
		public UserHistory LoadUserHistory(IUnitOfWork unitOfWork, Int64 @timestampId, Int32 @userId)
		{			
			UserHistory @userHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.UserHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.UserHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@UserId == @userId);

				if ((object)query == null)
					return null; // does not exist
				
				@userHistory = new UserHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@UserId = query.@UserId,
									@EmailAddress = query.@EmailAddress,
									@UserName = query.@UserName,
									@SaltValue = query.@SaltValue,
									@PasswordHash = query.@PasswordHash,
									@Question = query.@Question,
									@AnswerHash = query.@AnswerHash,
									@LastLoginSuccessTimestamp = query.@LastLoginSuccessTimestamp,
									@LastLoginFailureTimestamp = query.@LastLoginFailureTimestamp,
									@FailedLoginCount = query.@FailedLoginCount,
									@MustChangePassword = query.@MustChangePassword,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectUserHistory(unitOfWork, @userHistory);

				return @userHistory;
			}
		}
		
		public IEnumerable<UserHistory> FindUserHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.UserHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.UserHistory>> callback)
		{
			IEnumerable<UserHistory> @userHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@userHistories = this.FindUserHistories(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @userHistories.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@userHistories = this.FindUserHistories(UnitOfWork.Current, callback);
				
				return @userHistories; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<UserHistory> FindUserHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.UserHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.UserHistory>> callback)
		{
			IEnumerable<UserHistory> @userHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.UserHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@UserHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@userHistories = queryable.Select(lo => new UserHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@UserId = lo.@UserId,
													@EmailAddress = lo.@EmailAddress,
													@UserName = lo.@UserName,
													@SaltValue = lo.@SaltValue,
													@PasswordHash = lo.@PasswordHash,
													@Question = lo.@Question,
													@AnswerHash = lo.@AnswerHash,
													@LastLoginSuccessTimestamp = lo.@LastLoginSuccessTimestamp,
													@LastLoginFailureTimestamp = lo.@LastLoginFailureTimestamp,
													@FailedLoginCount = lo.@FailedLoginCount,
													@MustChangePassword = lo.@MustChangePassword,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (UserHistory @userHistory in @userHistories)
				{
					this.OnSelectUserHistory(unitOfWork, @userHistory);
					
					yield return @userHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveUserHistory(UserHistory @userHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveUserHistory(unitOfWork, @userHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveUserHistory(UnitOfWork.Current, @userHistory);
			
			return retval;
		}
		
		public bool SaveUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.UserHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@userHistory == null)
				throw new ArgumentNullException("userHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @userHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertUserHistory(unitOfWork, @userHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.UserHistory();

					wrapper.Disposable.UserHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateUserHistory(unitOfWork, @userHistory);
					
					query = wrapper.Disposable.UserHistories.SingleOrDefault(lo => lo.@TimestampId == @userHistory.@TimestampId && lo.@UserId == @userHistory.@UserId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @userHistory.@TimestampId;
				query.@UserId = @userHistory.@UserId;
				query.@EmailAddress = @userHistory.@EmailAddress;
				query.@UserName = @userHistory.@UserName;
				query.@SaltValue = @userHistory.@SaltValue;
				query.@PasswordHash = @userHistory.@PasswordHash;
				query.@Question = @userHistory.@Question;
				query.@AnswerHash = @userHistory.@AnswerHash;
				query.@LastLoginSuccessTimestamp = @userHistory.@LastLoginSuccessTimestamp;
				query.@LastLoginFailureTimestamp = @userHistory.@LastLoginFailureTimestamp;
				query.@FailedLoginCount = @userHistory.@FailedLoginCount;
				query.@MustChangePassword = @userHistory.@MustChangePassword;
				query.@SortOrder = @userHistory.@SortOrder;
				query.@CreationTimestamp = @userHistory.@CreationTimestamp;
				query.@ModificationTimestamp = @userHistory.@ModificationTimestamp;
				query.@CreationUserId = @userHistory.@CreationUserId;
				query.@ModificationUserId = @userHistory.@ModificationUserId;
				query.@LogicalDelete = @userHistory.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictUserHistory(unitOfWork, @userHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@userHistory.@TimestampId = query.@TimestampId;
				@userHistory.@UserId = query.@UserId;
				@userHistory.@EmailAddress = query.@EmailAddress;
				@userHistory.@UserName = query.@UserName;
				@userHistory.@SaltValue = query.@SaltValue;
				@userHistory.@PasswordHash = query.@PasswordHash;
				@userHistory.@Question = query.@Question;
				@userHistory.@AnswerHash = query.@AnswerHash;
				@userHistory.@LastLoginSuccessTimestamp = query.@LastLoginSuccessTimestamp;
				@userHistory.@LastLoginFailureTimestamp = query.@LastLoginFailureTimestamp;
				@userHistory.@FailedLoginCount = query.@FailedLoginCount;
				@userHistory.@MustChangePassword = query.@MustChangePassword;
				@userHistory.@SortOrder = query.@SortOrder;
				@userHistory.@CreationTimestamp = query.@CreationTimestamp;
				@userHistory.@ModificationTimestamp = query.@ModificationTimestamp;
				@userHistory.@CreationUserId = query.@CreationUserId;
				@userHistory.@ModificationUserId = query.@ModificationUserId;
				@userHistory.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertUserHistory(unitOfWork, @userHistory);
				}
				else
				{
					this.OnPostUpdateUserHistory(unitOfWork, @userHistory);
				}

				return true;
			}
		}
		
		public bool DiscardUserHistory(UserHistory @userHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardUserHistory(unitOfWork, @userHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardUserHistory(UnitOfWork.Current, @userHistory);
			
			return retval;
		}
		
		public bool DiscardUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.UserHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@userHistory == null)
				throw new ArgumentNullException("userHistory");
				
			if (@userHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteUserHistory(unitOfWork, @userHistory);
				
				query = wrapper.Disposable.@UserHistories.SingleOrDefault(lo => lo.@TimestampId == @userHistory.@TimestampId && lo.@UserId == @userHistory.@UserId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@UserHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictUserHistory(unitOfWork, @userHistory);
					
					return false;
				}

				this.OnPostDeleteUserHistory(unitOfWork, @userHistory);
				
				@userHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);
		
		partial void OnPostInsertUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);
		
		partial void OnPreUpdateUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);
		
		partial void OnPostUpdateUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);
		
		partial void OnSaveConflictUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);
		
		partial void OnDiscardConflictUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);
				
		partial void OnPreDeleteUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);
		
		partial void OnPostDeleteUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);
		
		partial void OnSelectUserHistory(IUnitOfWork unitOfWork, UserHistory @userHistory);		

		public EventLogHistory LoadEventLogHistory(Int64 @timestampId, Int32 @eventLogId)
		{
			EventLogHistory @eventLogHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@eventLogHistory = this.LoadEventLogHistory(unitOfWork, @timestampId, @eventLogId);

					unitOfWork.Complete();
				}
			}
			else
				@eventLogHistory = this.LoadEventLogHistory(UnitOfWork.Current, @timestampId, @eventLogId);
			
			return @eventLogHistory;
		}
		
		public EventLogHistory LoadEventLogHistory(IUnitOfWork unitOfWork, Int64 @timestampId, Int32 @eventLogId)
		{			
			EventLogHistory @eventLogHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.EventLogHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@EventLogId == @eventLogId);

				if ((object)query == null)
					return null; // does not exist
				
				@eventLogHistory = new EventLogHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@EventLogId = query.@EventLogId,
									@EventText = query.@EventText,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEventLogHistory(unitOfWork, @eventLogHistory);

				return @eventLogHistory;
			}
		}
		
		public IEnumerable<EventLogHistory> FindEventLogHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory>> callback)
		{
			IEnumerable<EventLogHistory> @eventLogHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@eventLogHistories = this.FindEventLogHistories(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @eventLogHistories.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@eventLogHistories = this.FindEventLogHistories(UnitOfWork.Current, callback);
				
				return @eventLogHistories; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<EventLogHistory> FindEventLogHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory>> callback)
		{
			IEnumerable<EventLogHistory> @eventLogHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@EventLogHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@eventLogHistories = queryable.Select(lo => new EventLogHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@EventLogId = lo.@EventLogId,
													@EventText = lo.@EventText,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (EventLogHistory @eventLogHistory in @eventLogHistories)
				{
					this.OnSelectEventLogHistory(unitOfWork, @eventLogHistory);
					
					yield return @eventLogHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveEventLogHistory(EventLogHistory @eventLogHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveEventLogHistory(unitOfWork, @eventLogHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveEventLogHistory(UnitOfWork.Current, @eventLogHistory);
			
			return retval;
		}
		
		public bool SaveEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@eventLogHistory == null)
				throw new ArgumentNullException("eventLogHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @eventLogHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEventLogHistory(unitOfWork, @eventLogHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory();

					wrapper.Disposable.EventLogHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEventLogHistory(unitOfWork, @eventLogHistory);
					
					query = wrapper.Disposable.EventLogHistories.SingleOrDefault(lo => lo.@TimestampId == @eventLogHistory.@TimestampId && lo.@EventLogId == @eventLogHistory.@EventLogId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @eventLogHistory.@TimestampId;
				query.@EventLogId = @eventLogHistory.@EventLogId;
				query.@EventText = @eventLogHistory.@EventText;
				query.@SortOrder = @eventLogHistory.@SortOrder;
				query.@CreationTimestamp = @eventLogHistory.@CreationTimestamp;
				query.@ModificationTimestamp = @eventLogHistory.@ModificationTimestamp;
				query.@CreationUserId = @eventLogHistory.@CreationUserId;
				query.@ModificationUserId = @eventLogHistory.@ModificationUserId;
				query.@LogicalDelete = @eventLogHistory.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEventLogHistory(unitOfWork, @eventLogHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@eventLogHistory.@TimestampId = query.@TimestampId;
				@eventLogHistory.@EventLogId = query.@EventLogId;
				@eventLogHistory.@EventText = query.@EventText;
				@eventLogHistory.@SortOrder = query.@SortOrder;
				@eventLogHistory.@CreationTimestamp = query.@CreationTimestamp;
				@eventLogHistory.@ModificationTimestamp = query.@ModificationTimestamp;
				@eventLogHistory.@CreationUserId = query.@CreationUserId;
				@eventLogHistory.@ModificationUserId = query.@ModificationUserId;
				@eventLogHistory.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEventLogHistory(unitOfWork, @eventLogHistory);
				}
				else
				{
					this.OnPostUpdateEventLogHistory(unitOfWork, @eventLogHistory);
				}

				return true;
			}
		}
		
		public bool DiscardEventLogHistory(EventLogHistory @eventLogHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardEventLogHistory(unitOfWork, @eventLogHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardEventLogHistory(UnitOfWork.Current, @eventLogHistory);
			
			return retval;
		}
		
		public bool DiscardEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@eventLogHistory == null)
				throw new ArgumentNullException("eventLogHistory");
				
			if (@eventLogHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEventLogHistory(unitOfWork, @eventLogHistory);
				
				query = wrapper.Disposable.@EventLogHistories.SingleOrDefault(lo => lo.@TimestampId == @eventLogHistory.@TimestampId && lo.@EventLogId == @eventLogHistory.@EventLogId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@EventLogHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEventLogHistory(unitOfWork, @eventLogHistory);
					
					return false;
				}

				this.OnPostDeleteEventLogHistory(unitOfWork, @eventLogHistory);
				
				@eventLogHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);
		
		partial void OnPostInsertEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);
		
		partial void OnPreUpdateEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);
		
		partial void OnPostUpdateEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);
		
		partial void OnSaveConflictEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);
		
		partial void OnDiscardConflictEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);
				
		partial void OnPreDeleteEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);
		
		partial void OnPostDeleteEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);
		
		partial void OnSelectEventLogHistory(IUnitOfWork unitOfWork, EventLogHistory @eventLogHistory);		

		public EmailMessageHistory LoadEmailMessageHistory(Int64 @timestampId, Int32 @emailMessageId)
		{
			EmailMessageHistory @emailMessageHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@emailMessageHistory = this.LoadEmailMessageHistory(unitOfWork, @timestampId, @emailMessageId);

					unitOfWork.Complete();
				}
			}
			else
				@emailMessageHistory = this.LoadEmailMessageHistory(UnitOfWork.Current, @timestampId, @emailMessageId);
			
			return @emailMessageHistory;
		}
		
		public EmailMessageHistory LoadEmailMessageHistory(IUnitOfWork unitOfWork, Int64 @timestampId, Int32 @emailMessageId)
		{			
			EmailMessageHistory @emailMessageHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.EmailMessageHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@EmailMessageId == @emailMessageId);

				if ((object)query == null)
					return null; // does not exist
				
				@emailMessageHistory = new EmailMessageHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@EmailMessageId = query.@EmailMessageId,
									@From = query.@From,
									@Sender = query.@Sender,
									@ReplyTo = query.@ReplyTo,
									@To = query.@To,
									@CarbonCopy = query.@CarbonCopy,
									@BlindCarbonCopy = query.@BlindCarbonCopy,
									@Subject = query.@Subject,
									@IsBodyHtml = query.@IsBodyHtml,
									@Body = query.@Body,
									@Processed = query.@Processed,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEmailMessageHistory(unitOfWork, @emailMessageHistory);

				return @emailMessageHistory;
			}
		}
		
		public IEnumerable<EmailMessageHistory> FindEmailMessageHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory>> callback)
		{
			IEnumerable<EmailMessageHistory> @emailMessageHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@emailMessageHistories = this.FindEmailMessageHistories(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @emailMessageHistories.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@emailMessageHistories = this.FindEmailMessageHistories(UnitOfWork.Current, callback);
				
				return @emailMessageHistories; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<EmailMessageHistory> FindEmailMessageHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory>> callback)
		{
			IEnumerable<EmailMessageHistory> @emailMessageHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@EmailMessageHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@emailMessageHistories = queryable.Select(lo => new EmailMessageHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@EmailMessageId = lo.@EmailMessageId,
													@From = lo.@From,
													@Sender = lo.@Sender,
													@ReplyTo = lo.@ReplyTo,
													@To = lo.@To,
													@CarbonCopy = lo.@CarbonCopy,
													@BlindCarbonCopy = lo.@BlindCarbonCopy,
													@Subject = lo.@Subject,
													@IsBodyHtml = lo.@IsBodyHtml,
													@Body = lo.@Body,
													@Processed = lo.@Processed,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (EmailMessageHistory @emailMessageHistory in @emailMessageHistories)
				{
					this.OnSelectEmailMessageHistory(unitOfWork, @emailMessageHistory);
					
					yield return @emailMessageHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveEmailMessageHistory(EmailMessageHistory @emailMessageHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveEmailMessageHistory(unitOfWork, @emailMessageHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveEmailMessageHistory(UnitOfWork.Current, @emailMessageHistory);
			
			return retval;
		}
		
		public bool SaveEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@emailMessageHistory == null)
				throw new ArgumentNullException("emailMessageHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @emailMessageHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEmailMessageHistory(unitOfWork, @emailMessageHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory();

					wrapper.Disposable.EmailMessageHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEmailMessageHistory(unitOfWork, @emailMessageHistory);
					
					query = wrapper.Disposable.EmailMessageHistories.SingleOrDefault(lo => lo.@TimestampId == @emailMessageHistory.@TimestampId && lo.@EmailMessageId == @emailMessageHistory.@EmailMessageId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @emailMessageHistory.@TimestampId;
				query.@EmailMessageId = @emailMessageHistory.@EmailMessageId;
				query.@From = @emailMessageHistory.@From;
				query.@Sender = @emailMessageHistory.@Sender;
				query.@ReplyTo = @emailMessageHistory.@ReplyTo;
				query.@To = @emailMessageHistory.@To;
				query.@CarbonCopy = @emailMessageHistory.@CarbonCopy;
				query.@BlindCarbonCopy = @emailMessageHistory.@BlindCarbonCopy;
				query.@Subject = @emailMessageHistory.@Subject;
				query.@IsBodyHtml = @emailMessageHistory.@IsBodyHtml;
				query.@Body = @emailMessageHistory.@Body;
				query.@Processed = @emailMessageHistory.@Processed;
				query.@SortOrder = @emailMessageHistory.@SortOrder;
				query.@CreationTimestamp = @emailMessageHistory.@CreationTimestamp;
				query.@ModificationTimestamp = @emailMessageHistory.@ModificationTimestamp;
				query.@CreationUserId = @emailMessageHistory.@CreationUserId;
				query.@ModificationUserId = @emailMessageHistory.@ModificationUserId;
				query.@LogicalDelete = @emailMessageHistory.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEmailMessageHistory(unitOfWork, @emailMessageHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@emailMessageHistory.@TimestampId = query.@TimestampId;
				@emailMessageHistory.@EmailMessageId = query.@EmailMessageId;
				@emailMessageHistory.@From = query.@From;
				@emailMessageHistory.@Sender = query.@Sender;
				@emailMessageHistory.@ReplyTo = query.@ReplyTo;
				@emailMessageHistory.@To = query.@To;
				@emailMessageHistory.@CarbonCopy = query.@CarbonCopy;
				@emailMessageHistory.@BlindCarbonCopy = query.@BlindCarbonCopy;
				@emailMessageHistory.@Subject = query.@Subject;
				@emailMessageHistory.@IsBodyHtml = query.@IsBodyHtml;
				@emailMessageHistory.@Body = query.@Body;
				@emailMessageHistory.@Processed = query.@Processed;
				@emailMessageHistory.@SortOrder = query.@SortOrder;
				@emailMessageHistory.@CreationTimestamp = query.@CreationTimestamp;
				@emailMessageHistory.@ModificationTimestamp = query.@ModificationTimestamp;
				@emailMessageHistory.@CreationUserId = query.@CreationUserId;
				@emailMessageHistory.@ModificationUserId = query.@ModificationUserId;
				@emailMessageHistory.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEmailMessageHistory(unitOfWork, @emailMessageHistory);
				}
				else
				{
					this.OnPostUpdateEmailMessageHistory(unitOfWork, @emailMessageHistory);
				}

				return true;
			}
		}
		
		public bool DiscardEmailMessageHistory(EmailMessageHistory @emailMessageHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardEmailMessageHistory(unitOfWork, @emailMessageHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardEmailMessageHistory(UnitOfWork.Current, @emailMessageHistory);
			
			return retval;
		}
		
		public bool DiscardEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@emailMessageHistory == null)
				throw new ArgumentNullException("emailMessageHistory");
				
			if (@emailMessageHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEmailMessageHistory(unitOfWork, @emailMessageHistory);
				
				query = wrapper.Disposable.@EmailMessageHistories.SingleOrDefault(lo => lo.@TimestampId == @emailMessageHistory.@TimestampId && lo.@EmailMessageId == @emailMessageHistory.@EmailMessageId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@EmailMessageHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEmailMessageHistory(unitOfWork, @emailMessageHistory);
					
					return false;
				}

				this.OnPostDeleteEmailMessageHistory(unitOfWork, @emailMessageHistory);
				
				@emailMessageHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);
		
		partial void OnPostInsertEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);
		
		partial void OnPreUpdateEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);
		
		partial void OnPostUpdateEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);
		
		partial void OnSaveConflictEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);
		
		partial void OnDiscardConflictEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);
				
		partial void OnPreDeleteEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);
		
		partial void OnPostDeleteEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);
		
		partial void OnSelectEmailMessageHistory(IUnitOfWork unitOfWork, EmailMessageHistory @emailMessageHistory);		

		public EmailAttachmentHistory LoadEmailAttachmentHistory(Int64 @timestampId, Int32 @emailMessageId)
		{
			EmailAttachmentHistory @emailAttachmentHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@emailAttachmentHistory = this.LoadEmailAttachmentHistory(unitOfWork, @timestampId, @emailMessageId);

					unitOfWork.Complete();
				}
			}
			else
				@emailAttachmentHistory = this.LoadEmailAttachmentHistory(UnitOfWork.Current, @timestampId, @emailMessageId);
			
			return @emailAttachmentHistory;
		}
		
		public EmailAttachmentHistory LoadEmailAttachmentHistory(IUnitOfWork unitOfWork, Int64 @timestampId, Int32 @emailMessageId)
		{			
			EmailAttachmentHistory @emailAttachmentHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.EmailAttachmentHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@EmailMessageId == @emailMessageId);

				if ((object)query == null)
					return null; // does not exist
				
				@emailAttachmentHistory = new EmailAttachmentHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@EmailMessageId = query.@EmailMessageId,
									@EmailAttachmentId = query.@EmailAttachmentId,
									@FileName = query.@FileName,
									@FileSize = query.@FileSize,
									@MimeType = query.@MimeType,
									@AttachmentBits = (object)query.AttachmentBits != null ? query.@AttachmentBits.ToArray() : null,
									@SortOrder = query.@SortOrder,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@CreationUserId = query.@CreationUserId,
									@ModificationUserId = query.@ModificationUserId,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);

				return @emailAttachmentHistory;
			}
		}
		
		public IEnumerable<EmailAttachmentHistory> FindEmailAttachmentHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory>> callback)
		{
			IEnumerable<EmailAttachmentHistory> @emailAttachmentHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@emailAttachmentHistories = this.FindEmailAttachmentHistories(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @emailAttachmentHistories.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@emailAttachmentHistories = this.FindEmailAttachmentHistories(UnitOfWork.Current, callback);
				
				return @emailAttachmentHistories; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<EmailAttachmentHistory> FindEmailAttachmentHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory>> callback)
		{
			IEnumerable<EmailAttachmentHistory> @emailAttachmentHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@EmailAttachmentHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@emailAttachmentHistories = queryable.Select(lo => new EmailAttachmentHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@EmailMessageId = lo.@EmailMessageId,
													@EmailAttachmentId = lo.@EmailAttachmentId,
													@FileName = lo.@FileName,
													@FileSize = lo.@FileSize,
													@MimeType = lo.@MimeType,
													@AttachmentBits = (object)lo.@AttachmentBits != null ? lo.@AttachmentBits.ToArray() : null,
													@SortOrder = lo.@SortOrder,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@CreationUserId = lo.@CreationUserId,
													@ModificationUserId = lo.@ModificationUserId,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (EmailAttachmentHistory @emailAttachmentHistory in @emailAttachmentHistories)
				{
					this.OnSelectEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
					
					yield return @emailAttachmentHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveEmailAttachmentHistory(EmailAttachmentHistory @emailAttachmentHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveEmailAttachmentHistory(UnitOfWork.Current, @emailAttachmentHistory);
			
			return retval;
		}
		
		public bool SaveEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@emailAttachmentHistory == null)
				throw new ArgumentNullException("emailAttachmentHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @emailAttachmentHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory();

					wrapper.Disposable.EmailAttachmentHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
					
					query = wrapper.Disposable.EmailAttachmentHistories.SingleOrDefault(lo => lo.@TimestampId == @emailAttachmentHistory.@TimestampId && lo.@EmailMessageId == @emailAttachmentHistory.@EmailMessageId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @emailAttachmentHistory.@TimestampId;
				query.@EmailMessageId = @emailAttachmentHistory.@EmailMessageId;
				query.@EmailAttachmentId = @emailAttachmentHistory.@EmailAttachmentId;
				query.@FileName = @emailAttachmentHistory.@FileName;
				query.@FileSize = @emailAttachmentHistory.@FileSize;
				query.@MimeType = @emailAttachmentHistory.@MimeType;
				query.@AttachmentBits = @emailAttachmentHistory.@AttachmentBits;
				query.@SortOrder = @emailAttachmentHistory.@SortOrder;
				query.@CreationTimestamp = @emailAttachmentHistory.@CreationTimestamp;
				query.@ModificationTimestamp = @emailAttachmentHistory.@ModificationTimestamp;
				query.@CreationUserId = @emailAttachmentHistory.@CreationUserId;
				query.@ModificationUserId = @emailAttachmentHistory.@ModificationUserId;
				query.@LogicalDelete = @emailAttachmentHistory.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@emailAttachmentHistory.@TimestampId = query.@TimestampId;
				@emailAttachmentHistory.@EmailMessageId = query.@EmailMessageId;
				@emailAttachmentHistory.@EmailAttachmentId = query.@EmailAttachmentId;
				@emailAttachmentHistory.@FileName = query.@FileName;
				@emailAttachmentHistory.@FileSize = query.@FileSize;
				@emailAttachmentHistory.@MimeType = query.@MimeType;
				@emailAttachmentHistory.@AttachmentBits = (object)query.@AttachmentBits != null ? query.@AttachmentBits.ToArray() : null;
				@emailAttachmentHistory.@SortOrder = query.@SortOrder;
				@emailAttachmentHistory.@CreationTimestamp = query.@CreationTimestamp;
				@emailAttachmentHistory.@ModificationTimestamp = query.@ModificationTimestamp;
				@emailAttachmentHistory.@CreationUserId = query.@CreationUserId;
				@emailAttachmentHistory.@ModificationUserId = query.@ModificationUserId;
				@emailAttachmentHistory.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
				}
				else
				{
					this.OnPostUpdateEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
				}

				return true;
			}
		}
		
		public bool DiscardEmailAttachmentHistory(EmailAttachmentHistory @emailAttachmentHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardEmailAttachmentHistory(UnitOfWork.Current, @emailAttachmentHistory);
			
			return retval;
		}
		
		public bool DiscardEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@emailAttachmentHistory == null)
				throw new ArgumentNullException("emailAttachmentHistory");
				
			if (@emailAttachmentHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
				
				query = wrapper.Disposable.@EmailAttachmentHistories.SingleOrDefault(lo => lo.@TimestampId == @emailAttachmentHistory.@TimestampId && lo.@EmailMessageId == @emailAttachmentHistory.@EmailMessageId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@EmailAttachmentHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
					
					return false;
				}

				this.OnPostDeleteEmailAttachmentHistory(unitOfWork, @emailAttachmentHistory);
				
				@emailAttachmentHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnPostInsertEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnPreUpdateEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnPostUpdateEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnSaveConflictEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnDiscardConflictEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);
				
		partial void OnPreDeleteEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnPostDeleteEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnSelectEmailAttachmentHistory(IUnitOfWork unitOfWork, EmailAttachmentHistory @emailAttachmentHistory);		

		public TableWithPrimaryKeyAsIdentityHistory LoadTableWithPrimaryKeyAsIdentityHistory(Int64 @timestampId, Int32 @pkId)
		{
			TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithPrimaryKeyAsIdentityHistory = this.LoadTableWithPrimaryKeyAsIdentityHistory(unitOfWork, @timestampId, @pkId);

					unitOfWork.Complete();
				}
			}
			else
				@tableWithPrimaryKeyAsIdentityHistory = this.LoadTableWithPrimaryKeyAsIdentityHistory(UnitOfWork.Current, @timestampId, @pkId);
			
			return @tableWithPrimaryKeyAsIdentityHistory;
		}
		
		public TableWithPrimaryKeyAsIdentityHistory LoadTableWithPrimaryKeyAsIdentityHistory(IUnitOfWork unitOfWork, Int64 @timestampId, Int32 @pkId)
		{			
			TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TableWithPrimaryKeyAsIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@PkId == @pkId);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithPrimaryKeyAsIdentityHistory = new TableWithPrimaryKeyAsIdentityHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@PkId = query.@PkId,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithPrimaryKeyAsIdentityHistory(unitOfWork, @tableWithPrimaryKeyAsIdentityHistory);

				return @tableWithPrimaryKeyAsIdentityHistory;
			}
		}
		
		public IEnumerable<TableWithPrimaryKeyAsIdentityHistory> FindTableWithPrimaryKeyAsIdentityHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory>> callback)
		{
			IEnumerable<TableWithPrimaryKeyAsIdentityHistory> @tableWithPrimaryKeyAsIdentityHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithPrimaryKeyAsIdentityHistories = this.FindTableWithPrimaryKeyAsIdentityHistories(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @tableWithPrimaryKeyAsIdentityHistories.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@tableWithPrimaryKeyAsIdentityHistories = this.FindTableWithPrimaryKeyAsIdentityHistories(UnitOfWork.Current, callback);
				
				return @tableWithPrimaryKeyAsIdentityHistories; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<TableWithPrimaryKeyAsIdentityHistory> FindTableWithPrimaryKeyAsIdentityHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory>> callback)
		{
			IEnumerable<TableWithPrimaryKeyAsIdentityHistory> @tableWithPrimaryKeyAsIdentityHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TableWithPrimaryKeyAsIdentityHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tableWithPrimaryKeyAsIdentityHistories = queryable.Select(lo => new TableWithPrimaryKeyAsIdentityHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@PkId = lo.@PkId,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory in @tableWithPrimaryKeyAsIdentityHistories)
				{
					this.OnSelectTableWithPrimaryKeyAsIdentityHistory(unitOfWork, @tableWithPrimaryKeyAsIdentityHistory);
					
					yield return @tableWithPrimaryKeyAsIdentityHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTableWithPrimaryKeyAsIdentityHistory(TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTableWithPrimaryKeyAsIdentityHistory(unitOfWork, @tableWithPrimaryKeyAsIdentityHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTableWithPrimaryKeyAsIdentityHistory(UnitOfWork.Current, @tableWithPrimaryKeyAsIdentityHistory);
			
			return retval;
		}
		
		public bool SaveTableWithPrimaryKeyAsIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithPrimaryKeyAsIdentityHistory == null)
				throw new ArgumentNullException("tableWithPrimaryKeyAsIdentityHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithPrimaryKeyAsIdentityHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithPrimaryKeyAsIdentityHistory(unitOfWork, @tableWithPrimaryKeyAsIdentityHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory();

					wrapper.Disposable.TableWithPrimaryKeyAsIdentityHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithPrimaryKeyAsIdentityHistory(unitOfWork, @tableWithPrimaryKeyAsIdentityHistory);
					
					query = wrapper.Disposable.TableWithPrimaryKeyAsIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithPrimaryKeyAsIdentityHistory.@TimestampId && lo.@PkId == @tableWithPrimaryKeyAsIdentityHistory.@PkId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @tableWithPrimaryKeyAsIdentityHistory.@TimestampId;
				query.@PkId = @tableWithPrimaryKeyAsIdentityHistory.@PkId;
				query.@Data01 = @tableWithPrimaryKeyAsIdentityHistory.@Data01;
				query.@Data02 = @tableWithPrimaryKeyAsIdentityHistory.@Data02;
				query.@Data03 = @tableWithPrimaryKeyAsIdentityHistory.@Data03;
				query.@Data04 = @tableWithPrimaryKeyAsIdentityHistory.@Data04;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithPrimaryKeyAsIdentityHistory(unitOfWork, @tableWithPrimaryKeyAsIdentityHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithPrimaryKeyAsIdentityHistory.@TimestampId = query.@TimestampId;
				@tableWithPrimaryKeyAsIdentityHistory.@PkId = query.@PkId;
				@tableWithPrimaryKeyAsIdentityHistory.@Data01 = query.@Data01;
				@tableWithPrimaryKeyAsIdentityHistory.@Data02 = query.@Data02;
				@tableWithPrimaryKeyAsIdentityHistory.@Data03 = query.@Data03;
				@tableWithPrimaryKeyAsIdentityHistory.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithPrimaryKeyAsIdentityHistory(unitOfWork, @tableWithPrimaryKeyAsIdentityHistory);
				}
				else
				{
					this.OnPostUpdateTableWithPrimaryKeyAsIdentityHistory(unitOfWork, @tableWithPrimaryKeyAsIdentityHistory);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithPrimaryKeyAsIdentityHistory(TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTableWithPrimaryKeyAsIdentityHistory(unitOfWork, @tableWithPrimaryKeyAsIdentityHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTableWithPrimaryKeyAsIdentityHistory(UnitOfWork.Current, @tableWithPrimaryKeyAsIdentityHistory);
			
			return retval;
		}
		
		public bool DiscardTableWithPrimaryKeyAsIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithPrimaryKeyAsIdentityHistory == null)
				throw new ArgumentNullException("tableWithPrimaryKeyAsIdentityHistory");
				
			if (@tableWithPrimaryKeyAsIdentityHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithPrimaryKeyAsIdentityHistory(unitOfWork, @tableWithPrimaryKeyAsIdentityHistory);
				
				query = wrapper.Disposable.@TableWithPrimaryKeyAsIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithPrimaryKeyAsIdentityHistory.@TimestampId && lo.@PkId == @tableWithPrimaryKeyAsIdentityHistory.@PkId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TableWithPrimaryKeyAsIdentityHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithPrimaryKeyAsIdentityHistory(unitOfWork, @tableWithPrimaryKeyAsIdentityHistory);
					
					return false;
				}

				this.OnPostDeleteTableWithPrimaryKeyAsIdentityHistory(unitOfWork, @tableWithPrimaryKeyAsIdentityHistory);
				
				@tableWithPrimaryKeyAsIdentityHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithPrimaryKeyAsIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);
		
		partial void OnPostInsertTableWithPrimaryKeyAsIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);
		
		partial void OnPreUpdateTableWithPrimaryKeyAsIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);
		
		partial void OnPostUpdateTableWithPrimaryKeyAsIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);
		
		partial void OnSaveConflictTableWithPrimaryKeyAsIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);
		
		partial void OnDiscardConflictTableWithPrimaryKeyAsIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);
				
		partial void OnPreDeleteTableWithPrimaryKeyAsIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);
		
		partial void OnPostDeleteTableWithPrimaryKeyAsIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);
		
		partial void OnSelectTableWithPrimaryKeyAsIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);		

		public TableWithPrimaryKeyAsDefaultHistory LoadTableWithPrimaryKeyAsDefaultHistory(Int64 @timestampId, Guid @pkDf)
		{
			TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithPrimaryKeyAsDefaultHistory = this.LoadTableWithPrimaryKeyAsDefaultHistory(unitOfWork, @timestampId, @pkDf);

					unitOfWork.Complete();
				}
			}
			else
				@tableWithPrimaryKeyAsDefaultHistory = this.LoadTableWithPrimaryKeyAsDefaultHistory(UnitOfWork.Current, @timestampId, @pkDf);
			
			return @tableWithPrimaryKeyAsDefaultHistory;
		}
		
		public TableWithPrimaryKeyAsDefaultHistory LoadTableWithPrimaryKeyAsDefaultHistory(IUnitOfWork unitOfWork, Int64 @timestampId, Guid @pkDf)
		{			
			TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TableWithPrimaryKeyAsDefaultHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@PkDf == @pkDf);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithPrimaryKeyAsDefaultHistory = new TableWithPrimaryKeyAsDefaultHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@PkDf = query.@PkDf,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithPrimaryKeyAsDefaultHistory(unitOfWork, @tableWithPrimaryKeyAsDefaultHistory);

				return @tableWithPrimaryKeyAsDefaultHistory;
			}
		}
		
		public IEnumerable<TableWithPrimaryKeyAsDefaultHistory> FindTableWithPrimaryKeyAsDefaultHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory>> callback)
		{
			IEnumerable<TableWithPrimaryKeyAsDefaultHistory> @tableWithPrimaryKeyAsDefaultHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithPrimaryKeyAsDefaultHistories = this.FindTableWithPrimaryKeyAsDefaultHistories(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @tableWithPrimaryKeyAsDefaultHistories.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@tableWithPrimaryKeyAsDefaultHistories = this.FindTableWithPrimaryKeyAsDefaultHistories(UnitOfWork.Current, callback);
				
				return @tableWithPrimaryKeyAsDefaultHistories; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<TableWithPrimaryKeyAsDefaultHistory> FindTableWithPrimaryKeyAsDefaultHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory>> callback)
		{
			IEnumerable<TableWithPrimaryKeyAsDefaultHistory> @tableWithPrimaryKeyAsDefaultHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TableWithPrimaryKeyAsDefaultHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tableWithPrimaryKeyAsDefaultHistories = queryable.Select(lo => new TableWithPrimaryKeyAsDefaultHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@PkDf = lo.@PkDf,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory in @tableWithPrimaryKeyAsDefaultHistories)
				{
					this.OnSelectTableWithPrimaryKeyAsDefaultHistory(unitOfWork, @tableWithPrimaryKeyAsDefaultHistory);
					
					yield return @tableWithPrimaryKeyAsDefaultHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTableWithPrimaryKeyAsDefaultHistory(TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTableWithPrimaryKeyAsDefaultHistory(unitOfWork, @tableWithPrimaryKeyAsDefaultHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTableWithPrimaryKeyAsDefaultHistory(UnitOfWork.Current, @tableWithPrimaryKeyAsDefaultHistory);
			
			return retval;
		}
		
		public bool SaveTableWithPrimaryKeyAsDefaultHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithPrimaryKeyAsDefaultHistory == null)
				throw new ArgumentNullException("tableWithPrimaryKeyAsDefaultHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithPrimaryKeyAsDefaultHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithPrimaryKeyAsDefaultHistory(unitOfWork, @tableWithPrimaryKeyAsDefaultHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory();

					wrapper.Disposable.TableWithPrimaryKeyAsDefaultHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithPrimaryKeyAsDefaultHistory(unitOfWork, @tableWithPrimaryKeyAsDefaultHistory);
					
					query = wrapper.Disposable.TableWithPrimaryKeyAsDefaultHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithPrimaryKeyAsDefaultHistory.@TimestampId && lo.@PkDf == @tableWithPrimaryKeyAsDefaultHistory.@PkDf);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @tableWithPrimaryKeyAsDefaultHistory.@TimestampId;
				query.@PkDf = @tableWithPrimaryKeyAsDefaultHistory.@PkDf;
				query.@Data01 = @tableWithPrimaryKeyAsDefaultHistory.@Data01;
				query.@Data02 = @tableWithPrimaryKeyAsDefaultHistory.@Data02;
				query.@Data03 = @tableWithPrimaryKeyAsDefaultHistory.@Data03;
				query.@Data04 = @tableWithPrimaryKeyAsDefaultHistory.@Data04;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithPrimaryKeyAsDefaultHistory(unitOfWork, @tableWithPrimaryKeyAsDefaultHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithPrimaryKeyAsDefaultHistory.@TimestampId = query.@TimestampId;
				@tableWithPrimaryKeyAsDefaultHistory.@PkDf = query.@PkDf;
				@tableWithPrimaryKeyAsDefaultHistory.@Data01 = query.@Data01;
				@tableWithPrimaryKeyAsDefaultHistory.@Data02 = query.@Data02;
				@tableWithPrimaryKeyAsDefaultHistory.@Data03 = query.@Data03;
				@tableWithPrimaryKeyAsDefaultHistory.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithPrimaryKeyAsDefaultHistory(unitOfWork, @tableWithPrimaryKeyAsDefaultHistory);
				}
				else
				{
					this.OnPostUpdateTableWithPrimaryKeyAsDefaultHistory(unitOfWork, @tableWithPrimaryKeyAsDefaultHistory);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithPrimaryKeyAsDefaultHistory(TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTableWithPrimaryKeyAsDefaultHistory(unitOfWork, @tableWithPrimaryKeyAsDefaultHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTableWithPrimaryKeyAsDefaultHistory(UnitOfWork.Current, @tableWithPrimaryKeyAsDefaultHistory);
			
			return retval;
		}
		
		public bool DiscardTableWithPrimaryKeyAsDefaultHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithPrimaryKeyAsDefaultHistory == null)
				throw new ArgumentNullException("tableWithPrimaryKeyAsDefaultHistory");
				
			if (@tableWithPrimaryKeyAsDefaultHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithPrimaryKeyAsDefaultHistory(unitOfWork, @tableWithPrimaryKeyAsDefaultHistory);
				
				query = wrapper.Disposable.@TableWithPrimaryKeyAsDefaultHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithPrimaryKeyAsDefaultHistory.@TimestampId && lo.@PkDf == @tableWithPrimaryKeyAsDefaultHistory.@PkDf);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TableWithPrimaryKeyAsDefaultHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithPrimaryKeyAsDefaultHistory(unitOfWork, @tableWithPrimaryKeyAsDefaultHistory);
					
					return false;
				}

				this.OnPostDeleteTableWithPrimaryKeyAsDefaultHistory(unitOfWork, @tableWithPrimaryKeyAsDefaultHistory);
				
				@tableWithPrimaryKeyAsDefaultHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithPrimaryKeyAsDefaultHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);
		
		partial void OnPostInsertTableWithPrimaryKeyAsDefaultHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);
		
		partial void OnPreUpdateTableWithPrimaryKeyAsDefaultHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);
		
		partial void OnPostUpdateTableWithPrimaryKeyAsDefaultHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);
		
		partial void OnSaveConflictTableWithPrimaryKeyAsDefaultHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);
		
		partial void OnDiscardConflictTableWithPrimaryKeyAsDefaultHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);
				
		partial void OnPreDeleteTableWithPrimaryKeyAsDefaultHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);
		
		partial void OnPostDeleteTableWithPrimaryKeyAsDefaultHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);
		
		partial void OnSelectTableWithPrimaryKeyAsDefaultHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);		

		public TableWithPrimaryKeyWithDiffIdentityHistory LoadTableWithPrimaryKeyWithDiffIdentityHistory(Int64 @timestampId, Int32 @pk)
		{
			TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithPrimaryKeyWithDiffIdentityHistory = this.LoadTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWork, @timestampId, @pk);

					unitOfWork.Complete();
				}
			}
			else
				@tableWithPrimaryKeyWithDiffIdentityHistory = this.LoadTableWithPrimaryKeyWithDiffIdentityHistory(UnitOfWork.Current, @timestampId, @pk);
			
			return @tableWithPrimaryKeyWithDiffIdentityHistory;
		}
		
		public TableWithPrimaryKeyWithDiffIdentityHistory LoadTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWork unitOfWork, Int64 @timestampId, Int32 @pk)
		{			
			TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TableWithPrimaryKeyWithDiffIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@Pk == @pk);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithPrimaryKeyWithDiffIdentityHistory = new TableWithPrimaryKeyWithDiffIdentityHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@Pk = query.@Pk,
									@Id = query.@Id,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWork, @tableWithPrimaryKeyWithDiffIdentityHistory);

				return @tableWithPrimaryKeyWithDiffIdentityHistory;
			}
		}
		
		public IEnumerable<TableWithPrimaryKeyWithDiffIdentityHistory> FindTableWithPrimaryKeyWithDiffIdentityHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory>> callback)
		{
			IEnumerable<TableWithPrimaryKeyWithDiffIdentityHistory> @tableWithPrimaryKeyWithDiffIdentityHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithPrimaryKeyWithDiffIdentityHistories = this.FindTableWithPrimaryKeyWithDiffIdentityHistories(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @tableWithPrimaryKeyWithDiffIdentityHistories.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@tableWithPrimaryKeyWithDiffIdentityHistories = this.FindTableWithPrimaryKeyWithDiffIdentityHistories(UnitOfWork.Current, callback);
				
				return @tableWithPrimaryKeyWithDiffIdentityHistories; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<TableWithPrimaryKeyWithDiffIdentityHistory> FindTableWithPrimaryKeyWithDiffIdentityHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory>> callback)
		{
			IEnumerable<TableWithPrimaryKeyWithDiffIdentityHistory> @tableWithPrimaryKeyWithDiffIdentityHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TableWithPrimaryKeyWithDiffIdentityHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tableWithPrimaryKeyWithDiffIdentityHistories = queryable.Select(lo => new TableWithPrimaryKeyWithDiffIdentityHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@Pk = lo.@Pk,
													@Id = lo.@Id,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory in @tableWithPrimaryKeyWithDiffIdentityHistories)
				{
					this.OnSelectTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWork, @tableWithPrimaryKeyWithDiffIdentityHistory);
					
					yield return @tableWithPrimaryKeyWithDiffIdentityHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTableWithPrimaryKeyWithDiffIdentityHistory(TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWork, @tableWithPrimaryKeyWithDiffIdentityHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTableWithPrimaryKeyWithDiffIdentityHistory(UnitOfWork.Current, @tableWithPrimaryKeyWithDiffIdentityHistory);
			
			return retval;
		}
		
		public bool SaveTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithPrimaryKeyWithDiffIdentityHistory == null)
				throw new ArgumentNullException("tableWithPrimaryKeyWithDiffIdentityHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithPrimaryKeyWithDiffIdentityHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWork, @tableWithPrimaryKeyWithDiffIdentityHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory();

					wrapper.Disposable.TableWithPrimaryKeyWithDiffIdentityHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWork, @tableWithPrimaryKeyWithDiffIdentityHistory);
					
					query = wrapper.Disposable.TableWithPrimaryKeyWithDiffIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithPrimaryKeyWithDiffIdentityHistory.@TimestampId && lo.@Pk == @tableWithPrimaryKeyWithDiffIdentityHistory.@Pk);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @tableWithPrimaryKeyWithDiffIdentityHistory.@TimestampId;
				query.@Pk = @tableWithPrimaryKeyWithDiffIdentityHistory.@Pk;
				query.@Id = @tableWithPrimaryKeyWithDiffIdentityHistory.@Id;
				query.@Data01 = @tableWithPrimaryKeyWithDiffIdentityHistory.@Data01;
				query.@Data02 = @tableWithPrimaryKeyWithDiffIdentityHistory.@Data02;
				query.@Data03 = @tableWithPrimaryKeyWithDiffIdentityHistory.@Data03;
				query.@Data04 = @tableWithPrimaryKeyWithDiffIdentityHistory.@Data04;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWork, @tableWithPrimaryKeyWithDiffIdentityHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithPrimaryKeyWithDiffIdentityHistory.@TimestampId = query.@TimestampId;
				@tableWithPrimaryKeyWithDiffIdentityHistory.@Pk = query.@Pk;
				@tableWithPrimaryKeyWithDiffIdentityHistory.@Id = query.@Id;
				@tableWithPrimaryKeyWithDiffIdentityHistory.@Data01 = query.@Data01;
				@tableWithPrimaryKeyWithDiffIdentityHistory.@Data02 = query.@Data02;
				@tableWithPrimaryKeyWithDiffIdentityHistory.@Data03 = query.@Data03;
				@tableWithPrimaryKeyWithDiffIdentityHistory.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWork, @tableWithPrimaryKeyWithDiffIdentityHistory);
				}
				else
				{
					this.OnPostUpdateTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWork, @tableWithPrimaryKeyWithDiffIdentityHistory);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithPrimaryKeyWithDiffIdentityHistory(TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWork, @tableWithPrimaryKeyWithDiffIdentityHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTableWithPrimaryKeyWithDiffIdentityHistory(UnitOfWork.Current, @tableWithPrimaryKeyWithDiffIdentityHistory);
			
			return retval;
		}
		
		public bool DiscardTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithPrimaryKeyWithDiffIdentityHistory == null)
				throw new ArgumentNullException("tableWithPrimaryKeyWithDiffIdentityHistory");
				
			if (@tableWithPrimaryKeyWithDiffIdentityHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWork, @tableWithPrimaryKeyWithDiffIdentityHistory);
				
				query = wrapper.Disposable.@TableWithPrimaryKeyWithDiffIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithPrimaryKeyWithDiffIdentityHistory.@TimestampId && lo.@Pk == @tableWithPrimaryKeyWithDiffIdentityHistory.@Pk);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TableWithPrimaryKeyWithDiffIdentityHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWork, @tableWithPrimaryKeyWithDiffIdentityHistory);
					
					return false;
				}

				this.OnPostDeleteTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWork, @tableWithPrimaryKeyWithDiffIdentityHistory);
				
				@tableWithPrimaryKeyWithDiffIdentityHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);
		
		partial void OnPostInsertTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);
		
		partial void OnPreUpdateTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);
		
		partial void OnPostUpdateTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);
		
		partial void OnSaveConflictTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);
		
		partial void OnDiscardConflictTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);
				
		partial void OnPreDeleteTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);
		
		partial void OnPostDeleteTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);
		
		partial void OnSelectTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);		

		public TableNoPrimaryKeyWithIdentityHistory LoadTableNoPrimaryKeyWithIdentityHistory(Int64 @timestampId, Int32 @id, Boolean @data01, DateTime @data02, Int32 @data03, String @data04)
		{
			TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableNoPrimaryKeyWithIdentityHistory = this.LoadTableNoPrimaryKeyWithIdentityHistory(unitOfWork, @timestampId, @id, @data01, @data02, @data03, @data04);

					unitOfWork.Complete();
				}
			}
			else
				@tableNoPrimaryKeyWithIdentityHistory = this.LoadTableNoPrimaryKeyWithIdentityHistory(UnitOfWork.Current, @timestampId, @id, @data01, @data02, @data03, @data04);
			
			return @tableNoPrimaryKeyWithIdentityHistory;
		}
		
		public TableNoPrimaryKeyWithIdentityHistory LoadTableNoPrimaryKeyWithIdentityHistory(IUnitOfWork unitOfWork, Int64 @timestampId, Int32 @id, Boolean @data01, DateTime @data02, Int32 @data03, String @data04)
		{			
			TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TableNoPrimaryKeyWithIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@Id == @id && lo.@Data01 == @data01 && lo.@Data02 == @data02 && lo.@Data03 == @data03 && lo.@Data04 == @data04);

				if ((object)query == null)
					return null; // does not exist
				
				@tableNoPrimaryKeyWithIdentityHistory = new TableNoPrimaryKeyWithIdentityHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@Id = query.@Id,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableNoPrimaryKeyWithIdentityHistory(unitOfWork, @tableNoPrimaryKeyWithIdentityHistory);

				return @tableNoPrimaryKeyWithIdentityHistory;
			}
		}
		
		public IEnumerable<TableNoPrimaryKeyWithIdentityHistory> FindTableNoPrimaryKeyWithIdentityHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory>> callback)
		{
			IEnumerable<TableNoPrimaryKeyWithIdentityHistory> @tableNoPrimaryKeyWithIdentityHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableNoPrimaryKeyWithIdentityHistories = this.FindTableNoPrimaryKeyWithIdentityHistories(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @tableNoPrimaryKeyWithIdentityHistories.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@tableNoPrimaryKeyWithIdentityHistories = this.FindTableNoPrimaryKeyWithIdentityHistories(UnitOfWork.Current, callback);
				
				return @tableNoPrimaryKeyWithIdentityHistories; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<TableNoPrimaryKeyWithIdentityHistory> FindTableNoPrimaryKeyWithIdentityHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory>> callback)
		{
			IEnumerable<TableNoPrimaryKeyWithIdentityHistory> @tableNoPrimaryKeyWithIdentityHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TableNoPrimaryKeyWithIdentityHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tableNoPrimaryKeyWithIdentityHistories = queryable.Select(lo => new TableNoPrimaryKeyWithIdentityHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@Id = lo.@Id,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory in @tableNoPrimaryKeyWithIdentityHistories)
				{
					this.OnSelectTableNoPrimaryKeyWithIdentityHistory(unitOfWork, @tableNoPrimaryKeyWithIdentityHistory);
					
					yield return @tableNoPrimaryKeyWithIdentityHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTableNoPrimaryKeyWithIdentityHistory(TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTableNoPrimaryKeyWithIdentityHistory(unitOfWork, @tableNoPrimaryKeyWithIdentityHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTableNoPrimaryKeyWithIdentityHistory(UnitOfWork.Current, @tableNoPrimaryKeyWithIdentityHistory);
			
			return retval;
		}
		
		public bool SaveTableNoPrimaryKeyWithIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableNoPrimaryKeyWithIdentityHistory == null)
				throw new ArgumentNullException("tableNoPrimaryKeyWithIdentityHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableNoPrimaryKeyWithIdentityHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableNoPrimaryKeyWithIdentityHistory(unitOfWork, @tableNoPrimaryKeyWithIdentityHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory();

					wrapper.Disposable.TableNoPrimaryKeyWithIdentityHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableNoPrimaryKeyWithIdentityHistory(unitOfWork, @tableNoPrimaryKeyWithIdentityHistory);
					
					query = wrapper.Disposable.TableNoPrimaryKeyWithIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableNoPrimaryKeyWithIdentityHistory.@TimestampId && lo.@Id == @tableNoPrimaryKeyWithIdentityHistory.@Id && lo.@Data01 == @tableNoPrimaryKeyWithIdentityHistory.@Data01 && lo.@Data02 == @tableNoPrimaryKeyWithIdentityHistory.@Data02 && lo.@Data03 == @tableNoPrimaryKeyWithIdentityHistory.@Data03 && lo.@Data04 == @tableNoPrimaryKeyWithIdentityHistory.@Data04);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @tableNoPrimaryKeyWithIdentityHistory.@TimestampId;
				query.@Id = @tableNoPrimaryKeyWithIdentityHistory.@Id;
				query.@Data01 = @tableNoPrimaryKeyWithIdentityHistory.@Data01;
				query.@Data02 = @tableNoPrimaryKeyWithIdentityHistory.@Data02;
				query.@Data03 = @tableNoPrimaryKeyWithIdentityHistory.@Data03;
				query.@Data04 = @tableNoPrimaryKeyWithIdentityHistory.@Data04;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableNoPrimaryKeyWithIdentityHistory(unitOfWork, @tableNoPrimaryKeyWithIdentityHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableNoPrimaryKeyWithIdentityHistory.@TimestampId = query.@TimestampId;
				@tableNoPrimaryKeyWithIdentityHistory.@Id = query.@Id;
				@tableNoPrimaryKeyWithIdentityHistory.@Data01 = query.@Data01;
				@tableNoPrimaryKeyWithIdentityHistory.@Data02 = query.@Data02;
				@tableNoPrimaryKeyWithIdentityHistory.@Data03 = query.@Data03;
				@tableNoPrimaryKeyWithIdentityHistory.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableNoPrimaryKeyWithIdentityHistory(unitOfWork, @tableNoPrimaryKeyWithIdentityHistory);
				}
				else
				{
					this.OnPostUpdateTableNoPrimaryKeyWithIdentityHistory(unitOfWork, @tableNoPrimaryKeyWithIdentityHistory);
				}

				return true;
			}
		}
		
		public bool DiscardTableNoPrimaryKeyWithIdentityHistory(TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTableNoPrimaryKeyWithIdentityHistory(unitOfWork, @tableNoPrimaryKeyWithIdentityHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTableNoPrimaryKeyWithIdentityHistory(UnitOfWork.Current, @tableNoPrimaryKeyWithIdentityHistory);
			
			return retval;
		}
		
		public bool DiscardTableNoPrimaryKeyWithIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableNoPrimaryKeyWithIdentityHistory == null)
				throw new ArgumentNullException("tableNoPrimaryKeyWithIdentityHistory");
				
			if (@tableNoPrimaryKeyWithIdentityHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableNoPrimaryKeyWithIdentityHistory(unitOfWork, @tableNoPrimaryKeyWithIdentityHistory);
				
				query = wrapper.Disposable.@TableNoPrimaryKeyWithIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableNoPrimaryKeyWithIdentityHistory.@TimestampId && lo.@Id == @tableNoPrimaryKeyWithIdentityHistory.@Id && lo.@Data01 == @tableNoPrimaryKeyWithIdentityHistory.@Data01 && lo.@Data02 == @tableNoPrimaryKeyWithIdentityHistory.@Data02 && lo.@Data03 == @tableNoPrimaryKeyWithIdentityHistory.@Data03 && lo.@Data04 == @tableNoPrimaryKeyWithIdentityHistory.@Data04);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TableNoPrimaryKeyWithIdentityHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableNoPrimaryKeyWithIdentityHistory(unitOfWork, @tableNoPrimaryKeyWithIdentityHistory);
					
					return false;
				}

				this.OnPostDeleteTableNoPrimaryKeyWithIdentityHistory(unitOfWork, @tableNoPrimaryKeyWithIdentityHistory);
				
				@tableNoPrimaryKeyWithIdentityHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableNoPrimaryKeyWithIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);
		
		partial void OnPostInsertTableNoPrimaryKeyWithIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);
		
		partial void OnPreUpdateTableNoPrimaryKeyWithIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);
		
		partial void OnPostUpdateTableNoPrimaryKeyWithIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);
		
		partial void OnSaveConflictTableNoPrimaryKeyWithIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);
		
		partial void OnDiscardConflictTableNoPrimaryKeyWithIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);
				
		partial void OnPreDeleteTableNoPrimaryKeyWithIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);
		
		partial void OnPostDeleteTableNoPrimaryKeyWithIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);
		
		partial void OnSelectTableNoPrimaryKeyWithIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);		

		public TableWithPrimaryKeyNoIdentityHistory LoadTableWithPrimaryKeyNoIdentityHistory(Int64 @timestampId, Int32 @pk)
		{
			TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithPrimaryKeyNoIdentityHistory = this.LoadTableWithPrimaryKeyNoIdentityHistory(unitOfWork, @timestampId, @pk);

					unitOfWork.Complete();
				}
			}
			else
				@tableWithPrimaryKeyNoIdentityHistory = this.LoadTableWithPrimaryKeyNoIdentityHistory(UnitOfWork.Current, @timestampId, @pk);
			
			return @tableWithPrimaryKeyNoIdentityHistory;
		}
		
		public TableWithPrimaryKeyNoIdentityHistory LoadTableWithPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, Int64 @timestampId, Int32 @pk)
		{			
			TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TableWithPrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@Pk == @pk);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithPrimaryKeyNoIdentityHistory = new TableWithPrimaryKeyNoIdentityHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@Pk = query.@Pk,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithPrimaryKeyNoIdentityHistory(unitOfWork, @tableWithPrimaryKeyNoIdentityHistory);

				return @tableWithPrimaryKeyNoIdentityHistory;
			}
		}
		
		public IEnumerable<TableWithPrimaryKeyNoIdentityHistory> FindTableWithPrimaryKeyNoIdentityHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory>> callback)
		{
			IEnumerable<TableWithPrimaryKeyNoIdentityHistory> @tableWithPrimaryKeyNoIdentityHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithPrimaryKeyNoIdentityHistories = this.FindTableWithPrimaryKeyNoIdentityHistories(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @tableWithPrimaryKeyNoIdentityHistories.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@tableWithPrimaryKeyNoIdentityHistories = this.FindTableWithPrimaryKeyNoIdentityHistories(UnitOfWork.Current, callback);
				
				return @tableWithPrimaryKeyNoIdentityHistories; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<TableWithPrimaryKeyNoIdentityHistory> FindTableWithPrimaryKeyNoIdentityHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory>> callback)
		{
			IEnumerable<TableWithPrimaryKeyNoIdentityHistory> @tableWithPrimaryKeyNoIdentityHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TableWithPrimaryKeyNoIdentityHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tableWithPrimaryKeyNoIdentityHistories = queryable.Select(lo => new TableWithPrimaryKeyNoIdentityHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@Pk = lo.@Pk,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory in @tableWithPrimaryKeyNoIdentityHistories)
				{
					this.OnSelectTableWithPrimaryKeyNoIdentityHistory(unitOfWork, @tableWithPrimaryKeyNoIdentityHistory);
					
					yield return @tableWithPrimaryKeyNoIdentityHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTableWithPrimaryKeyNoIdentityHistory(TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTableWithPrimaryKeyNoIdentityHistory(unitOfWork, @tableWithPrimaryKeyNoIdentityHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTableWithPrimaryKeyNoIdentityHistory(UnitOfWork.Current, @tableWithPrimaryKeyNoIdentityHistory);
			
			return retval;
		}
		
		public bool SaveTableWithPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithPrimaryKeyNoIdentityHistory == null)
				throw new ArgumentNullException("tableWithPrimaryKeyNoIdentityHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithPrimaryKeyNoIdentityHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithPrimaryKeyNoIdentityHistory(unitOfWork, @tableWithPrimaryKeyNoIdentityHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory();

					wrapper.Disposable.TableWithPrimaryKeyNoIdentityHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithPrimaryKeyNoIdentityHistory(unitOfWork, @tableWithPrimaryKeyNoIdentityHistory);
					
					query = wrapper.Disposable.TableWithPrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithPrimaryKeyNoIdentityHistory.@TimestampId && lo.@Pk == @tableWithPrimaryKeyNoIdentityHistory.@Pk);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @tableWithPrimaryKeyNoIdentityHistory.@TimestampId;
				query.@Pk = @tableWithPrimaryKeyNoIdentityHistory.@Pk;
				query.@Data01 = @tableWithPrimaryKeyNoIdentityHistory.@Data01;
				query.@Data02 = @tableWithPrimaryKeyNoIdentityHistory.@Data02;
				query.@Data03 = @tableWithPrimaryKeyNoIdentityHistory.@Data03;
				query.@Data04 = @tableWithPrimaryKeyNoIdentityHistory.@Data04;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithPrimaryKeyNoIdentityHistory(unitOfWork, @tableWithPrimaryKeyNoIdentityHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithPrimaryKeyNoIdentityHistory.@TimestampId = query.@TimestampId;
				@tableWithPrimaryKeyNoIdentityHistory.@Pk = query.@Pk;
				@tableWithPrimaryKeyNoIdentityHistory.@Data01 = query.@Data01;
				@tableWithPrimaryKeyNoIdentityHistory.@Data02 = query.@Data02;
				@tableWithPrimaryKeyNoIdentityHistory.@Data03 = query.@Data03;
				@tableWithPrimaryKeyNoIdentityHistory.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithPrimaryKeyNoIdentityHistory(unitOfWork, @tableWithPrimaryKeyNoIdentityHistory);
				}
				else
				{
					this.OnPostUpdateTableWithPrimaryKeyNoIdentityHistory(unitOfWork, @tableWithPrimaryKeyNoIdentityHistory);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithPrimaryKeyNoIdentityHistory(TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTableWithPrimaryKeyNoIdentityHistory(unitOfWork, @tableWithPrimaryKeyNoIdentityHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTableWithPrimaryKeyNoIdentityHistory(UnitOfWork.Current, @tableWithPrimaryKeyNoIdentityHistory);
			
			return retval;
		}
		
		public bool DiscardTableWithPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithPrimaryKeyNoIdentityHistory == null)
				throw new ArgumentNullException("tableWithPrimaryKeyNoIdentityHistory");
				
			if (@tableWithPrimaryKeyNoIdentityHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithPrimaryKeyNoIdentityHistory(unitOfWork, @tableWithPrimaryKeyNoIdentityHistory);
				
				query = wrapper.Disposable.@TableWithPrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithPrimaryKeyNoIdentityHistory.@TimestampId && lo.@Pk == @tableWithPrimaryKeyNoIdentityHistory.@Pk);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TableWithPrimaryKeyNoIdentityHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithPrimaryKeyNoIdentityHistory(unitOfWork, @tableWithPrimaryKeyNoIdentityHistory);
					
					return false;
				}

				this.OnPostDeleteTableWithPrimaryKeyNoIdentityHistory(unitOfWork, @tableWithPrimaryKeyNoIdentityHistory);
				
				@tableWithPrimaryKeyNoIdentityHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);
		
		partial void OnPostInsertTableWithPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);
		
		partial void OnPreUpdateTableWithPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);
		
		partial void OnPostUpdateTableWithPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);
		
		partial void OnSaveConflictTableWithPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);
		
		partial void OnDiscardConflictTableWithPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);
				
		partial void OnPreDeleteTableWithPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);
		
		partial void OnPostDeleteTableWithPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);
		
		partial void OnSelectTableWithPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);		

		public TableWithCompositePrimaryKeyNoIdentityHistory LoadTableWithCompositePrimaryKeyNoIdentityHistory(Int64 @timestampId, Int32 @pk0, Int32 @pk1, Int32 @pk2, Int32 @pk3)
		{
			TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithCompositePrimaryKeyNoIdentityHistory = this.LoadTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWork, @timestampId, @pk0, @pk1, @pk2, @pk3);

					unitOfWork.Complete();
				}
			}
			else
				@tableWithCompositePrimaryKeyNoIdentityHistory = this.LoadTableWithCompositePrimaryKeyNoIdentityHistory(UnitOfWork.Current, @timestampId, @pk0, @pk1, @pk2, @pk3);
			
			return @tableWithCompositePrimaryKeyNoIdentityHistory;
		}
		
		public TableWithCompositePrimaryKeyNoIdentityHistory LoadTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, Int64 @timestampId, Int32 @pk0, Int32 @pk1, Int32 @pk2, Int32 @pk3)
		{			
			TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TableWithCompositePrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@Pk0 == @pk0 && lo.@Pk1 == @pk1 && lo.@Pk2 == @pk2 && lo.@Pk3 == @pk3);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithCompositePrimaryKeyNoIdentityHistory = new TableWithCompositePrimaryKeyNoIdentityHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@Pk0 = query.@Pk0,
									@Pk1 = query.@Pk1,
									@Pk2 = query.@Pk2,
									@Pk3 = query.@Pk3,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWork, @tableWithCompositePrimaryKeyNoIdentityHistory);

				return @tableWithCompositePrimaryKeyNoIdentityHistory;
			}
		}
		
		public IEnumerable<TableWithCompositePrimaryKeyNoIdentityHistory> FindTableWithCompositePrimaryKeyNoIdentityHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory>> callback)
		{
			IEnumerable<TableWithCompositePrimaryKeyNoIdentityHistory> @tableWithCompositePrimaryKeyNoIdentityHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableWithCompositePrimaryKeyNoIdentityHistories = this.FindTableWithCompositePrimaryKeyNoIdentityHistories(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @tableWithCompositePrimaryKeyNoIdentityHistories.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@tableWithCompositePrimaryKeyNoIdentityHistories = this.FindTableWithCompositePrimaryKeyNoIdentityHistories(UnitOfWork.Current, callback);
				
				return @tableWithCompositePrimaryKeyNoIdentityHistories; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<TableWithCompositePrimaryKeyNoIdentityHistory> FindTableWithCompositePrimaryKeyNoIdentityHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory>> callback)
		{
			IEnumerable<TableWithCompositePrimaryKeyNoIdentityHistory> @tableWithCompositePrimaryKeyNoIdentityHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TableWithCompositePrimaryKeyNoIdentityHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tableWithCompositePrimaryKeyNoIdentityHistories = queryable.Select(lo => new TableWithCompositePrimaryKeyNoIdentityHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@Pk0 = lo.@Pk0,
													@Pk1 = lo.@Pk1,
													@Pk2 = lo.@Pk2,
													@Pk3 = lo.@Pk3,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory in @tableWithCompositePrimaryKeyNoIdentityHistories)
				{
					this.OnSelectTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWork, @tableWithCompositePrimaryKeyNoIdentityHistory);
					
					yield return @tableWithCompositePrimaryKeyNoIdentityHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTableWithCompositePrimaryKeyNoIdentityHistory(TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWork, @tableWithCompositePrimaryKeyNoIdentityHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTableWithCompositePrimaryKeyNoIdentityHistory(UnitOfWork.Current, @tableWithCompositePrimaryKeyNoIdentityHistory);
			
			return retval;
		}
		
		public bool SaveTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithCompositePrimaryKeyNoIdentityHistory == null)
				throw new ArgumentNullException("tableWithCompositePrimaryKeyNoIdentityHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithCompositePrimaryKeyNoIdentityHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWork, @tableWithCompositePrimaryKeyNoIdentityHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory();

					wrapper.Disposable.TableWithCompositePrimaryKeyNoIdentityHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWork, @tableWithCompositePrimaryKeyNoIdentityHistory);
					
					query = wrapper.Disposable.TableWithCompositePrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithCompositePrimaryKeyNoIdentityHistory.@TimestampId && lo.@Pk0 == @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk0 && lo.@Pk1 == @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk1 && lo.@Pk2 == @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk2 && lo.@Pk3 == @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk3);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @tableWithCompositePrimaryKeyNoIdentityHistory.@TimestampId;
				query.@Pk0 = @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk0;
				query.@Pk1 = @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk1;
				query.@Pk2 = @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk2;
				query.@Pk3 = @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk3;
				query.@Data01 = @tableWithCompositePrimaryKeyNoIdentityHistory.@Data01;
				query.@Data02 = @tableWithCompositePrimaryKeyNoIdentityHistory.@Data02;
				query.@Data03 = @tableWithCompositePrimaryKeyNoIdentityHistory.@Data03;
				query.@Data04 = @tableWithCompositePrimaryKeyNoIdentityHistory.@Data04;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWork, @tableWithCompositePrimaryKeyNoIdentityHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithCompositePrimaryKeyNoIdentityHistory.@TimestampId = query.@TimestampId;
				@tableWithCompositePrimaryKeyNoIdentityHistory.@Pk0 = query.@Pk0;
				@tableWithCompositePrimaryKeyNoIdentityHistory.@Pk1 = query.@Pk1;
				@tableWithCompositePrimaryKeyNoIdentityHistory.@Pk2 = query.@Pk2;
				@tableWithCompositePrimaryKeyNoIdentityHistory.@Pk3 = query.@Pk3;
				@tableWithCompositePrimaryKeyNoIdentityHistory.@Data01 = query.@Data01;
				@tableWithCompositePrimaryKeyNoIdentityHistory.@Data02 = query.@Data02;
				@tableWithCompositePrimaryKeyNoIdentityHistory.@Data03 = query.@Data03;
				@tableWithCompositePrimaryKeyNoIdentityHistory.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWork, @tableWithCompositePrimaryKeyNoIdentityHistory);
				}
				else
				{
					this.OnPostUpdateTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWork, @tableWithCompositePrimaryKeyNoIdentityHistory);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithCompositePrimaryKeyNoIdentityHistory(TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWork, @tableWithCompositePrimaryKeyNoIdentityHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTableWithCompositePrimaryKeyNoIdentityHistory(UnitOfWork.Current, @tableWithCompositePrimaryKeyNoIdentityHistory);
			
			return retval;
		}
		
		public bool DiscardTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableWithCompositePrimaryKeyNoIdentityHistory == null)
				throw new ArgumentNullException("tableWithCompositePrimaryKeyNoIdentityHistory");
				
			if (@tableWithCompositePrimaryKeyNoIdentityHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWork, @tableWithCompositePrimaryKeyNoIdentityHistory);
				
				query = wrapper.Disposable.@TableWithCompositePrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithCompositePrimaryKeyNoIdentityHistory.@TimestampId && lo.@Pk0 == @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk0 && lo.@Pk1 == @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk1 && lo.@Pk2 == @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk2 && lo.@Pk3 == @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk3);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TableWithCompositePrimaryKeyNoIdentityHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWork, @tableWithCompositePrimaryKeyNoIdentityHistory);
					
					return false;
				}

				this.OnPostDeleteTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWork, @tableWithCompositePrimaryKeyNoIdentityHistory);
				
				@tableWithCompositePrimaryKeyNoIdentityHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);
		
		partial void OnPostInsertTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);
		
		partial void OnPreUpdateTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);
		
		partial void OnPostUpdateTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);
		
		partial void OnSaveConflictTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);
		
		partial void OnDiscardConflictTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);
				
		partial void OnPreDeleteTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);
		
		partial void OnPostDeleteTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);
		
		partial void OnSelectTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);		

		public TableNoPrimaryKeyNoIdentityHistory LoadTableNoPrimaryKeyNoIdentityHistory(Int64 @timestampId, Int32 @value, Boolean @data01, DateTime @data02, Int32 @data03, String @data04)
		{
			TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableNoPrimaryKeyNoIdentityHistory = this.LoadTableNoPrimaryKeyNoIdentityHistory(unitOfWork, @timestampId, @value, @data01, @data02, @data03, @data04);

					unitOfWork.Complete();
				}
			}
			else
				@tableNoPrimaryKeyNoIdentityHistory = this.LoadTableNoPrimaryKeyNoIdentityHistory(UnitOfWork.Current, @timestampId, @value, @data01, @data02, @data03, @data04);
			
			return @tableNoPrimaryKeyNoIdentityHistory;
		}
		
		public TableNoPrimaryKeyNoIdentityHistory LoadTableNoPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, Int64 @timestampId, Int32 @value, Boolean @data01, DateTime @data02, Int32 @data03, String @data04)
		{			
			TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TableNoPrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@Value == @value && lo.@Data01 == @data01 && lo.@Data02 == @data02 && lo.@Data03 == @data03 && lo.@Data04 == @data04);

				if ((object)query == null)
					return null; // does not exist
				
				@tableNoPrimaryKeyNoIdentityHistory = new TableNoPrimaryKeyNoIdentityHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@Value = query.@Value,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableNoPrimaryKeyNoIdentityHistory(unitOfWork, @tableNoPrimaryKeyNoIdentityHistory);

				return @tableNoPrimaryKeyNoIdentityHistory;
			}
		}
		
		public IEnumerable<TableNoPrimaryKeyNoIdentityHistory> FindTableNoPrimaryKeyNoIdentityHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory>> callback)
		{
			IEnumerable<TableNoPrimaryKeyNoIdentityHistory> @tableNoPrimaryKeyNoIdentityHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableNoPrimaryKeyNoIdentityHistories = this.FindTableNoPrimaryKeyNoIdentityHistories(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @tableNoPrimaryKeyNoIdentityHistories.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@tableNoPrimaryKeyNoIdentityHistories = this.FindTableNoPrimaryKeyNoIdentityHistories(UnitOfWork.Current, callback);
				
				return @tableNoPrimaryKeyNoIdentityHistories; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<TableNoPrimaryKeyNoIdentityHistory> FindTableNoPrimaryKeyNoIdentityHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory>> callback)
		{
			IEnumerable<TableNoPrimaryKeyNoIdentityHistory> @tableNoPrimaryKeyNoIdentityHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TableNoPrimaryKeyNoIdentityHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tableNoPrimaryKeyNoIdentityHistories = queryable.Select(lo => new TableNoPrimaryKeyNoIdentityHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@Value = lo.@Value,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory in @tableNoPrimaryKeyNoIdentityHistories)
				{
					this.OnSelectTableNoPrimaryKeyNoIdentityHistory(unitOfWork, @tableNoPrimaryKeyNoIdentityHistory);
					
					yield return @tableNoPrimaryKeyNoIdentityHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTableNoPrimaryKeyNoIdentityHistory(TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTableNoPrimaryKeyNoIdentityHistory(unitOfWork, @tableNoPrimaryKeyNoIdentityHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTableNoPrimaryKeyNoIdentityHistory(UnitOfWork.Current, @tableNoPrimaryKeyNoIdentityHistory);
			
			return retval;
		}
		
		public bool SaveTableNoPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableNoPrimaryKeyNoIdentityHistory == null)
				throw new ArgumentNullException("tableNoPrimaryKeyNoIdentityHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableNoPrimaryKeyNoIdentityHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableNoPrimaryKeyNoIdentityHistory(unitOfWork, @tableNoPrimaryKeyNoIdentityHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory();

					wrapper.Disposable.TableNoPrimaryKeyNoIdentityHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableNoPrimaryKeyNoIdentityHistory(unitOfWork, @tableNoPrimaryKeyNoIdentityHistory);
					
					query = wrapper.Disposable.TableNoPrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableNoPrimaryKeyNoIdentityHistory.@TimestampId && lo.@Value == @tableNoPrimaryKeyNoIdentityHistory.@Value && lo.@Data01 == @tableNoPrimaryKeyNoIdentityHistory.@Data01 && lo.@Data02 == @tableNoPrimaryKeyNoIdentityHistory.@Data02 && lo.@Data03 == @tableNoPrimaryKeyNoIdentityHistory.@Data03 && lo.@Data04 == @tableNoPrimaryKeyNoIdentityHistory.@Data04);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @tableNoPrimaryKeyNoIdentityHistory.@TimestampId;
				query.@Value = @tableNoPrimaryKeyNoIdentityHistory.@Value;
				query.@Data01 = @tableNoPrimaryKeyNoIdentityHistory.@Data01;
				query.@Data02 = @tableNoPrimaryKeyNoIdentityHistory.@Data02;
				query.@Data03 = @tableNoPrimaryKeyNoIdentityHistory.@Data03;
				query.@Data04 = @tableNoPrimaryKeyNoIdentityHistory.@Data04;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableNoPrimaryKeyNoIdentityHistory(unitOfWork, @tableNoPrimaryKeyNoIdentityHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableNoPrimaryKeyNoIdentityHistory.@TimestampId = query.@TimestampId;
				@tableNoPrimaryKeyNoIdentityHistory.@Value = query.@Value;
				@tableNoPrimaryKeyNoIdentityHistory.@Data01 = query.@Data01;
				@tableNoPrimaryKeyNoIdentityHistory.@Data02 = query.@Data02;
				@tableNoPrimaryKeyNoIdentityHistory.@Data03 = query.@Data03;
				@tableNoPrimaryKeyNoIdentityHistory.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableNoPrimaryKeyNoIdentityHistory(unitOfWork, @tableNoPrimaryKeyNoIdentityHistory);
				}
				else
				{
					this.OnPostUpdateTableNoPrimaryKeyNoIdentityHistory(unitOfWork, @tableNoPrimaryKeyNoIdentityHistory);
				}

				return true;
			}
		}
		
		public bool DiscardTableNoPrimaryKeyNoIdentityHistory(TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTableNoPrimaryKeyNoIdentityHistory(unitOfWork, @tableNoPrimaryKeyNoIdentityHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTableNoPrimaryKeyNoIdentityHistory(UnitOfWork.Current, @tableNoPrimaryKeyNoIdentityHistory);
			
			return retval;
		}
		
		public bool DiscardTableNoPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableNoPrimaryKeyNoIdentityHistory == null)
				throw new ArgumentNullException("tableNoPrimaryKeyNoIdentityHistory");
				
			if (@tableNoPrimaryKeyNoIdentityHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableNoPrimaryKeyNoIdentityHistory(unitOfWork, @tableNoPrimaryKeyNoIdentityHistory);
				
				query = wrapper.Disposable.@TableNoPrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableNoPrimaryKeyNoIdentityHistory.@TimestampId && lo.@Value == @tableNoPrimaryKeyNoIdentityHistory.@Value && lo.@Data01 == @tableNoPrimaryKeyNoIdentityHistory.@Data01 && lo.@Data02 == @tableNoPrimaryKeyNoIdentityHistory.@Data02 && lo.@Data03 == @tableNoPrimaryKeyNoIdentityHistory.@Data03 && lo.@Data04 == @tableNoPrimaryKeyNoIdentityHistory.@Data04);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TableNoPrimaryKeyNoIdentityHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableNoPrimaryKeyNoIdentityHistory(unitOfWork, @tableNoPrimaryKeyNoIdentityHistory);
					
					return false;
				}

				this.OnPostDeleteTableNoPrimaryKeyNoIdentityHistory(unitOfWork, @tableNoPrimaryKeyNoIdentityHistory);
				
				@tableNoPrimaryKeyNoIdentityHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableNoPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);
		
		partial void OnPostInsertTableNoPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);
		
		partial void OnPreUpdateTableNoPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);
		
		partial void OnPostUpdateTableNoPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);
		
		partial void OnSaveConflictTableNoPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);
		
		partial void OnDiscardConflictTableNoPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);
				
		partial void OnPreDeleteTableNoPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);
		
		partial void OnPostDeleteTableNoPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);
		
		partial void OnSelectTableNoPrimaryKeyNoIdentityHistory(IUnitOfWork unitOfWork, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);		

		public TableTypeTestHistory LoadTableTypeTestHistory(Int64 @timestampId, Int32 @pkId)
		{
			TableTypeTestHistory @tableTypeTestHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableTypeTestHistory = this.LoadTableTypeTestHistory(unitOfWork, @timestampId, @pkId);

					unitOfWork.Complete();
				}
			}
			else
				@tableTypeTestHistory = this.LoadTableTypeTestHistory(UnitOfWork.Current, @timestampId, @pkId);
			
			return @tableTypeTestHistory;
		}
		
		public TableTypeTestHistory LoadTableTypeTestHistory(IUnitOfWork unitOfWork, Int64 @timestampId, Int32 @pkId)
		{			
			TableTypeTestHistory @tableTypeTestHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.TableTypeTestHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@PkId == @pkId);

				if ((object)query == null)
					return null; // does not exist
				
				@tableTypeTestHistory = new TableTypeTestHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@PkId = query.@PkId,
									@Data00 = query.@Data00,
									@Data01 = (object)query.Data01 != null ? query.@Data01.ToArray() : null,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data05 = query.@Data05,
									@Data06 = query.@Data06,
									@Data07 = query.@Data07,
									@Data08 = query.@Data08,
									@Data09 = query.@Data09,
									@Data10 = query.@Data10,
									@Data12 = (object)query.Data12 != null ? query.@Data12.ToArray() : null,
									@Data13 = query.@Data13,
									@Data14 = query.@Data14,
									@Data15 = query.@Data15,
									@Data16 = query.@Data16,
									@Data17 = query.@Data17,
									@Data18 = query.@Data18,
									@Data19 = query.@Data19,
									@Data20 = query.@Data20,
									@Data21 = query.@Data21,
									@Data22 = query.@Data22,
									@Data26 = query.@Data26,
									@Data27 = query.@Data27,
									@Data29 = query.@Data29,
									@Data30 = query.@Data30,
									@Data31 = (object)query.Data31 != null ? query.@Data31.ToArray() : null,
									@Data32 = query.@Data32
								};	

				this.OnSelectTableTypeTestHistory(unitOfWork, @tableTypeTestHistory);

				return @tableTypeTestHistory;
			}
		}
		
		public IEnumerable<TableTypeTestHistory> FindTableTypeTestHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory>> callback)
		{
			IEnumerable<TableTypeTestHistory> @tableTypeTestHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@tableTypeTestHistories = this.FindTableTypeTestHistories(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @tableTypeTestHistories.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@tableTypeTestHistories = this.FindTableTypeTestHistories(UnitOfWork.Current, callback);
				
				return @tableTypeTestHistories; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<TableTypeTestHistory> FindTableTypeTestHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory>> callback)
		{
			IEnumerable<TableTypeTestHistory> @tableTypeTestHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@TableTypeTestHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@tableTypeTestHistories = queryable.Select(lo => new TableTypeTestHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@PkId = lo.@PkId,
													@Data00 = lo.@Data00,
													@Data01 = (object)lo.@Data01 != null ? lo.@Data01.ToArray() : null,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data05 = lo.@Data05,
													@Data06 = lo.@Data06,
													@Data07 = lo.@Data07,
													@Data08 = lo.@Data08,
													@Data09 = lo.@Data09,
													@Data10 = lo.@Data10,
													@Data12 = (object)lo.@Data12 != null ? lo.@Data12.ToArray() : null,
													@Data13 = lo.@Data13,
													@Data14 = lo.@Data14,
													@Data15 = lo.@Data15,
													@Data16 = lo.@Data16,
													@Data17 = lo.@Data17,
													@Data18 = lo.@Data18,
													@Data19 = lo.@Data19,
													@Data20 = lo.@Data20,
													@Data21 = lo.@Data21,
													@Data22 = lo.@Data22,
													@Data26 = lo.@Data26,
													@Data27 = lo.@Data27,
													@Data29 = lo.@Data29,
													@Data30 = lo.@Data30,
													@Data31 = (object)lo.@Data31 != null ? lo.@Data31.ToArray() : null,
													@Data32 = lo.@Data32
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TableTypeTestHistory @tableTypeTestHistory in @tableTypeTestHistories)
				{
					this.OnSelectTableTypeTestHistory(unitOfWork, @tableTypeTestHistory);
					
					yield return @tableTypeTestHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveTableTypeTestHistory(TableTypeTestHistory @tableTypeTestHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveTableTypeTestHistory(unitOfWork, @tableTypeTestHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveTableTypeTestHistory(UnitOfWork.Current, @tableTypeTestHistory);
			
			return retval;
		}
		
		public bool SaveTableTypeTestHistory(IUnitOfWork unitOfWork, TableTypeTestHistory @tableTypeTestHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableTypeTestHistory == null)
				throw new ArgumentNullException("tableTypeTestHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableTypeTestHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableTypeTestHistory(unitOfWork, @tableTypeTestHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory();

					wrapper.Disposable.TableTypeTestHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableTypeTestHistory(unitOfWork, @tableTypeTestHistory);
					
					query = wrapper.Disposable.TableTypeTestHistories.SingleOrDefault(lo => lo.@TimestampId == @tableTypeTestHistory.@TimestampId && lo.@PkId == @tableTypeTestHistory.@PkId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @tableTypeTestHistory.@TimestampId;
				query.@PkId = @tableTypeTestHistory.@PkId;
				query.@Data00 = @tableTypeTestHistory.@Data00;
				query.@Data01 = @tableTypeTestHistory.@Data01;
				query.@Data02 = @tableTypeTestHistory.@Data02;
				query.@Data03 = @tableTypeTestHistory.@Data03;
				query.@Data05 = @tableTypeTestHistory.@Data05;
				query.@Data06 = @tableTypeTestHistory.@Data06;
				query.@Data07 = @tableTypeTestHistory.@Data07;
				query.@Data08 = @tableTypeTestHistory.@Data08;
				query.@Data09 = @tableTypeTestHistory.@Data09;
				query.@Data10 = @tableTypeTestHistory.@Data10;
				if ((object)@tableTypeTestHistory.@Data12 != null) // prevent implicit conversion of null -> exception
					query.@Data12 = @tableTypeTestHistory.@Data12;
				query.@Data13 = @tableTypeTestHistory.@Data13;
				query.@Data14 = @tableTypeTestHistory.@Data14;
				query.@Data15 = @tableTypeTestHistory.@Data15;
				query.@Data16 = @tableTypeTestHistory.@Data16;
				query.@Data17 = @tableTypeTestHistory.@Data17;
				query.@Data18 = @tableTypeTestHistory.@Data18;
				query.@Data19 = @tableTypeTestHistory.@Data19;
				query.@Data20 = @tableTypeTestHistory.@Data20;
				query.@Data21 = @tableTypeTestHistory.@Data21;
				query.@Data22 = @tableTypeTestHistory.@Data22;
				query.@Data26 = @tableTypeTestHistory.@Data26;
				query.@Data27 = @tableTypeTestHistory.@Data27;
				query.@Data29 = @tableTypeTestHistory.@Data29;
				query.@Data30 = @tableTypeTestHistory.@Data30;
				query.@Data31 = @tableTypeTestHistory.@Data31;
				query.@Data32 = @tableTypeTestHistory.@Data32;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableTypeTestHistory(unitOfWork, @tableTypeTestHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableTypeTestHistory.@TimestampId = query.@TimestampId;
				@tableTypeTestHistory.@PkId = query.@PkId;
				@tableTypeTestHistory.@Data00 = query.@Data00;
				@tableTypeTestHistory.@Data01 = (object)query.@Data01 != null ? query.@Data01.ToArray() : null;
				@tableTypeTestHistory.@Data02 = query.@Data02;
				@tableTypeTestHistory.@Data03 = query.@Data03;
				@tableTypeTestHistory.@Data05 = query.@Data05;
				@tableTypeTestHistory.@Data06 = query.@Data06;
				@tableTypeTestHistory.@Data07 = query.@Data07;
				@tableTypeTestHistory.@Data08 = query.@Data08;
				@tableTypeTestHistory.@Data09 = query.@Data09;
				@tableTypeTestHistory.@Data10 = query.@Data10;
				@tableTypeTestHistory.@Data12 = (object)query.@Data12 != null ? query.@Data12.ToArray() : null;
				@tableTypeTestHistory.@Data13 = query.@Data13;
				@tableTypeTestHistory.@Data14 = query.@Data14;
				@tableTypeTestHistory.@Data15 = query.@Data15;
				@tableTypeTestHistory.@Data16 = query.@Data16;
				@tableTypeTestHistory.@Data17 = query.@Data17;
				@tableTypeTestHistory.@Data18 = query.@Data18;
				@tableTypeTestHistory.@Data19 = query.@Data19;
				@tableTypeTestHistory.@Data20 = query.@Data20;
				@tableTypeTestHistory.@Data21 = query.@Data21;
				@tableTypeTestHistory.@Data22 = query.@Data22;
				@tableTypeTestHistory.@Data26 = query.@Data26;
				@tableTypeTestHistory.@Data27 = query.@Data27;
				@tableTypeTestHistory.@Data29 = query.@Data29;
				@tableTypeTestHistory.@Data30 = query.@Data30;
				@tableTypeTestHistory.@Data31 = (object)query.@Data31 != null ? query.@Data31.ToArray() : null;
				@tableTypeTestHistory.@Data32 = query.@Data32;
						
				if (wasNew)
				{
					this.OnPostInsertTableTypeTestHistory(unitOfWork, @tableTypeTestHistory);
				}
				else
				{
					this.OnPostUpdateTableTypeTestHistory(unitOfWork, @tableTypeTestHistory);
				}

				return true;
			}
		}
		
		public bool DiscardTableTypeTestHistory(TableTypeTestHistory @tableTypeTestHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardTableTypeTestHistory(unitOfWork, @tableTypeTestHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardTableTypeTestHistory(UnitOfWork.Current, @tableTypeTestHistory);
			
			return retval;
		}
		
		public bool DiscardTableTypeTestHistory(IUnitOfWork unitOfWork, TableTypeTestHistory @tableTypeTestHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@tableTypeTestHistory == null)
				throw new ArgumentNullException("tableTypeTestHistory");
				
			if (@tableTypeTestHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableTypeTestHistory(unitOfWork, @tableTypeTestHistory);
				
				query = wrapper.Disposable.@TableTypeTestHistories.SingleOrDefault(lo => lo.@TimestampId == @tableTypeTestHistory.@TimestampId && lo.@PkId == @tableTypeTestHistory.@PkId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@TableTypeTestHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableTypeTestHistory(unitOfWork, @tableTypeTestHistory);
					
					return false;
				}

				this.OnPostDeleteTableTypeTestHistory(unitOfWork, @tableTypeTestHistory);
				
				@tableTypeTestHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableTypeTestHistory(IUnitOfWork unitOfWork, TableTypeTestHistory @tableTypeTestHistory);
		
		partial void OnPostInsertTableTypeTestHistory(IUnitOfWork unitOfWork, TableTypeTestHistory @tableTypeTestHistory);
		
		partial void OnPreUpdateTableTypeTestHistory(IUnitOfWork unitOfWork, TableTypeTestHistory @tableTypeTestHistory);
		
		partial void OnPostUpdateTableTypeTestHistory(IUnitOfWork unitOfWork, TableTypeTestHistory @tableTypeTestHistory);
		
		partial void OnSaveConflictTableTypeTestHistory(IUnitOfWork unitOfWork, TableTypeTestHistory @tableTypeTestHistory);
		
		partial void OnDiscardConflictTableTypeTestHistory(IUnitOfWork unitOfWork, TableTypeTestHistory @tableTypeTestHistory);
				
		partial void OnPreDeleteTableTypeTestHistory(IUnitOfWork unitOfWork, TableTypeTestHistory @tableTypeTestHistory);
		
		partial void OnPostDeleteTableTypeTestHistory(IUnitOfWork unitOfWork, TableTypeTestHistory @tableTypeTestHistory);
		
		partial void OnSelectTableTypeTestHistory(IUnitOfWork unitOfWork, TableTypeTestHistory @tableTypeTestHistory);		

		public SexualChocolateHistory LoadSexualChocolateHistory(Int64 @timestampId, Int32 @sexualChocolateId)
		{
			SexualChocolateHistory @sexualChocolateHistory;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@sexualChocolateHistory = this.LoadSexualChocolateHistory(unitOfWork, @timestampId, @sexualChocolateId);

					unitOfWork.Complete();
				}
			}
			else
				@sexualChocolateHistory = this.LoadSexualChocolateHistory(UnitOfWork.Current, @timestampId, @sexualChocolateId);
			
			return @sexualChocolateHistory;
		}
		
		public SexualChocolateHistory LoadSexualChocolateHistory(IUnitOfWork unitOfWork, Int64 @timestampId, Int32 @sexualChocolateId)
		{			
			SexualChocolateHistory @sexualChocolateHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.SexualChocolateHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@SexualChocolateId == @sexualChocolateId);

				if ((object)query == null)
					return null; // does not exist
				
				@sexualChocolateHistory = new SexualChocolateHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@SexualChocolateId = query.@SexualChocolateId,
									@Em = query.@Em,
									@Blob = (object)query.Blob != null ? query.@Blob.ToArray() : null,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectSexualChocolateHistory(unitOfWork, @sexualChocolateHistory);

				return @sexualChocolateHistory;
			}
		}
		
		public IEnumerable<SexualChocolateHistory> FindSexualChocolateHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory>> callback)
		{
			IEnumerable<SexualChocolateHistory> @sexualChocolateHistories;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@sexualChocolateHistories = this.FindSexualChocolateHistories(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @sexualChocolateHistories.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@sexualChocolateHistories = this.FindSexualChocolateHistories(UnitOfWork.Current, callback);
				
				return @sexualChocolateHistories; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<SexualChocolateHistory> FindSexualChocolateHistories(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory>> callback)
		{
			IEnumerable<SexualChocolateHistory> @sexualChocolateHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@SexualChocolateHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@sexualChocolateHistories = queryable.Select(lo => new SexualChocolateHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@SexualChocolateId = lo.@SexualChocolateId,
													@Em = lo.@Em,
													@Blob = (object)lo.@Blob != null ? lo.@Blob.ToArray() : null,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (SexualChocolateHistory @sexualChocolateHistory in @sexualChocolateHistories)
				{
					this.OnSelectSexualChocolateHistory(unitOfWork, @sexualChocolateHistory);
					
					yield return @sexualChocolateHistory; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveSexualChocolateHistory(SexualChocolateHistory @sexualChocolateHistory)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveSexualChocolateHistory(unitOfWork, @sexualChocolateHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveSexualChocolateHistory(UnitOfWork.Current, @sexualChocolateHistory);
			
			return retval;
		}
		
		public bool SaveSexualChocolateHistory(IUnitOfWork unitOfWork, SexualChocolateHistory @sexualChocolateHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@sexualChocolateHistory == null)
				throw new ArgumentNullException("sexualChocolateHistory");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @sexualChocolateHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertSexualChocolateHistory(unitOfWork, @sexualChocolateHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory();

					wrapper.Disposable.SexualChocolateHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateSexualChocolateHistory(unitOfWork, @sexualChocolateHistory);
					
					query = wrapper.Disposable.SexualChocolateHistories.SingleOrDefault(lo => lo.@TimestampId == @sexualChocolateHistory.@TimestampId && lo.@SexualChocolateId == @sexualChocolateHistory.@SexualChocolateId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @sexualChocolateHistory.@TimestampId;
				query.@SexualChocolateId = @sexualChocolateHistory.@SexualChocolateId;
				query.@Em = @sexualChocolateHistory.@Em;
				query.@Blob = @sexualChocolateHistory.@Blob;
				query.@CreationTimestamp = @sexualChocolateHistory.@CreationTimestamp;
				query.@ModificationTimestamp = @sexualChocolateHistory.@ModificationTimestamp;
				query.@LogicalDelete = @sexualChocolateHistory.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictSexualChocolateHistory(unitOfWork, @sexualChocolateHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@sexualChocolateHistory.@TimestampId = query.@TimestampId;
				@sexualChocolateHistory.@SexualChocolateId = query.@SexualChocolateId;
				@sexualChocolateHistory.@Em = query.@Em;
				@sexualChocolateHistory.@Blob = (object)query.@Blob != null ? query.@Blob.ToArray() : null;
				@sexualChocolateHistory.@CreationTimestamp = query.@CreationTimestamp;
				@sexualChocolateHistory.@ModificationTimestamp = query.@ModificationTimestamp;
				@sexualChocolateHistory.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertSexualChocolateHistory(unitOfWork, @sexualChocolateHistory);
				}
				else
				{
					this.OnPostUpdateSexualChocolateHistory(unitOfWork, @sexualChocolateHistory);
				}

				return true;
			}
		}
		
		public bool DiscardSexualChocolateHistory(SexualChocolateHistory @sexualChocolateHistory)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardSexualChocolateHistory(unitOfWork, @sexualChocolateHistory);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardSexualChocolateHistory(UnitOfWork.Current, @sexualChocolateHistory);
			
			return retval;
		}
		
		public bool DiscardSexualChocolateHistory(IUnitOfWork unitOfWork, SexualChocolateHistory @sexualChocolateHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@sexualChocolateHistory == null)
				throw new ArgumentNullException("sexualChocolateHistory");
				
			if (@sexualChocolateHistory.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteSexualChocolateHistory(unitOfWork, @sexualChocolateHistory);
				
				query = wrapper.Disposable.@SexualChocolateHistories.SingleOrDefault(lo => lo.@TimestampId == @sexualChocolateHistory.@TimestampId && lo.@SexualChocolateId == @sexualChocolateHistory.@SexualChocolateId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@SexualChocolateHistories.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictSexualChocolateHistory(unitOfWork, @sexualChocolateHistory);
					
					return false;
				}

				this.OnPostDeleteSexualChocolateHistory(unitOfWork, @sexualChocolateHistory);
				
				@sexualChocolateHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertSexualChocolateHistory(IUnitOfWork unitOfWork, SexualChocolateHistory @sexualChocolateHistory);
		
		partial void OnPostInsertSexualChocolateHistory(IUnitOfWork unitOfWork, SexualChocolateHistory @sexualChocolateHistory);
		
		partial void OnPreUpdateSexualChocolateHistory(IUnitOfWork unitOfWork, SexualChocolateHistory @sexualChocolateHistory);
		
		partial void OnPostUpdateSexualChocolateHistory(IUnitOfWork unitOfWork, SexualChocolateHistory @sexualChocolateHistory);
		
		partial void OnSaveConflictSexualChocolateHistory(IUnitOfWork unitOfWork, SexualChocolateHistory @sexualChocolateHistory);
		
		partial void OnDiscardConflictSexualChocolateHistory(IUnitOfWork unitOfWork, SexualChocolateHistory @sexualChocolateHistory);
				
		partial void OnPreDeleteSexualChocolateHistory(IUnitOfWork unitOfWork, SexualChocolateHistory @sexualChocolateHistory);
		
		partial void OnPostDeleteSexualChocolateHistory(IUnitOfWork unitOfWork, SexualChocolateHistory @sexualChocolateHistory);
		
		partial void OnSelectSexualChocolateHistory(IUnitOfWork unitOfWork, SexualChocolateHistory @sexualChocolateHistory);		
		public SexualChocolate LoadSexualChocolate(Int32 @sexualChocolateId)
		{
			SexualChocolate @sexualChocolate;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@sexualChocolate = this.LoadSexualChocolate(unitOfWork, @sexualChocolateId);

					unitOfWork.Complete();
				}
			}
			else
				@sexualChocolate = this.LoadSexualChocolate(UnitOfWork.Current, @sexualChocolateId);
			
			return @sexualChocolate;
		}
		
		public SexualChocolate LoadSexualChocolate(IUnitOfWork unitOfWork, Int32 @sexualChocolateId)
		{			
			SexualChocolate @sexualChocolate;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
										
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = wrapper.Disposable.SexualChocolates.SingleOrDefault(lo => lo.@SexualChocolateId == @sexualChocolateId);

				if ((object)query == null)
					return null; // does not exist
				
				@sexualChocolate = new SexualChocolate()
								{
									// map result to POCO from L2S object
									@SexualChocolateId = query.@SexualChocolateId,
									@Em = query.@Em,
									@Blob = (object)query.Blob != null ? query.@Blob.ToArray() : null,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectSexualChocolate(unitOfWork, @sexualChocolate);

				return @sexualChocolate;
			}
		}
		
		public IEnumerable<SexualChocolate> FindSexualChocolates(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate>> callback)
		{
			IEnumerable<SexualChocolate> @sexualChocolates;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@sexualChocolates = this.FindSexualChocolates(unitOfWork, callback);

					unitOfWork.Complete();
					
					return @sexualChocolates.ToList(); // FORCE EAGER LOAD
				}
			}
			else
			{
				@sexualChocolates = this.FindSexualChocolates(UnitOfWork.Current, callback);
				
				return @sexualChocolates; // DO NOT FORCE EAGER LOAD
			}
		}
		
		public IEnumerable<SexualChocolate> FindSexualChocolates(IUnitOfWork unitOfWork, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate>> callback)
		{
			IEnumerable<SexualChocolate> @sexualChocolates;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate> queryable;			
			
			if ((object)unitOfWork == null)		
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(wrapper.Disposable.@SexualChocolates);
				
				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				@sexualChocolates = queryable.Select(lo => new SexualChocolate()
												 {
													// map results to POCOs from L2S objects
													@SexualChocolateId = lo.@SexualChocolateId,
													@Em = lo.@Em,
													@Blob = (object)lo.@Blob != null ? lo.@Blob.ToArray() : null,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@LogicalDelete = lo.@LogicalDelete
												 }); // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (SexualChocolate @sexualChocolate in @sexualChocolates)
				{
					this.OnSelectSexualChocolate(unitOfWork, @sexualChocolate);
					
					yield return @sexualChocolate; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}				
			}			
		}
		
		public bool SaveSexualChocolate(SexualChocolate @sexualChocolate)
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.SaveSexualChocolate(unitOfWork, @sexualChocolate);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.SaveSexualChocolate(UnitOfWork.Current, @sexualChocolate);
			
			return retval;
		}
		
		public bool SaveSexualChocolate(IUnitOfWork unitOfWork, SexualChocolate @sexualChocolate)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate query;
			bool wasNew;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@sexualChocolate == null)
				throw new ArgumentNullException("sexualChocolate");
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @sexualChocolate.IsNew;

				if (wasNew)
				{
					this.OnPreInsertSexualChocolate(unitOfWork, @sexualChocolate);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate();

					wrapper.Disposable.SexualChocolates.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateSexualChocolate(unitOfWork, @sexualChocolate);
					
					query = wrapper.Disposable.SexualChocolates.SingleOrDefault(lo => lo.@SexualChocolateId == @sexualChocolate.@SexualChocolateId);

					if((object)query == null)
						throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				}

				// map caller POCO changes to L2S object
				query.@SexualChocolateId = @sexualChocolate.@SexualChocolateId;
				query.@Em = @sexualChocolate.@Em;
				query.@Blob = @sexualChocolate.@Blob;
				query.@CreationTimestamp = @sexualChocolate.@CreationTimestamp;
				query.@ModificationTimestamp = @sexualChocolate.@ModificationTimestamp;
				query.@LogicalDelete = @sexualChocolate.@LogicalDelete;		
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictSexualChocolate(unitOfWork, @sexualChocolate);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@sexualChocolate.@SexualChocolateId = query.@SexualChocolateId;
				@sexualChocolate.@Em = query.@Em;
				@sexualChocolate.@Blob = (object)query.@Blob != null ? query.@Blob.ToArray() : null;
				@sexualChocolate.@CreationTimestamp = query.@CreationTimestamp;
				@sexualChocolate.@ModificationTimestamp = query.@ModificationTimestamp;
				@sexualChocolate.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertSexualChocolate(unitOfWork, @sexualChocolate);
				}
				else
				{
					this.OnPostUpdateSexualChocolate(unitOfWork, @sexualChocolate);
				}

				return true;
			}
		}
		
		public bool DiscardSexualChocolate(SexualChocolate @sexualChocolate)
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.DiscardSexualChocolate(unitOfWork, @sexualChocolate);

					unitOfWork.Complete();
				}
			}
			else
				retval = this.DiscardSexualChocolate(UnitOfWork.Current, @sexualChocolate);
			
			return retval;
		}
		
		public bool DiscardSexualChocolate(IUnitOfWork unitOfWork, SexualChocolate @sexualChocolate)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate query;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@sexualChocolate == null)
				throw new ArgumentNullException("sexualChocolate");
				
			if (@sexualChocolate.IsNew)
				return true;
				
			using (AmbientUnitOfWorkAwareDisposableWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> wrapper = unitOfWork.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteSexualChocolate(unitOfWork, @sexualChocolate);
				
				query = wrapper.Disposable.@SexualChocolates.SingleOrDefault(lo => lo.@SexualChocolateId == @sexualChocolate.@SexualChocolateId);

				if((object)query == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));
				
				wrapper.Disposable.@SexualChocolates.DeleteOnSubmit(query);
				
				try
				{
					wrapper.Disposable.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictSexualChocolate(unitOfWork, @sexualChocolate);
					
					return false;
				}

				this.OnPostDeleteSexualChocolate(unitOfWork, @sexualChocolate);
				
				@sexualChocolate.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertSexualChocolate(IUnitOfWork unitOfWork, SexualChocolate @sexualChocolate);
		
		partial void OnPostInsertSexualChocolate(IUnitOfWork unitOfWork, SexualChocolate @sexualChocolate);
		
		partial void OnPreUpdateSexualChocolate(IUnitOfWork unitOfWork, SexualChocolate @sexualChocolate);
		
		partial void OnPostUpdateSexualChocolate(IUnitOfWork unitOfWork, SexualChocolate @sexualChocolate);
		
		partial void OnSaveConflictSexualChocolate(IUnitOfWork unitOfWork, SexualChocolate @sexualChocolate);
		
		partial void OnDiscardConflictSexualChocolate(IUnitOfWork unitOfWork, SexualChocolate @sexualChocolate);
				
		partial void OnPreDeleteSexualChocolate(IUnitOfWork unitOfWork, SexualChocolate @sexualChocolate);
		
		partial void OnPostDeleteSexualChocolate(IUnitOfWork unitOfWork, SexualChocolate @sexualChocolate);
		
		partial void OnSelectSexualChocolate(IUnitOfWork unitOfWork, SexualChocolate @sexualChocolate);		

		#endregion
	}
}
