//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by:
// TextMetal 5.0.3.40772;
// 		Copyright ©2002-2013 Daniel Bullington (dpbullington@gmail.com)
//		Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
//		Project URL: https://github.com/dpbullington/textmetal
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------

/*
	Copyright ©2002-2013 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Linq;
using System.Linq;
using System.Xml;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
using TextMetal.Common.Data.LinqToSql;

using TextMetal.HostImpl.AspNetSample.Objects.Model.Tables;
using TextMetal.HostImpl.AspNetSample.Objects.Model.Views;

namespace TextMetal.HostImpl.AspNetSample.Objects.Model
{
	public partial class Repository
	{		
		#region Methods/Operators
		
		public EventLog LoadEventLog(Int32 @eventLogId)
		{
			EventLog retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1) => this.LoadEventLog(uowc, p1), @eventLogId);
			
			return retval;
		}
		
		public EventLog LoadEventLog(IUnitOfWorkContext unitOfWorkContext, Int32 @eventLogId)
		{			
			EventLog @eventLog;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.EventLogs.SingleOrDefault(lo => lo.@EventLogId == @eventLogId);

				if ((object)query == null)
					return null; // does not exist
				
				@eventLog = new EventLog()
								{
									// map result to POCO from L2S object
									@EventLogId = query.@EventLogId,
									@EventText = query.@EventText,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEventLog(unitOfWorkContext, @eventLog);

				return @eventLog;
			}
		}
		
		public IList<EventLog> FindEventLogs(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog>> callback)
		{
			IList<EventLog> @eventLogs;
			
			@eventLogs = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindEventLogs(uowc, e), callback);
			
			return @eventLogs;
		}
		
		public IList<EventLog> FindEventLogs(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog>> callback)
		{
			IList<EventLog> @eventLogs;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@EventLogs);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@eventLogs = queryable.Select(lo => new EventLog()
												 {
													// map results to POCOs from L2S objects
													@EventLogId = lo.@EventLogId,
													@EventText = lo.@EventText,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@LogicalDelete = lo.@LogicalDelete
												 }).ToList(); // force execution against store

				foreach (EventLog @eventLog in @eventLogs)
					this.OnSelectEventLog(unitOfWorkContext, @eventLog);
				
				return @eventLogs;
			}			
		}
		
		public bool SaveEventLog(EventLog @eventLog)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveEventLog(uowc, e), @eventLog);
			
			return retval;
		}
		
		public bool SaveEventLog(IUnitOfWorkContext unitOfWorkContext, EventLog @eventLog)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@eventLog == null)
				throw new ArgumentNullException("eventLog");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @eventLog.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEventLog(unitOfWorkContext, @eventLog);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog();

					ctx.Context.EventLogs.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEventLog(unitOfWorkContext, @eventLog);
					
					query = ctx.Context.EventLogs.SingleOrDefault(lo => lo.@EventLogId == @eventLog.@EventLogId);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@EventLogId = @eventLog.@EventLogId;
				query.@EventText = @eventLog.@EventText;
				query.@CreationTimestamp = @eventLog.@CreationTimestamp;
				query.@ModificationTimestamp = @eventLog.@ModificationTimestamp;
				query.@LogicalDelete = @eventLog.@LogicalDelete;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEventLog(unitOfWorkContext, @eventLog);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@eventLog.@EventLogId = query.@EventLogId;
				@eventLog.@EventText = query.@EventText;
				@eventLog.@CreationTimestamp = query.@CreationTimestamp;
				@eventLog.@ModificationTimestamp = query.@ModificationTimestamp;
				@eventLog.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEventLog(unitOfWorkContext, @eventLog);
				}
				else
				{
					this.OnPostUpdateEventLog(unitOfWorkContext, @eventLog);
				}

				return true;
			}
		}
		
		public bool DiscardEventLog(EventLog @eventLog)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardEventLog(uowc, e), @eventLog);
			
			return retval;
		}
		
		public bool DiscardEventLog(IUnitOfWorkContext unitOfWorkContext, EventLog @eventLog)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLog query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@eventLog == null)
				throw new ArgumentNullException("eventLog");
				
			if (@eventLog.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEventLog(unitOfWorkContext, @eventLog);
				
				query = ctx.Context.@EventLogs.SingleOrDefault(lo => lo.@EventLogId == @eventLog.@EventLogId);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@EventLogs.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEventLog(unitOfWorkContext, @eventLog);
					
					return false;
				}

				this.OnPostDeleteEventLog(unitOfWorkContext, @eventLog);
				
				@eventLog.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEventLog(IUnitOfWorkContext unitOfWorkContext, EventLog @eventLog);
		
		partial void OnPostInsertEventLog(IUnitOfWorkContext unitOfWorkContext, EventLog @eventLog);
		
		partial void OnPreUpdateEventLog(IUnitOfWorkContext unitOfWorkContext, EventLog @eventLog);
		
		partial void OnPostUpdateEventLog(IUnitOfWorkContext unitOfWorkContext, EventLog @eventLog);
		
		partial void OnSaveConflictEventLog(IUnitOfWorkContext unitOfWorkContext, EventLog @eventLog);
		
		partial void OnDiscardConflictEventLog(IUnitOfWorkContext unitOfWorkContext, EventLog @eventLog);
				
		partial void OnPreDeleteEventLog(IUnitOfWorkContext unitOfWorkContext, EventLog @eventLog);
		
		partial void OnPostDeleteEventLog(IUnitOfWorkContext unitOfWorkContext, EventLog @eventLog);
		
		partial void OnSelectEventLog(IUnitOfWorkContext unitOfWorkContext, EventLog @eventLog);		

		public EmailMessage LoadEmailMessage(Int32 @emailMessageId)
		{
			EmailMessage retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1) => this.LoadEmailMessage(uowc, p1), @emailMessageId);
			
			return retval;
		}
		
		public EmailMessage LoadEmailMessage(IUnitOfWorkContext unitOfWorkContext, Int32 @emailMessageId)
		{			
			EmailMessage @emailMessage;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.EmailMessages.SingleOrDefault(lo => lo.@EmailMessageId == @emailMessageId);

				if ((object)query == null)
					return null; // does not exist
				
				@emailMessage = new EmailMessage()
								{
									// map result to POCO from L2S object
									@EmailMessageId = query.@EmailMessageId,
									@From = query.@From,
									@Sender = query.@Sender,
									@ReplyTo = query.@ReplyTo,
									@To = query.@To,
									@CarbonCopy = query.@CarbonCopy,
									@BlindCarbonCopy = query.@BlindCarbonCopy,
									@Subject = query.@Subject,
									@IsBodyHtml = query.@IsBodyHtml,
									@Body = query.@Body,
									@Processed = query.@Processed,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEmailMessage(unitOfWorkContext, @emailMessage);

				return @emailMessage;
			}
		}
		
		public IList<EmailMessage> FindEmailMessages(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage>> callback)
		{
			IList<EmailMessage> @emailMessages;
			
			@emailMessages = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindEmailMessages(uowc, e), callback);
			
			return @emailMessages;
		}
		
		public IList<EmailMessage> FindEmailMessages(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage>> callback)
		{
			IList<EmailMessage> @emailMessages;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@EmailMessages);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@emailMessages = queryable.Select(lo => new EmailMessage()
												 {
													// map results to POCOs from L2S objects
													@EmailMessageId = lo.@EmailMessageId,
													@From = lo.@From,
													@Sender = lo.@Sender,
													@ReplyTo = lo.@ReplyTo,
													@To = lo.@To,
													@CarbonCopy = lo.@CarbonCopy,
													@BlindCarbonCopy = lo.@BlindCarbonCopy,
													@Subject = lo.@Subject,
													@IsBodyHtml = lo.@IsBodyHtml,
													@Body = lo.@Body,
													@Processed = lo.@Processed,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@LogicalDelete = lo.@LogicalDelete
												 }).ToList(); // force execution against store

				foreach (EmailMessage @emailMessage in @emailMessages)
					this.OnSelectEmailMessage(unitOfWorkContext, @emailMessage);
				
				return @emailMessages;
			}			
		}
		
		public bool SaveEmailMessage(EmailMessage @emailMessage)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveEmailMessage(uowc, e), @emailMessage);
			
			return retval;
		}
		
		public bool SaveEmailMessage(IUnitOfWorkContext unitOfWorkContext, EmailMessage @emailMessage)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@emailMessage == null)
				throw new ArgumentNullException("emailMessage");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @emailMessage.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEmailMessage(unitOfWorkContext, @emailMessage);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage();

					ctx.Context.EmailMessages.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEmailMessage(unitOfWorkContext, @emailMessage);
					
					query = ctx.Context.EmailMessages.SingleOrDefault(lo => lo.@EmailMessageId == @emailMessage.@EmailMessageId);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@EmailMessageId = @emailMessage.@EmailMessageId;
				query.@From = @emailMessage.@From;
				query.@Sender = @emailMessage.@Sender;
				query.@ReplyTo = @emailMessage.@ReplyTo;
				query.@To = @emailMessage.@To;
				query.@CarbonCopy = @emailMessage.@CarbonCopy;
				query.@BlindCarbonCopy = @emailMessage.@BlindCarbonCopy;
				query.@Subject = @emailMessage.@Subject;
				query.@IsBodyHtml = @emailMessage.@IsBodyHtml;
				query.@Body = @emailMessage.@Body;
				query.@Processed = @emailMessage.@Processed;
				query.@CreationTimestamp = @emailMessage.@CreationTimestamp;
				query.@ModificationTimestamp = @emailMessage.@ModificationTimestamp;
				query.@LogicalDelete = @emailMessage.@LogicalDelete;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEmailMessage(unitOfWorkContext, @emailMessage);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@emailMessage.@EmailMessageId = query.@EmailMessageId;
				@emailMessage.@From = query.@From;
				@emailMessage.@Sender = query.@Sender;
				@emailMessage.@ReplyTo = query.@ReplyTo;
				@emailMessage.@To = query.@To;
				@emailMessage.@CarbonCopy = query.@CarbonCopy;
				@emailMessage.@BlindCarbonCopy = query.@BlindCarbonCopy;
				@emailMessage.@Subject = query.@Subject;
				@emailMessage.@IsBodyHtml = query.@IsBodyHtml;
				@emailMessage.@Body = query.@Body;
				@emailMessage.@Processed = query.@Processed;
				@emailMessage.@CreationTimestamp = query.@CreationTimestamp;
				@emailMessage.@ModificationTimestamp = query.@ModificationTimestamp;
				@emailMessage.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEmailMessage(unitOfWorkContext, @emailMessage);
				}
				else
				{
					this.OnPostUpdateEmailMessage(unitOfWorkContext, @emailMessage);
				}

				return true;
			}
		}
		
		public bool DiscardEmailMessage(EmailMessage @emailMessage)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardEmailMessage(uowc, e), @emailMessage);
			
			return retval;
		}
		
		public bool DiscardEmailMessage(IUnitOfWorkContext unitOfWorkContext, EmailMessage @emailMessage)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessage query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@emailMessage == null)
				throw new ArgumentNullException("emailMessage");
				
			if (@emailMessage.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEmailMessage(unitOfWorkContext, @emailMessage);
				
				query = ctx.Context.@EmailMessages.SingleOrDefault(lo => lo.@EmailMessageId == @emailMessage.@EmailMessageId);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@EmailMessages.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEmailMessage(unitOfWorkContext, @emailMessage);
					
					return false;
				}

				this.OnPostDeleteEmailMessage(unitOfWorkContext, @emailMessage);
				
				@emailMessage.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEmailMessage(IUnitOfWorkContext unitOfWorkContext, EmailMessage @emailMessage);
		
		partial void OnPostInsertEmailMessage(IUnitOfWorkContext unitOfWorkContext, EmailMessage @emailMessage);
		
		partial void OnPreUpdateEmailMessage(IUnitOfWorkContext unitOfWorkContext, EmailMessage @emailMessage);
		
		partial void OnPostUpdateEmailMessage(IUnitOfWorkContext unitOfWorkContext, EmailMessage @emailMessage);
		
		partial void OnSaveConflictEmailMessage(IUnitOfWorkContext unitOfWorkContext, EmailMessage @emailMessage);
		
		partial void OnDiscardConflictEmailMessage(IUnitOfWorkContext unitOfWorkContext, EmailMessage @emailMessage);
				
		partial void OnPreDeleteEmailMessage(IUnitOfWorkContext unitOfWorkContext, EmailMessage @emailMessage);
		
		partial void OnPostDeleteEmailMessage(IUnitOfWorkContext unitOfWorkContext, EmailMessage @emailMessage);
		
		partial void OnSelectEmailMessage(IUnitOfWorkContext unitOfWorkContext, EmailMessage @emailMessage);		

		public EmailAttachment LoadEmailAttachment(Int32 @emailAttachmentId)
		{
			EmailAttachment retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1) => this.LoadEmailAttachment(uowc, p1), @emailAttachmentId);
			
			return retval;
		}
		
		public EmailAttachment LoadEmailAttachment(IUnitOfWorkContext unitOfWorkContext, Int32 @emailAttachmentId)
		{			
			EmailAttachment @emailAttachment;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.EmailAttachments.SingleOrDefault(lo => lo.@EmailAttachmentId == @emailAttachmentId);

				if ((object)query == null)
					return null; // does not exist
				
				@emailAttachment = new EmailAttachment()
								{
									// map result to POCO from L2S object
									@EmailAttachmentId = query.@EmailAttachmentId,
									@EmailMessageId = query.@EmailMessageId,
									@MimeType = query.@MimeType,
									@AttachmentBits = (object)query.AttachmentBits != null ? query.@AttachmentBits.ToArray() : null,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEmailAttachment(unitOfWorkContext, @emailAttachment);

				return @emailAttachment;
			}
		}
		
		public IList<EmailAttachment> FindEmailAttachments(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment>> callback)
		{
			IList<EmailAttachment> @emailAttachments;
			
			@emailAttachments = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindEmailAttachments(uowc, e), callback);
			
			return @emailAttachments;
		}
		
		public IList<EmailAttachment> FindEmailAttachments(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment>> callback)
		{
			IList<EmailAttachment> @emailAttachments;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@EmailAttachments);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@emailAttachments = queryable.Select(lo => new EmailAttachment()
												 {
													// map results to POCOs from L2S objects
													@EmailAttachmentId = lo.@EmailAttachmentId,
													@EmailMessageId = lo.@EmailMessageId,
													@MimeType = lo.@MimeType,
													@AttachmentBits = (object)lo.@AttachmentBits != null ? lo.@AttachmentBits.ToArray() : null,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@LogicalDelete = lo.@LogicalDelete
												 }).ToList(); // force execution against store

				foreach (EmailAttachment @emailAttachment in @emailAttachments)
					this.OnSelectEmailAttachment(unitOfWorkContext, @emailAttachment);
				
				return @emailAttachments;
			}			
		}
		
		public bool SaveEmailAttachment(EmailAttachment @emailAttachment)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveEmailAttachment(uowc, e), @emailAttachment);
			
			return retval;
		}
		
		public bool SaveEmailAttachment(IUnitOfWorkContext unitOfWorkContext, EmailAttachment @emailAttachment)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@emailAttachment == null)
				throw new ArgumentNullException("emailAttachment");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @emailAttachment.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEmailAttachment(unitOfWorkContext, @emailAttachment);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment();

					ctx.Context.EmailAttachments.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEmailAttachment(unitOfWorkContext, @emailAttachment);
					
					query = ctx.Context.EmailAttachments.SingleOrDefault(lo => lo.@EmailAttachmentId == @emailAttachment.@EmailAttachmentId);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@EmailAttachmentId = @emailAttachment.@EmailAttachmentId;
				query.@EmailMessageId = @emailAttachment.@EmailMessageId;
				query.@MimeType = @emailAttachment.@MimeType;
				if ((object)@emailAttachment.@AttachmentBits != null) // prevent implicit conversion of null -> exception
					query.@AttachmentBits = @emailAttachment.@AttachmentBits;
				query.@CreationTimestamp = @emailAttachment.@CreationTimestamp;
				query.@ModificationTimestamp = @emailAttachment.@ModificationTimestamp;
				query.@LogicalDelete = @emailAttachment.@LogicalDelete;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEmailAttachment(unitOfWorkContext, @emailAttachment);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@emailAttachment.@EmailAttachmentId = query.@EmailAttachmentId;
				@emailAttachment.@EmailMessageId = query.@EmailMessageId;
				@emailAttachment.@MimeType = query.@MimeType;
				@emailAttachment.@AttachmentBits = (object)query.@AttachmentBits != null ? query.@AttachmentBits.ToArray() : null;
				@emailAttachment.@CreationTimestamp = query.@CreationTimestamp;
				@emailAttachment.@ModificationTimestamp = query.@ModificationTimestamp;
				@emailAttachment.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEmailAttachment(unitOfWorkContext, @emailAttachment);
				}
				else
				{
					this.OnPostUpdateEmailAttachment(unitOfWorkContext, @emailAttachment);
				}

				return true;
			}
		}
		
		public bool DiscardEmailAttachment(EmailAttachment @emailAttachment)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardEmailAttachment(uowc, e), @emailAttachment);
			
			return retval;
		}
		
		public bool DiscardEmailAttachment(IUnitOfWorkContext unitOfWorkContext, EmailAttachment @emailAttachment)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachment query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@emailAttachment == null)
				throw new ArgumentNullException("emailAttachment");
				
			if (@emailAttachment.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEmailAttachment(unitOfWorkContext, @emailAttachment);
				
				query = ctx.Context.@EmailAttachments.SingleOrDefault(lo => lo.@EmailAttachmentId == @emailAttachment.@EmailAttachmentId);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@EmailAttachments.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEmailAttachment(unitOfWorkContext, @emailAttachment);
					
					return false;
				}

				this.OnPostDeleteEmailAttachment(unitOfWorkContext, @emailAttachment);
				
				@emailAttachment.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEmailAttachment(IUnitOfWorkContext unitOfWorkContext, EmailAttachment @emailAttachment);
		
		partial void OnPostInsertEmailAttachment(IUnitOfWorkContext unitOfWorkContext, EmailAttachment @emailAttachment);
		
		partial void OnPreUpdateEmailAttachment(IUnitOfWorkContext unitOfWorkContext, EmailAttachment @emailAttachment);
		
		partial void OnPostUpdateEmailAttachment(IUnitOfWorkContext unitOfWorkContext, EmailAttachment @emailAttachment);
		
		partial void OnSaveConflictEmailAttachment(IUnitOfWorkContext unitOfWorkContext, EmailAttachment @emailAttachment);
		
		partial void OnDiscardConflictEmailAttachment(IUnitOfWorkContext unitOfWorkContext, EmailAttachment @emailAttachment);
				
		partial void OnPreDeleteEmailAttachment(IUnitOfWorkContext unitOfWorkContext, EmailAttachment @emailAttachment);
		
		partial void OnPostDeleteEmailAttachment(IUnitOfWorkContext unitOfWorkContext, EmailAttachment @emailAttachment);
		
		partial void OnSelectEmailAttachment(IUnitOfWorkContext unitOfWorkContext, EmailAttachment @emailAttachment);		

		public TableWithPrimaryKeyAsIdentity LoadTableWithPrimaryKeyAsIdentity(Int32 @pkId)
		{
			TableWithPrimaryKeyAsIdentity retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1) => this.LoadTableWithPrimaryKeyAsIdentity(uowc, p1), @pkId);
			
			return retval;
		}
		
		public TableWithPrimaryKeyAsIdentity LoadTableWithPrimaryKeyAsIdentity(IUnitOfWorkContext unitOfWorkContext, Int32 @pkId)
		{			
			TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.TableWithPrimaryKeyAsIdentities.SingleOrDefault(lo => lo.@PkId == @pkId);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithPrimaryKeyAsIdentity = new TableWithPrimaryKeyAsIdentity()
								{
									// map result to POCO from L2S object
									@PkId = query.@PkId,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithPrimaryKeyAsIdentity(unitOfWorkContext, @tableWithPrimaryKeyAsIdentity);

				return @tableWithPrimaryKeyAsIdentity;
			}
		}
		
		public IList<TableWithPrimaryKeyAsIdentity> FindTableWithPrimaryKeyAsIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity>> callback)
		{
			IList<TableWithPrimaryKeyAsIdentity> @tableWithPrimaryKeyAsIdentities;
			
			@tableWithPrimaryKeyAsIdentities = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindTableWithPrimaryKeyAsIdentities(uowc, e), callback);
			
			return @tableWithPrimaryKeyAsIdentities;
		}
		
		public IList<TableWithPrimaryKeyAsIdentity> FindTableWithPrimaryKeyAsIdentities(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity>> callback)
		{
			IList<TableWithPrimaryKeyAsIdentity> @tableWithPrimaryKeyAsIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@TableWithPrimaryKeyAsIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@tableWithPrimaryKeyAsIdentities = queryable.Select(lo => new TableWithPrimaryKeyAsIdentity()
												 {
													// map results to POCOs from L2S objects
													@PkId = lo.@PkId,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }).ToList(); // force execution against store

				foreach (TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity in @tableWithPrimaryKeyAsIdentities)
					this.OnSelectTableWithPrimaryKeyAsIdentity(unitOfWorkContext, @tableWithPrimaryKeyAsIdentity);
				
				return @tableWithPrimaryKeyAsIdentities;
			}			
		}
		
		public bool SaveTableWithPrimaryKeyAsIdentity(TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveTableWithPrimaryKeyAsIdentity(uowc, e), @tableWithPrimaryKeyAsIdentity);
			
			return retval;
		}
		
		public bool SaveTableWithPrimaryKeyAsIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithPrimaryKeyAsIdentity == null)
				throw new ArgumentNullException("tableWithPrimaryKeyAsIdentity");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithPrimaryKeyAsIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithPrimaryKeyAsIdentity(unitOfWorkContext, @tableWithPrimaryKeyAsIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity();

					ctx.Context.TableWithPrimaryKeyAsIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithPrimaryKeyAsIdentity(unitOfWorkContext, @tableWithPrimaryKeyAsIdentity);
					
					query = ctx.Context.TableWithPrimaryKeyAsIdentities.SingleOrDefault(lo => lo.@PkId == @tableWithPrimaryKeyAsIdentity.@PkId);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@PkId = @tableWithPrimaryKeyAsIdentity.@PkId;
				query.@Data01 = @tableWithPrimaryKeyAsIdentity.@Data01;
				query.@Data02 = @tableWithPrimaryKeyAsIdentity.@Data02;
				query.@Data03 = @tableWithPrimaryKeyAsIdentity.@Data03;
				query.@Data04 = @tableWithPrimaryKeyAsIdentity.@Data04;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithPrimaryKeyAsIdentity(unitOfWorkContext, @tableWithPrimaryKeyAsIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithPrimaryKeyAsIdentity.@PkId = query.@PkId;
				@tableWithPrimaryKeyAsIdentity.@Data01 = query.@Data01;
				@tableWithPrimaryKeyAsIdentity.@Data02 = query.@Data02;
				@tableWithPrimaryKeyAsIdentity.@Data03 = query.@Data03;
				@tableWithPrimaryKeyAsIdentity.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithPrimaryKeyAsIdentity(unitOfWorkContext, @tableWithPrimaryKeyAsIdentity);
				}
				else
				{
					this.OnPostUpdateTableWithPrimaryKeyAsIdentity(unitOfWorkContext, @tableWithPrimaryKeyAsIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithPrimaryKeyAsIdentity(TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardTableWithPrimaryKeyAsIdentity(uowc, e), @tableWithPrimaryKeyAsIdentity);
			
			return retval;
		}
		
		public bool DiscardTableWithPrimaryKeyAsIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentity query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithPrimaryKeyAsIdentity == null)
				throw new ArgumentNullException("tableWithPrimaryKeyAsIdentity");
				
			if (@tableWithPrimaryKeyAsIdentity.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithPrimaryKeyAsIdentity(unitOfWorkContext, @tableWithPrimaryKeyAsIdentity);
				
				query = ctx.Context.@TableWithPrimaryKeyAsIdentities.SingleOrDefault(lo => lo.@PkId == @tableWithPrimaryKeyAsIdentity.@PkId);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@TableWithPrimaryKeyAsIdentities.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithPrimaryKeyAsIdentity(unitOfWorkContext, @tableWithPrimaryKeyAsIdentity);
					
					return false;
				}

				this.OnPostDeleteTableWithPrimaryKeyAsIdentity(unitOfWorkContext, @tableWithPrimaryKeyAsIdentity);
				
				@tableWithPrimaryKeyAsIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithPrimaryKeyAsIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);
		
		partial void OnPostInsertTableWithPrimaryKeyAsIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);
		
		partial void OnPreUpdateTableWithPrimaryKeyAsIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);
		
		partial void OnPostUpdateTableWithPrimaryKeyAsIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);
		
		partial void OnSaveConflictTableWithPrimaryKeyAsIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);
		
		partial void OnDiscardConflictTableWithPrimaryKeyAsIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);
				
		partial void OnPreDeleteTableWithPrimaryKeyAsIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);
		
		partial void OnPostDeleteTableWithPrimaryKeyAsIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);
		
		partial void OnSelectTableWithPrimaryKeyAsIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentity @tableWithPrimaryKeyAsIdentity);		

		public TableWithPrimaryKeyAsDefault LoadTableWithPrimaryKeyAsDefault(Guid @pkDf)
		{
			TableWithPrimaryKeyAsDefault retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1) => this.LoadTableWithPrimaryKeyAsDefault(uowc, p1), @pkDf);
			
			return retval;
		}
		
		public TableWithPrimaryKeyAsDefault LoadTableWithPrimaryKeyAsDefault(IUnitOfWorkContext unitOfWorkContext, Guid @pkDf)
		{			
			TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.TableWithPrimaryKeyAsDefaults.SingleOrDefault(lo => lo.@PkDf == @pkDf);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithPrimaryKeyAsDefault = new TableWithPrimaryKeyAsDefault()
								{
									// map result to POCO from L2S object
									@PkDf = query.@PkDf,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithPrimaryKeyAsDefault(unitOfWorkContext, @tableWithPrimaryKeyAsDefault);

				return @tableWithPrimaryKeyAsDefault;
			}
		}
		
		public IList<TableWithPrimaryKeyAsDefault> FindTableWithPrimaryKeyAsDefaults(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault>> callback)
		{
			IList<TableWithPrimaryKeyAsDefault> @tableWithPrimaryKeyAsDefaults;
			
			@tableWithPrimaryKeyAsDefaults = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindTableWithPrimaryKeyAsDefaults(uowc, e), callback);
			
			return @tableWithPrimaryKeyAsDefaults;
		}
		
		public IList<TableWithPrimaryKeyAsDefault> FindTableWithPrimaryKeyAsDefaults(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault>> callback)
		{
			IList<TableWithPrimaryKeyAsDefault> @tableWithPrimaryKeyAsDefaults;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@TableWithPrimaryKeyAsDefaults);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@tableWithPrimaryKeyAsDefaults = queryable.Select(lo => new TableWithPrimaryKeyAsDefault()
												 {
													// map results to POCOs from L2S objects
													@PkDf = lo.@PkDf,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }).ToList(); // force execution against store

				foreach (TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault in @tableWithPrimaryKeyAsDefaults)
					this.OnSelectTableWithPrimaryKeyAsDefault(unitOfWorkContext, @tableWithPrimaryKeyAsDefault);
				
				return @tableWithPrimaryKeyAsDefaults;
			}			
		}
		
		public bool SaveTableWithPrimaryKeyAsDefault(TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveTableWithPrimaryKeyAsDefault(uowc, e), @tableWithPrimaryKeyAsDefault);
			
			return retval;
		}
		
		public bool SaveTableWithPrimaryKeyAsDefault(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithPrimaryKeyAsDefault == null)
				throw new ArgumentNullException("tableWithPrimaryKeyAsDefault");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithPrimaryKeyAsDefault.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithPrimaryKeyAsDefault(unitOfWorkContext, @tableWithPrimaryKeyAsDefault);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault();

					ctx.Context.TableWithPrimaryKeyAsDefaults.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithPrimaryKeyAsDefault(unitOfWorkContext, @tableWithPrimaryKeyAsDefault);
					
					query = ctx.Context.TableWithPrimaryKeyAsDefaults.SingleOrDefault(lo => lo.@PkDf == @tableWithPrimaryKeyAsDefault.@PkDf);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@PkDf = @tableWithPrimaryKeyAsDefault.@PkDf;
				query.@Data01 = @tableWithPrimaryKeyAsDefault.@Data01;
				query.@Data02 = @tableWithPrimaryKeyAsDefault.@Data02;
				query.@Data03 = @tableWithPrimaryKeyAsDefault.@Data03;
				query.@Data04 = @tableWithPrimaryKeyAsDefault.@Data04;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithPrimaryKeyAsDefault(unitOfWorkContext, @tableWithPrimaryKeyAsDefault);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithPrimaryKeyAsDefault.@PkDf = query.@PkDf;
				@tableWithPrimaryKeyAsDefault.@Data01 = query.@Data01;
				@tableWithPrimaryKeyAsDefault.@Data02 = query.@Data02;
				@tableWithPrimaryKeyAsDefault.@Data03 = query.@Data03;
				@tableWithPrimaryKeyAsDefault.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithPrimaryKeyAsDefault(unitOfWorkContext, @tableWithPrimaryKeyAsDefault);
				}
				else
				{
					this.OnPostUpdateTableWithPrimaryKeyAsDefault(unitOfWorkContext, @tableWithPrimaryKeyAsDefault);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithPrimaryKeyAsDefault(TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardTableWithPrimaryKeyAsDefault(uowc, e), @tableWithPrimaryKeyAsDefault);
			
			return retval;
		}
		
		public bool DiscardTableWithPrimaryKeyAsDefault(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefault query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithPrimaryKeyAsDefault == null)
				throw new ArgumentNullException("tableWithPrimaryKeyAsDefault");
				
			if (@tableWithPrimaryKeyAsDefault.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithPrimaryKeyAsDefault(unitOfWorkContext, @tableWithPrimaryKeyAsDefault);
				
				query = ctx.Context.@TableWithPrimaryKeyAsDefaults.SingleOrDefault(lo => lo.@PkDf == @tableWithPrimaryKeyAsDefault.@PkDf);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@TableWithPrimaryKeyAsDefaults.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithPrimaryKeyAsDefault(unitOfWorkContext, @tableWithPrimaryKeyAsDefault);
					
					return false;
				}

				this.OnPostDeleteTableWithPrimaryKeyAsDefault(unitOfWorkContext, @tableWithPrimaryKeyAsDefault);
				
				@tableWithPrimaryKeyAsDefault.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithPrimaryKeyAsDefault(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);
		
		partial void OnPostInsertTableWithPrimaryKeyAsDefault(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);
		
		partial void OnPreUpdateTableWithPrimaryKeyAsDefault(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);
		
		partial void OnPostUpdateTableWithPrimaryKeyAsDefault(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);
		
		partial void OnSaveConflictTableWithPrimaryKeyAsDefault(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);
		
		partial void OnDiscardConflictTableWithPrimaryKeyAsDefault(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);
				
		partial void OnPreDeleteTableWithPrimaryKeyAsDefault(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);
		
		partial void OnPostDeleteTableWithPrimaryKeyAsDefault(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);
		
		partial void OnSelectTableWithPrimaryKeyAsDefault(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefault @tableWithPrimaryKeyAsDefault);		

		public TableWithPrimaryKeyWithDiffIdentity LoadTableWithPrimaryKeyWithDiffIdentity(Int32 @pk)
		{
			TableWithPrimaryKeyWithDiffIdentity retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1) => this.LoadTableWithPrimaryKeyWithDiffIdentity(uowc, p1), @pk);
			
			return retval;
		}
		
		public TableWithPrimaryKeyWithDiffIdentity LoadTableWithPrimaryKeyWithDiffIdentity(IUnitOfWorkContext unitOfWorkContext, Int32 @pk)
		{			
			TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.TableWithPrimaryKeyWithDiffIdentities.SingleOrDefault(lo => lo.@Pk == @pk);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithPrimaryKeyWithDiffIdentity = new TableWithPrimaryKeyWithDiffIdentity()
								{
									// map result to POCO from L2S object
									@Pk = query.@Pk,
									@Id = query.@Id,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithPrimaryKeyWithDiffIdentity(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentity);

				return @tableWithPrimaryKeyWithDiffIdentity;
			}
		}
		
		public IList<TableWithPrimaryKeyWithDiffIdentity> FindTableWithPrimaryKeyWithDiffIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity>> callback)
		{
			IList<TableWithPrimaryKeyWithDiffIdentity> @tableWithPrimaryKeyWithDiffIdentities;
			
			@tableWithPrimaryKeyWithDiffIdentities = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindTableWithPrimaryKeyWithDiffIdentities(uowc, e), callback);
			
			return @tableWithPrimaryKeyWithDiffIdentities;
		}
		
		public IList<TableWithPrimaryKeyWithDiffIdentity> FindTableWithPrimaryKeyWithDiffIdentities(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity>> callback)
		{
			IList<TableWithPrimaryKeyWithDiffIdentity> @tableWithPrimaryKeyWithDiffIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@TableWithPrimaryKeyWithDiffIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@tableWithPrimaryKeyWithDiffIdentities = queryable.Select(lo => new TableWithPrimaryKeyWithDiffIdentity()
												 {
													// map results to POCOs from L2S objects
													@Pk = lo.@Pk,
													@Id = lo.@Id,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }).ToList(); // force execution against store

				foreach (TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity in @tableWithPrimaryKeyWithDiffIdentities)
					this.OnSelectTableWithPrimaryKeyWithDiffIdentity(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentity);
				
				return @tableWithPrimaryKeyWithDiffIdentities;
			}			
		}
		
		public bool SaveTableWithPrimaryKeyWithDiffIdentity(TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveTableWithPrimaryKeyWithDiffIdentity(uowc, e), @tableWithPrimaryKeyWithDiffIdentity);
			
			return retval;
		}
		
		public bool SaveTableWithPrimaryKeyWithDiffIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithPrimaryKeyWithDiffIdentity == null)
				throw new ArgumentNullException("tableWithPrimaryKeyWithDiffIdentity");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithPrimaryKeyWithDiffIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithPrimaryKeyWithDiffIdentity(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity();

					ctx.Context.TableWithPrimaryKeyWithDiffIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithPrimaryKeyWithDiffIdentity(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentity);
					
					query = ctx.Context.TableWithPrimaryKeyWithDiffIdentities.SingleOrDefault(lo => lo.@Pk == @tableWithPrimaryKeyWithDiffIdentity.@Pk);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@Pk = @tableWithPrimaryKeyWithDiffIdentity.@Pk;
				query.@Id = @tableWithPrimaryKeyWithDiffIdentity.@Id;
				query.@Data01 = @tableWithPrimaryKeyWithDiffIdentity.@Data01;
				query.@Data02 = @tableWithPrimaryKeyWithDiffIdentity.@Data02;
				query.@Data03 = @tableWithPrimaryKeyWithDiffIdentity.@Data03;
				query.@Data04 = @tableWithPrimaryKeyWithDiffIdentity.@Data04;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithPrimaryKeyWithDiffIdentity(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithPrimaryKeyWithDiffIdentity.@Pk = query.@Pk;
				@tableWithPrimaryKeyWithDiffIdentity.@Id = query.@Id;
				@tableWithPrimaryKeyWithDiffIdentity.@Data01 = query.@Data01;
				@tableWithPrimaryKeyWithDiffIdentity.@Data02 = query.@Data02;
				@tableWithPrimaryKeyWithDiffIdentity.@Data03 = query.@Data03;
				@tableWithPrimaryKeyWithDiffIdentity.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithPrimaryKeyWithDiffIdentity(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentity);
				}
				else
				{
					this.OnPostUpdateTableWithPrimaryKeyWithDiffIdentity(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithPrimaryKeyWithDiffIdentity(TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardTableWithPrimaryKeyWithDiffIdentity(uowc, e), @tableWithPrimaryKeyWithDiffIdentity);
			
			return retval;
		}
		
		public bool DiscardTableWithPrimaryKeyWithDiffIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentity query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithPrimaryKeyWithDiffIdentity == null)
				throw new ArgumentNullException("tableWithPrimaryKeyWithDiffIdentity");
				
			if (@tableWithPrimaryKeyWithDiffIdentity.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithPrimaryKeyWithDiffIdentity(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentity);
				
				query = ctx.Context.@TableWithPrimaryKeyWithDiffIdentities.SingleOrDefault(lo => lo.@Pk == @tableWithPrimaryKeyWithDiffIdentity.@Pk);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@TableWithPrimaryKeyWithDiffIdentities.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithPrimaryKeyWithDiffIdentity(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentity);
					
					return false;
				}

				this.OnPostDeleteTableWithPrimaryKeyWithDiffIdentity(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentity);
				
				@tableWithPrimaryKeyWithDiffIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithPrimaryKeyWithDiffIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);
		
		partial void OnPostInsertTableWithPrimaryKeyWithDiffIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);
		
		partial void OnPreUpdateTableWithPrimaryKeyWithDiffIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);
		
		partial void OnPostUpdateTableWithPrimaryKeyWithDiffIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);
		
		partial void OnSaveConflictTableWithPrimaryKeyWithDiffIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);
		
		partial void OnDiscardConflictTableWithPrimaryKeyWithDiffIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);
				
		partial void OnPreDeleteTableWithPrimaryKeyWithDiffIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);
		
		partial void OnPostDeleteTableWithPrimaryKeyWithDiffIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);
		
		partial void OnSelectTableWithPrimaryKeyWithDiffIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentity @tableWithPrimaryKeyWithDiffIdentity);		

		public TableNoPrimaryKeyWithIdentity LoadTableNoPrimaryKeyWithIdentity(Int32 @id, Boolean @data01, DateTime @data02, Int32 @data03, String @data04)
		{
			TableNoPrimaryKeyWithIdentity retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1, p2, p3, p4, p5) => this.LoadTableNoPrimaryKeyWithIdentity(uowc, p1, p2, p3, p4, p5), @id, @data01, @data02, @data03, @data04);
			
			return retval;
		}
		
		public TableNoPrimaryKeyWithIdentity LoadTableNoPrimaryKeyWithIdentity(IUnitOfWorkContext unitOfWorkContext, Int32 @id, Boolean @data01, DateTime @data02, Int32 @data03, String @data04)
		{			
			TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.TableNoPrimaryKeyWithIdentities.SingleOrDefault(lo => lo.@Id == @id && lo.@Data01 == @data01 && lo.@Data02 == @data02 && lo.@Data03 == @data03 && lo.@Data04 == @data04);

				if ((object)query == null)
					return null; // does not exist
				
				@tableNoPrimaryKeyWithIdentity = new TableNoPrimaryKeyWithIdentity()
								{
									// map result to POCO from L2S object
									@Id = query.@Id,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableNoPrimaryKeyWithIdentity(unitOfWorkContext, @tableNoPrimaryKeyWithIdentity);

				return @tableNoPrimaryKeyWithIdentity;
			}
		}
		
		public IList<TableNoPrimaryKeyWithIdentity> FindTableNoPrimaryKeyWithIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity>> callback)
		{
			IList<TableNoPrimaryKeyWithIdentity> @tableNoPrimaryKeyWithIdentities;
			
			@tableNoPrimaryKeyWithIdentities = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindTableNoPrimaryKeyWithIdentities(uowc, e), callback);
			
			return @tableNoPrimaryKeyWithIdentities;
		}
		
		public IList<TableNoPrimaryKeyWithIdentity> FindTableNoPrimaryKeyWithIdentities(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity>> callback)
		{
			IList<TableNoPrimaryKeyWithIdentity> @tableNoPrimaryKeyWithIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@TableNoPrimaryKeyWithIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@tableNoPrimaryKeyWithIdentities = queryable.Select(lo => new TableNoPrimaryKeyWithIdentity()
												 {
													// map results to POCOs from L2S objects
													@Id = lo.@Id,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }).ToList(); // force execution against store

				foreach (TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity in @tableNoPrimaryKeyWithIdentities)
					this.OnSelectTableNoPrimaryKeyWithIdentity(unitOfWorkContext, @tableNoPrimaryKeyWithIdentity);
				
				return @tableNoPrimaryKeyWithIdentities;
			}			
		}
		
		public bool SaveTableNoPrimaryKeyWithIdentity(TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveTableNoPrimaryKeyWithIdentity(uowc, e), @tableNoPrimaryKeyWithIdentity);
			
			return retval;
		}
		
		public bool SaveTableNoPrimaryKeyWithIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableNoPrimaryKeyWithIdentity == null)
				throw new ArgumentNullException("tableNoPrimaryKeyWithIdentity");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableNoPrimaryKeyWithIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableNoPrimaryKeyWithIdentity(unitOfWorkContext, @tableNoPrimaryKeyWithIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity();

					ctx.Context.TableNoPrimaryKeyWithIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableNoPrimaryKeyWithIdentity(unitOfWorkContext, @tableNoPrimaryKeyWithIdentity);
					
					query = ctx.Context.TableNoPrimaryKeyWithIdentities.SingleOrDefault(lo => lo.@Id == @tableNoPrimaryKeyWithIdentity.@Id && lo.@Data01 == @tableNoPrimaryKeyWithIdentity.@Data01 && lo.@Data02 == @tableNoPrimaryKeyWithIdentity.@Data02 && lo.@Data03 == @tableNoPrimaryKeyWithIdentity.@Data03 && lo.@Data04 == @tableNoPrimaryKeyWithIdentity.@Data04);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@Id = @tableNoPrimaryKeyWithIdentity.@Id;
				query.@Data01 = @tableNoPrimaryKeyWithIdentity.@Data01;
				query.@Data02 = @tableNoPrimaryKeyWithIdentity.@Data02;
				query.@Data03 = @tableNoPrimaryKeyWithIdentity.@Data03;
				query.@Data04 = @tableNoPrimaryKeyWithIdentity.@Data04;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableNoPrimaryKeyWithIdentity(unitOfWorkContext, @tableNoPrimaryKeyWithIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableNoPrimaryKeyWithIdentity.@Id = query.@Id;
				@tableNoPrimaryKeyWithIdentity.@Data01 = query.@Data01;
				@tableNoPrimaryKeyWithIdentity.@Data02 = query.@Data02;
				@tableNoPrimaryKeyWithIdentity.@Data03 = query.@Data03;
				@tableNoPrimaryKeyWithIdentity.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableNoPrimaryKeyWithIdentity(unitOfWorkContext, @tableNoPrimaryKeyWithIdentity);
				}
				else
				{
					this.OnPostUpdateTableNoPrimaryKeyWithIdentity(unitOfWorkContext, @tableNoPrimaryKeyWithIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTableNoPrimaryKeyWithIdentity(TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardTableNoPrimaryKeyWithIdentity(uowc, e), @tableNoPrimaryKeyWithIdentity);
			
			return retval;
		}
		
		public bool DiscardTableNoPrimaryKeyWithIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentity query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableNoPrimaryKeyWithIdentity == null)
				throw new ArgumentNullException("tableNoPrimaryKeyWithIdentity");
				
			if (@tableNoPrimaryKeyWithIdentity.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableNoPrimaryKeyWithIdentity(unitOfWorkContext, @tableNoPrimaryKeyWithIdentity);
				
				query = ctx.Context.@TableNoPrimaryKeyWithIdentities.SingleOrDefault(lo => lo.@Id == @tableNoPrimaryKeyWithIdentity.@Id && lo.@Data01 == @tableNoPrimaryKeyWithIdentity.@Data01 && lo.@Data02 == @tableNoPrimaryKeyWithIdentity.@Data02 && lo.@Data03 == @tableNoPrimaryKeyWithIdentity.@Data03 && lo.@Data04 == @tableNoPrimaryKeyWithIdentity.@Data04);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@TableNoPrimaryKeyWithIdentities.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableNoPrimaryKeyWithIdentity(unitOfWorkContext, @tableNoPrimaryKeyWithIdentity);
					
					return false;
				}

				this.OnPostDeleteTableNoPrimaryKeyWithIdentity(unitOfWorkContext, @tableNoPrimaryKeyWithIdentity);
				
				@tableNoPrimaryKeyWithIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableNoPrimaryKeyWithIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);
		
		partial void OnPostInsertTableNoPrimaryKeyWithIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);
		
		partial void OnPreUpdateTableNoPrimaryKeyWithIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);
		
		partial void OnPostUpdateTableNoPrimaryKeyWithIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);
		
		partial void OnSaveConflictTableNoPrimaryKeyWithIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);
		
		partial void OnDiscardConflictTableNoPrimaryKeyWithIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);
				
		partial void OnPreDeleteTableNoPrimaryKeyWithIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);
		
		partial void OnPostDeleteTableNoPrimaryKeyWithIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);
		
		partial void OnSelectTableNoPrimaryKeyWithIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentity @tableNoPrimaryKeyWithIdentity);		

		public TableWithPrimaryKeyNoIdentity LoadTableWithPrimaryKeyNoIdentity(Int32 @pk)
		{
			TableWithPrimaryKeyNoIdentity retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1) => this.LoadTableWithPrimaryKeyNoIdentity(uowc, p1), @pk);
			
			return retval;
		}
		
		public TableWithPrimaryKeyNoIdentity LoadTableWithPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, Int32 @pk)
		{			
			TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.TableWithPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Pk == @pk);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithPrimaryKeyNoIdentity = new TableWithPrimaryKeyNoIdentity()
								{
									// map result to POCO from L2S object
									@Pk = query.@Pk,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithPrimaryKeyNoIdentity(unitOfWorkContext, @tableWithPrimaryKeyNoIdentity);

				return @tableWithPrimaryKeyNoIdentity;
			}
		}
		
		public IList<TableWithPrimaryKeyNoIdentity> FindTableWithPrimaryKeyNoIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity>> callback)
		{
			IList<TableWithPrimaryKeyNoIdentity> @tableWithPrimaryKeyNoIdentities;
			
			@tableWithPrimaryKeyNoIdentities = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindTableWithPrimaryKeyNoIdentities(uowc, e), callback);
			
			return @tableWithPrimaryKeyNoIdentities;
		}
		
		public IList<TableWithPrimaryKeyNoIdentity> FindTableWithPrimaryKeyNoIdentities(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity>> callback)
		{
			IList<TableWithPrimaryKeyNoIdentity> @tableWithPrimaryKeyNoIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@TableWithPrimaryKeyNoIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@tableWithPrimaryKeyNoIdentities = queryable.Select(lo => new TableWithPrimaryKeyNoIdentity()
												 {
													// map results to POCOs from L2S objects
													@Pk = lo.@Pk,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }).ToList(); // force execution against store

				foreach (TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity in @tableWithPrimaryKeyNoIdentities)
					this.OnSelectTableWithPrimaryKeyNoIdentity(unitOfWorkContext, @tableWithPrimaryKeyNoIdentity);
				
				return @tableWithPrimaryKeyNoIdentities;
			}			
		}
		
		public bool SaveTableWithPrimaryKeyNoIdentity(TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveTableWithPrimaryKeyNoIdentity(uowc, e), @tableWithPrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool SaveTableWithPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithPrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tableWithPrimaryKeyNoIdentity");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithPrimaryKeyNoIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithPrimaryKeyNoIdentity(unitOfWorkContext, @tableWithPrimaryKeyNoIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity();

					ctx.Context.TableWithPrimaryKeyNoIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithPrimaryKeyNoIdentity(unitOfWorkContext, @tableWithPrimaryKeyNoIdentity);
					
					query = ctx.Context.TableWithPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Pk == @tableWithPrimaryKeyNoIdentity.@Pk);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@Pk = @tableWithPrimaryKeyNoIdentity.@Pk;
				query.@Data01 = @tableWithPrimaryKeyNoIdentity.@Data01;
				query.@Data02 = @tableWithPrimaryKeyNoIdentity.@Data02;
				query.@Data03 = @tableWithPrimaryKeyNoIdentity.@Data03;
				query.@Data04 = @tableWithPrimaryKeyNoIdentity.@Data04;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithPrimaryKeyNoIdentity(unitOfWorkContext, @tableWithPrimaryKeyNoIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithPrimaryKeyNoIdentity.@Pk = query.@Pk;
				@tableWithPrimaryKeyNoIdentity.@Data01 = query.@Data01;
				@tableWithPrimaryKeyNoIdentity.@Data02 = query.@Data02;
				@tableWithPrimaryKeyNoIdentity.@Data03 = query.@Data03;
				@tableWithPrimaryKeyNoIdentity.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithPrimaryKeyNoIdentity(unitOfWorkContext, @tableWithPrimaryKeyNoIdentity);
				}
				else
				{
					this.OnPostUpdateTableWithPrimaryKeyNoIdentity(unitOfWorkContext, @tableWithPrimaryKeyNoIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithPrimaryKeyNoIdentity(TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardTableWithPrimaryKeyNoIdentity(uowc, e), @tableWithPrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool DiscardTableWithPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentity query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithPrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tableWithPrimaryKeyNoIdentity");
				
			if (@tableWithPrimaryKeyNoIdentity.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithPrimaryKeyNoIdentity(unitOfWorkContext, @tableWithPrimaryKeyNoIdentity);
				
				query = ctx.Context.@TableWithPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Pk == @tableWithPrimaryKeyNoIdentity.@Pk);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@TableWithPrimaryKeyNoIdentities.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithPrimaryKeyNoIdentity(unitOfWorkContext, @tableWithPrimaryKeyNoIdentity);
					
					return false;
				}

				this.OnPostDeleteTableWithPrimaryKeyNoIdentity(unitOfWorkContext, @tableWithPrimaryKeyNoIdentity);
				
				@tableWithPrimaryKeyNoIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);
		
		partial void OnPostInsertTableWithPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);
		
		partial void OnPreUpdateTableWithPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);
		
		partial void OnPostUpdateTableWithPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);
		
		partial void OnSaveConflictTableWithPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);
		
		partial void OnDiscardConflictTableWithPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);
				
		partial void OnPreDeleteTableWithPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);
		
		partial void OnPostDeleteTableWithPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);
		
		partial void OnSelectTableWithPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentity @tableWithPrimaryKeyNoIdentity);		

		public TableWithCompositePrimaryKeyNoIdentity LoadTableWithCompositePrimaryKeyNoIdentity(Int32 @pk0, Int32 @pk1, Int32 @pk2, Int32 @pk3)
		{
			TableWithCompositePrimaryKeyNoIdentity retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1, p2, p3, p4) => this.LoadTableWithCompositePrimaryKeyNoIdentity(uowc, p1, p2, p3, p4), @pk0, @pk1, @pk2, @pk3);
			
			return retval;
		}
		
		public TableWithCompositePrimaryKeyNoIdentity LoadTableWithCompositePrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, Int32 @pk0, Int32 @pk1, Int32 @pk2, Int32 @pk3)
		{			
			TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.TableWithCompositePrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Pk0 == @pk0 && lo.@Pk1 == @pk1 && lo.@Pk2 == @pk2 && lo.@Pk3 == @pk3);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithCompositePrimaryKeyNoIdentity = new TableWithCompositePrimaryKeyNoIdentity()
								{
									// map result to POCO from L2S object
									@Pk0 = query.@Pk0,
									@Pk1 = query.@Pk1,
									@Pk2 = query.@Pk2,
									@Pk3 = query.@Pk3,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithCompositePrimaryKeyNoIdentity(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentity);

				return @tableWithCompositePrimaryKeyNoIdentity;
			}
		}
		
		public IList<TableWithCompositePrimaryKeyNoIdentity> FindTableWithCompositePrimaryKeyNoIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity>> callback)
		{
			IList<TableWithCompositePrimaryKeyNoIdentity> @tableWithCompositePrimaryKeyNoIdentities;
			
			@tableWithCompositePrimaryKeyNoIdentities = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindTableWithCompositePrimaryKeyNoIdentities(uowc, e), callback);
			
			return @tableWithCompositePrimaryKeyNoIdentities;
		}
		
		public IList<TableWithCompositePrimaryKeyNoIdentity> FindTableWithCompositePrimaryKeyNoIdentities(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity>> callback)
		{
			IList<TableWithCompositePrimaryKeyNoIdentity> @tableWithCompositePrimaryKeyNoIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@TableWithCompositePrimaryKeyNoIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@tableWithCompositePrimaryKeyNoIdentities = queryable.Select(lo => new TableWithCompositePrimaryKeyNoIdentity()
												 {
													// map results to POCOs from L2S objects
													@Pk0 = lo.@Pk0,
													@Pk1 = lo.@Pk1,
													@Pk2 = lo.@Pk2,
													@Pk3 = lo.@Pk3,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }).ToList(); // force execution against store

				foreach (TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity in @tableWithCompositePrimaryKeyNoIdentities)
					this.OnSelectTableWithCompositePrimaryKeyNoIdentity(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentity);
				
				return @tableWithCompositePrimaryKeyNoIdentities;
			}			
		}
		
		public bool SaveTableWithCompositePrimaryKeyNoIdentity(TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveTableWithCompositePrimaryKeyNoIdentity(uowc, e), @tableWithCompositePrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool SaveTableWithCompositePrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithCompositePrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tableWithCompositePrimaryKeyNoIdentity");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithCompositePrimaryKeyNoIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithCompositePrimaryKeyNoIdentity(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity();

					ctx.Context.TableWithCompositePrimaryKeyNoIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithCompositePrimaryKeyNoIdentity(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentity);
					
					query = ctx.Context.TableWithCompositePrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Pk0 == @tableWithCompositePrimaryKeyNoIdentity.@Pk0 && lo.@Pk1 == @tableWithCompositePrimaryKeyNoIdentity.@Pk1 && lo.@Pk2 == @tableWithCompositePrimaryKeyNoIdentity.@Pk2 && lo.@Pk3 == @tableWithCompositePrimaryKeyNoIdentity.@Pk3);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@Pk0 = @tableWithCompositePrimaryKeyNoIdentity.@Pk0;
				query.@Pk1 = @tableWithCompositePrimaryKeyNoIdentity.@Pk1;
				query.@Pk2 = @tableWithCompositePrimaryKeyNoIdentity.@Pk2;
				query.@Pk3 = @tableWithCompositePrimaryKeyNoIdentity.@Pk3;
				query.@Data01 = @tableWithCompositePrimaryKeyNoIdentity.@Data01;
				query.@Data02 = @tableWithCompositePrimaryKeyNoIdentity.@Data02;
				query.@Data03 = @tableWithCompositePrimaryKeyNoIdentity.@Data03;
				query.@Data04 = @tableWithCompositePrimaryKeyNoIdentity.@Data04;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithCompositePrimaryKeyNoIdentity(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithCompositePrimaryKeyNoIdentity.@Pk0 = query.@Pk0;
				@tableWithCompositePrimaryKeyNoIdentity.@Pk1 = query.@Pk1;
				@tableWithCompositePrimaryKeyNoIdentity.@Pk2 = query.@Pk2;
				@tableWithCompositePrimaryKeyNoIdentity.@Pk3 = query.@Pk3;
				@tableWithCompositePrimaryKeyNoIdentity.@Data01 = query.@Data01;
				@tableWithCompositePrimaryKeyNoIdentity.@Data02 = query.@Data02;
				@tableWithCompositePrimaryKeyNoIdentity.@Data03 = query.@Data03;
				@tableWithCompositePrimaryKeyNoIdentity.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithCompositePrimaryKeyNoIdentity(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentity);
				}
				else
				{
					this.OnPostUpdateTableWithCompositePrimaryKeyNoIdentity(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithCompositePrimaryKeyNoIdentity(TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardTableWithCompositePrimaryKeyNoIdentity(uowc, e), @tableWithCompositePrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool DiscardTableWithCompositePrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentity query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithCompositePrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tableWithCompositePrimaryKeyNoIdentity");
				
			if (@tableWithCompositePrimaryKeyNoIdentity.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithCompositePrimaryKeyNoIdentity(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentity);
				
				query = ctx.Context.@TableWithCompositePrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Pk0 == @tableWithCompositePrimaryKeyNoIdentity.@Pk0 && lo.@Pk1 == @tableWithCompositePrimaryKeyNoIdentity.@Pk1 && lo.@Pk2 == @tableWithCompositePrimaryKeyNoIdentity.@Pk2 && lo.@Pk3 == @tableWithCompositePrimaryKeyNoIdentity.@Pk3);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@TableWithCompositePrimaryKeyNoIdentities.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithCompositePrimaryKeyNoIdentity(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentity);
					
					return false;
				}

				this.OnPostDeleteTableWithCompositePrimaryKeyNoIdentity(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentity);
				
				@tableWithCompositePrimaryKeyNoIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithCompositePrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);
		
		partial void OnPostInsertTableWithCompositePrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);
		
		partial void OnPreUpdateTableWithCompositePrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);
		
		partial void OnPostUpdateTableWithCompositePrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);
		
		partial void OnSaveConflictTableWithCompositePrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);
		
		partial void OnDiscardConflictTableWithCompositePrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);
				
		partial void OnPreDeleteTableWithCompositePrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);
		
		partial void OnPostDeleteTableWithCompositePrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);
		
		partial void OnSelectTableWithCompositePrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentity @tableWithCompositePrimaryKeyNoIdentity);		

		public TableNoPrimaryKeyNoIdentity LoadTableNoPrimaryKeyNoIdentity(Int32 @value, Boolean @data01, DateTime @data02, Int32 @data03, String @data04)
		{
			TableNoPrimaryKeyNoIdentity retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1, p2, p3, p4, p5) => this.LoadTableNoPrimaryKeyNoIdentity(uowc, p1, p2, p3, p4, p5), @value, @data01, @data02, @data03, @data04);
			
			return retval;
		}
		
		public TableNoPrimaryKeyNoIdentity LoadTableNoPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, Int32 @value, Boolean @data01, DateTime @data02, Int32 @data03, String @data04)
		{			
			TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.TableNoPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Value == @value && lo.@Data01 == @data01 && lo.@Data02 == @data02 && lo.@Data03 == @data03 && lo.@Data04 == @data04);

				if ((object)query == null)
					return null; // does not exist
				
				@tableNoPrimaryKeyNoIdentity = new TableNoPrimaryKeyNoIdentity()
								{
									// map result to POCO from L2S object
									@Value = query.@Value,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableNoPrimaryKeyNoIdentity(unitOfWorkContext, @tableNoPrimaryKeyNoIdentity);

				return @tableNoPrimaryKeyNoIdentity;
			}
		}
		
		public IList<TableNoPrimaryKeyNoIdentity> FindTableNoPrimaryKeyNoIdentities(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity>> callback)
		{
			IList<TableNoPrimaryKeyNoIdentity> @tableNoPrimaryKeyNoIdentities;
			
			@tableNoPrimaryKeyNoIdentities = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindTableNoPrimaryKeyNoIdentities(uowc, e), callback);
			
			return @tableNoPrimaryKeyNoIdentities;
		}
		
		public IList<TableNoPrimaryKeyNoIdentity> FindTableNoPrimaryKeyNoIdentities(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity>> callback)
		{
			IList<TableNoPrimaryKeyNoIdentity> @tableNoPrimaryKeyNoIdentities;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@TableNoPrimaryKeyNoIdentities);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@tableNoPrimaryKeyNoIdentities = queryable.Select(lo => new TableNoPrimaryKeyNoIdentity()
												 {
													// map results to POCOs from L2S objects
													@Value = lo.@Value,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }).ToList(); // force execution against store

				foreach (TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity in @tableNoPrimaryKeyNoIdentities)
					this.OnSelectTableNoPrimaryKeyNoIdentity(unitOfWorkContext, @tableNoPrimaryKeyNoIdentity);
				
				return @tableNoPrimaryKeyNoIdentities;
			}			
		}
		
		public bool SaveTableNoPrimaryKeyNoIdentity(TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveTableNoPrimaryKeyNoIdentity(uowc, e), @tableNoPrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool SaveTableNoPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableNoPrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tableNoPrimaryKeyNoIdentity");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableNoPrimaryKeyNoIdentity.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableNoPrimaryKeyNoIdentity(unitOfWorkContext, @tableNoPrimaryKeyNoIdentity);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity();

					ctx.Context.TableNoPrimaryKeyNoIdentities.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableNoPrimaryKeyNoIdentity(unitOfWorkContext, @tableNoPrimaryKeyNoIdentity);
					
					query = ctx.Context.TableNoPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Value == @tableNoPrimaryKeyNoIdentity.@Value && lo.@Data01 == @tableNoPrimaryKeyNoIdentity.@Data01 && lo.@Data02 == @tableNoPrimaryKeyNoIdentity.@Data02 && lo.@Data03 == @tableNoPrimaryKeyNoIdentity.@Data03 && lo.@Data04 == @tableNoPrimaryKeyNoIdentity.@Data04);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@Value = @tableNoPrimaryKeyNoIdentity.@Value;
				query.@Data01 = @tableNoPrimaryKeyNoIdentity.@Data01;
				query.@Data02 = @tableNoPrimaryKeyNoIdentity.@Data02;
				query.@Data03 = @tableNoPrimaryKeyNoIdentity.@Data03;
				query.@Data04 = @tableNoPrimaryKeyNoIdentity.@Data04;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableNoPrimaryKeyNoIdentity(unitOfWorkContext, @tableNoPrimaryKeyNoIdentity);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableNoPrimaryKeyNoIdentity.@Value = query.@Value;
				@tableNoPrimaryKeyNoIdentity.@Data01 = query.@Data01;
				@tableNoPrimaryKeyNoIdentity.@Data02 = query.@Data02;
				@tableNoPrimaryKeyNoIdentity.@Data03 = query.@Data03;
				@tableNoPrimaryKeyNoIdentity.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableNoPrimaryKeyNoIdentity(unitOfWorkContext, @tableNoPrimaryKeyNoIdentity);
				}
				else
				{
					this.OnPostUpdateTableNoPrimaryKeyNoIdentity(unitOfWorkContext, @tableNoPrimaryKeyNoIdentity);
				}

				return true;
			}
		}
		
		public bool DiscardTableNoPrimaryKeyNoIdentity(TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardTableNoPrimaryKeyNoIdentity(uowc, e), @tableNoPrimaryKeyNoIdentity);
			
			return retval;
		}
		
		public bool DiscardTableNoPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentity query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableNoPrimaryKeyNoIdentity == null)
				throw new ArgumentNullException("tableNoPrimaryKeyNoIdentity");
				
			if (@tableNoPrimaryKeyNoIdentity.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableNoPrimaryKeyNoIdentity(unitOfWorkContext, @tableNoPrimaryKeyNoIdentity);
				
				query = ctx.Context.@TableNoPrimaryKeyNoIdentities.SingleOrDefault(lo => lo.@Value == @tableNoPrimaryKeyNoIdentity.@Value && lo.@Data01 == @tableNoPrimaryKeyNoIdentity.@Data01 && lo.@Data02 == @tableNoPrimaryKeyNoIdentity.@Data02 && lo.@Data03 == @tableNoPrimaryKeyNoIdentity.@Data03 && lo.@Data04 == @tableNoPrimaryKeyNoIdentity.@Data04);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@TableNoPrimaryKeyNoIdentities.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableNoPrimaryKeyNoIdentity(unitOfWorkContext, @tableNoPrimaryKeyNoIdentity);
					
					return false;
				}

				this.OnPostDeleteTableNoPrimaryKeyNoIdentity(unitOfWorkContext, @tableNoPrimaryKeyNoIdentity);
				
				@tableNoPrimaryKeyNoIdentity.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableNoPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);
		
		partial void OnPostInsertTableNoPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);
		
		partial void OnPreUpdateTableNoPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);
		
		partial void OnPostUpdateTableNoPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);
		
		partial void OnSaveConflictTableNoPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);
		
		partial void OnDiscardConflictTableNoPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);
				
		partial void OnPreDeleteTableNoPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);
		
		partial void OnPostDeleteTableNoPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);
		
		partial void OnSelectTableNoPrimaryKeyNoIdentity(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentity @tableNoPrimaryKeyNoIdentity);		

		public TableTypeTest LoadTableTypeTest(Int32 @pkId)
		{
			TableTypeTest retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1) => this.LoadTableTypeTest(uowc, p1), @pkId);
			
			return retval;
		}
		
		public TableTypeTest LoadTableTypeTest(IUnitOfWorkContext unitOfWorkContext, Int32 @pkId)
		{			
			TableTypeTest @tableTypeTest;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.TableTypeTests.SingleOrDefault(lo => lo.@PkId == @pkId);

				if ((object)query == null)
					return null; // does not exist
				
				@tableTypeTest = new TableTypeTest()
								{
									// map result to POCO from L2S object
									@PkId = query.@PkId,
									@Data00 = query.@Data00,
									@Data01 = query.@Data01.ToArray(),
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data05 = query.@Data05,
									@Data06 = query.@Data06,
									@Data07 = query.@Data07,
									@Data08 = query.@Data08,
									@Data09 = query.@Data09,
									@Data10 = query.@Data10,
									@Data12 = (object)query.Data12 != null ? query.@Data12.ToArray() : null,
									@Data13 = query.@Data13,
									@Data14 = query.@Data14,
									@Data15 = query.@Data15,
									@Data16 = query.@Data16,
									@Data17 = query.@Data17,
									@Data18 = query.@Data18,
									@Data19 = query.@Data19,
									@Data20 = query.@Data20,
									@Data21 = query.@Data21,
									@Data22 = query.@Data22,
									@Data26 = query.@Data26,
									@Data27 = query.@Data27,
									@Data29 = query.@Data29,
									@Data30 = query.@Data30,
									@Data31 = query.@Data31.ToArray(),
									@Data32 = query.@Data32
								};	

				this.OnSelectTableTypeTest(unitOfWorkContext, @tableTypeTest);

				return @tableTypeTest;
			}
		}
		
		public IList<TableTypeTest> FindTableTypeTests(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest>> callback)
		{
			IList<TableTypeTest> @tableTypeTests;
			
			@tableTypeTests = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindTableTypeTests(uowc, e), callback);
			
			return @tableTypeTests;
		}
		
		public IList<TableTypeTest> FindTableTypeTests(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest>> callback)
		{
			IList<TableTypeTest> @tableTypeTests;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@TableTypeTests);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@tableTypeTests = queryable.Select(lo => new TableTypeTest()
												 {
													// map results to POCOs from L2S objects
													@PkId = lo.@PkId,
													@Data00 = lo.@Data00,
													@Data01 = lo.@Data01.ToArray(),
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data05 = lo.@Data05,
													@Data06 = lo.@Data06,
													@Data07 = lo.@Data07,
													@Data08 = lo.@Data08,
													@Data09 = lo.@Data09,
													@Data10 = lo.@Data10,
													@Data12 = (object)lo.@Data12 != null ? lo.@Data12.ToArray() : null,
													@Data13 = lo.@Data13,
													@Data14 = lo.@Data14,
													@Data15 = lo.@Data15,
													@Data16 = lo.@Data16,
													@Data17 = lo.@Data17,
													@Data18 = lo.@Data18,
													@Data19 = lo.@Data19,
													@Data20 = lo.@Data20,
													@Data21 = lo.@Data21,
													@Data22 = lo.@Data22,
													@Data26 = lo.@Data26,
													@Data27 = lo.@Data27,
													@Data29 = lo.@Data29,
													@Data30 = lo.@Data30,
													@Data31 = lo.@Data31.ToArray(),
													@Data32 = lo.@Data32
												 }).ToList(); // force execution against store

				foreach (TableTypeTest @tableTypeTest in @tableTypeTests)
					this.OnSelectTableTypeTest(unitOfWorkContext, @tableTypeTest);
				
				return @tableTypeTests;
			}			
		}
		
		public bool SaveTableTypeTest(TableTypeTest @tableTypeTest)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveTableTypeTest(uowc, e), @tableTypeTest);
			
			return retval;
		}
		
		public bool SaveTableTypeTest(IUnitOfWorkContext unitOfWorkContext, TableTypeTest @tableTypeTest)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableTypeTest == null)
				throw new ArgumentNullException("tableTypeTest");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableTypeTest.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableTypeTest(unitOfWorkContext, @tableTypeTest);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest();

					ctx.Context.TableTypeTests.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableTypeTest(unitOfWorkContext, @tableTypeTest);
					
					query = ctx.Context.TableTypeTests.SingleOrDefault(lo => lo.@PkId == @tableTypeTest.@PkId);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@PkId = @tableTypeTest.@PkId;
				query.@Data00 = @tableTypeTest.@Data00;
				query.@Data01 = @tableTypeTest.@Data01;
				query.@Data02 = @tableTypeTest.@Data02;
				query.@Data03 = @tableTypeTest.@Data03;
				query.@Data05 = @tableTypeTest.@Data05;
				query.@Data06 = @tableTypeTest.@Data06;
				query.@Data07 = @tableTypeTest.@Data07;
				query.@Data08 = @tableTypeTest.@Data08;
				query.@Data09 = @tableTypeTest.@Data09;
				query.@Data10 = @tableTypeTest.@Data10;
				if ((object)@tableTypeTest.@Data12 != null) // prevent implicit conversion of null -> exception
					query.@Data12 = @tableTypeTest.@Data12;
				query.@Data13 = @tableTypeTest.@Data13;
				query.@Data14 = @tableTypeTest.@Data14;
				query.@Data15 = @tableTypeTest.@Data15;
				query.@Data16 = @tableTypeTest.@Data16;
				query.@Data17 = @tableTypeTest.@Data17;
				query.@Data18 = @tableTypeTest.@Data18;
				query.@Data19 = @tableTypeTest.@Data19;
				query.@Data20 = @tableTypeTest.@Data20;
				query.@Data21 = @tableTypeTest.@Data21;
				query.@Data22 = @tableTypeTest.@Data22;
				query.@Data26 = @tableTypeTest.@Data26;
				query.@Data27 = @tableTypeTest.@Data27;
				query.@Data29 = @tableTypeTest.@Data29;
				query.@Data30 = @tableTypeTest.@Data30;
				query.@Data31 = @tableTypeTest.@Data31;
				query.@Data32 = @tableTypeTest.@Data32;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableTypeTest(unitOfWorkContext, @tableTypeTest);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableTypeTest.@PkId = query.@PkId;
				@tableTypeTest.@Data00 = query.@Data00;
				@tableTypeTest.@Data01 = query.@Data01.ToArray();
				@tableTypeTest.@Data02 = query.@Data02;
				@tableTypeTest.@Data03 = query.@Data03;
				@tableTypeTest.@Data05 = query.@Data05;
				@tableTypeTest.@Data06 = query.@Data06;
				@tableTypeTest.@Data07 = query.@Data07;
				@tableTypeTest.@Data08 = query.@Data08;
				@tableTypeTest.@Data09 = query.@Data09;
				@tableTypeTest.@Data10 = query.@Data10;
				@tableTypeTest.@Data12 = (object)query.@Data12 != null ? query.@Data12.ToArray() : null;
				@tableTypeTest.@Data13 = query.@Data13;
				@tableTypeTest.@Data14 = query.@Data14;
				@tableTypeTest.@Data15 = query.@Data15;
				@tableTypeTest.@Data16 = query.@Data16;
				@tableTypeTest.@Data17 = query.@Data17;
				@tableTypeTest.@Data18 = query.@Data18;
				@tableTypeTest.@Data19 = query.@Data19;
				@tableTypeTest.@Data20 = query.@Data20;
				@tableTypeTest.@Data21 = query.@Data21;
				@tableTypeTest.@Data22 = query.@Data22;
				@tableTypeTest.@Data26 = query.@Data26;
				@tableTypeTest.@Data27 = query.@Data27;
				@tableTypeTest.@Data29 = query.@Data29;
				@tableTypeTest.@Data30 = query.@Data30;
				@tableTypeTest.@Data31 = query.@Data31.ToArray();
				@tableTypeTest.@Data32 = query.@Data32;
						
				if (wasNew)
				{
					this.OnPostInsertTableTypeTest(unitOfWorkContext, @tableTypeTest);
				}
				else
				{
					this.OnPostUpdateTableTypeTest(unitOfWorkContext, @tableTypeTest);
				}

				return true;
			}
		}
		
		public bool DiscardTableTypeTest(TableTypeTest @tableTypeTest)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardTableTypeTest(uowc, e), @tableTypeTest);
			
			return retval;
		}
		
		public bool DiscardTableTypeTest(IUnitOfWorkContext unitOfWorkContext, TableTypeTest @tableTypeTest)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTest query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableTypeTest == null)
				throw new ArgumentNullException("tableTypeTest");
				
			if (@tableTypeTest.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableTypeTest(unitOfWorkContext, @tableTypeTest);
				
				query = ctx.Context.@TableTypeTests.SingleOrDefault(lo => lo.@PkId == @tableTypeTest.@PkId);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@TableTypeTests.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableTypeTest(unitOfWorkContext, @tableTypeTest);
					
					return false;
				}

				this.OnPostDeleteTableTypeTest(unitOfWorkContext, @tableTypeTest);
				
				@tableTypeTest.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableTypeTest(IUnitOfWorkContext unitOfWorkContext, TableTypeTest @tableTypeTest);
		
		partial void OnPostInsertTableTypeTest(IUnitOfWorkContext unitOfWorkContext, TableTypeTest @tableTypeTest);
		
		partial void OnPreUpdateTableTypeTest(IUnitOfWorkContext unitOfWorkContext, TableTypeTest @tableTypeTest);
		
		partial void OnPostUpdateTableTypeTest(IUnitOfWorkContext unitOfWorkContext, TableTypeTest @tableTypeTest);
		
		partial void OnSaveConflictTableTypeTest(IUnitOfWorkContext unitOfWorkContext, TableTypeTest @tableTypeTest);
		
		partial void OnDiscardConflictTableTypeTest(IUnitOfWorkContext unitOfWorkContext, TableTypeTest @tableTypeTest);
				
		partial void OnPreDeleteTableTypeTest(IUnitOfWorkContext unitOfWorkContext, TableTypeTest @tableTypeTest);
		
		partial void OnPostDeleteTableTypeTest(IUnitOfWorkContext unitOfWorkContext, TableTypeTest @tableTypeTest);
		
		partial void OnSelectTableTypeTest(IUnitOfWorkContext unitOfWorkContext, TableTypeTest @tableTypeTest);		

		public EventLogAggregation LoadEventLogAggregation(DateTime @minCreationTimestamp, DateTime @maxModificationTimestamp)
		{
			EventLogAggregation retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1, p2) => this.LoadEventLogAggregation(uowc, p1, p2), @minCreationTimestamp, @maxModificationTimestamp);
			
			return retval;
		}
		
		public EventLogAggregation LoadEventLogAggregation(IUnitOfWorkContext unitOfWorkContext, DateTime @minCreationTimestamp, DateTime @maxModificationTimestamp)
		{			
			EventLogAggregation @eventLogAggregation;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.EventLogAggregations.SingleOrDefault(lo => lo.@MinCreationTimestamp == @minCreationTimestamp && lo.@MaxModificationTimestamp == @maxModificationTimestamp);

				if ((object)query == null)
					return null; // does not exist
				
				@eventLogAggregation = new EventLogAggregation()
								{
									// map result to POCO from L2S object
									@MinCreationTimestamp = query.@MinCreationTimestamp,
									@MaxModificationTimestamp = query.@MaxModificationTimestamp
								};	

				this.OnSelectEventLogAggregation(unitOfWorkContext, @eventLogAggregation);

				return @eventLogAggregation;
			}
		}
		
		public IList<EventLogAggregation> FindEventLogAggregations(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation>> callback)
		{
			IList<EventLogAggregation> @eventLogAggregations;
			
			@eventLogAggregations = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindEventLogAggregations(uowc, e), callback);
			
			return @eventLogAggregations;
		}
		
		public IList<EventLogAggregation> FindEventLogAggregations(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation>> callback)
		{
			IList<EventLogAggregation> @eventLogAggregations;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@EventLogAggregations);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@eventLogAggregations = queryable.Select(lo => new EventLogAggregation()
												 {
													// map results to POCOs from L2S objects
													@MinCreationTimestamp = lo.@MinCreationTimestamp,
													@MaxModificationTimestamp = lo.@MaxModificationTimestamp
												 }).ToList(); // force execution against store

				foreach (EventLogAggregation @eventLogAggregation in @eventLogAggregations)
					this.OnSelectEventLogAggregation(unitOfWorkContext, @eventLogAggregation);
				
				return @eventLogAggregations;
			}			
		}
		
		public bool SaveEventLogAggregation(EventLogAggregation @eventLogAggregation)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveEventLogAggregation(uowc, e), @eventLogAggregation);
			
			return retval;
		}
		
		public bool SaveEventLogAggregation(IUnitOfWorkContext unitOfWorkContext, EventLogAggregation @eventLogAggregation)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@eventLogAggregation == null)
				throw new ArgumentNullException("eventLogAggregation");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @eventLogAggregation.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEventLogAggregation(unitOfWorkContext, @eventLogAggregation);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation();

					ctx.Context.EventLogAggregations.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEventLogAggregation(unitOfWorkContext, @eventLogAggregation);
					
					query = ctx.Context.EventLogAggregations.SingleOrDefault(lo => lo.@MinCreationTimestamp == @eventLogAggregation.@MinCreationTimestamp && lo.@MaxModificationTimestamp == @eventLogAggregation.@MaxModificationTimestamp);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@MinCreationTimestamp = @eventLogAggregation.@MinCreationTimestamp;
				query.@MaxModificationTimestamp = @eventLogAggregation.@MaxModificationTimestamp;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEventLogAggregation(unitOfWorkContext, @eventLogAggregation);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@eventLogAggregation.@MinCreationTimestamp = query.@MinCreationTimestamp;
				@eventLogAggregation.@MaxModificationTimestamp = query.@MaxModificationTimestamp;
						
				if (wasNew)
				{
					this.OnPostInsertEventLogAggregation(unitOfWorkContext, @eventLogAggregation);
				}
				else
				{
					this.OnPostUpdateEventLogAggregation(unitOfWorkContext, @eventLogAggregation);
				}

				return true;
			}
		}
		
		public bool DiscardEventLogAggregation(EventLogAggregation @eventLogAggregation)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardEventLogAggregation(uowc, e), @eventLogAggregation);
			
			return retval;
		}
		
		public bool DiscardEventLogAggregation(IUnitOfWorkContext unitOfWorkContext, EventLogAggregation @eventLogAggregation)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogAggregation query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@eventLogAggregation == null)
				throw new ArgumentNullException("eventLogAggregation");
				
			if (@eventLogAggregation.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEventLogAggregation(unitOfWorkContext, @eventLogAggregation);
				
				query = ctx.Context.@EventLogAggregations.SingleOrDefault(lo => lo.@MinCreationTimestamp == @eventLogAggregation.@MinCreationTimestamp && lo.@MaxModificationTimestamp == @eventLogAggregation.@MaxModificationTimestamp);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@EventLogAggregations.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEventLogAggregation(unitOfWorkContext, @eventLogAggregation);
					
					return false;
				}

				this.OnPostDeleteEventLogAggregation(unitOfWorkContext, @eventLogAggregation);
				
				@eventLogAggregation.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEventLogAggregation(IUnitOfWorkContext unitOfWorkContext, EventLogAggregation @eventLogAggregation);
		
		partial void OnPostInsertEventLogAggregation(IUnitOfWorkContext unitOfWorkContext, EventLogAggregation @eventLogAggregation);
		
		partial void OnPreUpdateEventLogAggregation(IUnitOfWorkContext unitOfWorkContext, EventLogAggregation @eventLogAggregation);
		
		partial void OnPostUpdateEventLogAggregation(IUnitOfWorkContext unitOfWorkContext, EventLogAggregation @eventLogAggregation);
		
		partial void OnSaveConflictEventLogAggregation(IUnitOfWorkContext unitOfWorkContext, EventLogAggregation @eventLogAggregation);
		
		partial void OnDiscardConflictEventLogAggregation(IUnitOfWorkContext unitOfWorkContext, EventLogAggregation @eventLogAggregation);
				
		partial void OnPreDeleteEventLogAggregation(IUnitOfWorkContext unitOfWorkContext, EventLogAggregation @eventLogAggregation);
		
		partial void OnPostDeleteEventLogAggregation(IUnitOfWorkContext unitOfWorkContext, EventLogAggregation @eventLogAggregation);
		
		partial void OnSelectEventLogAggregation(IUnitOfWorkContext unitOfWorkContext, EventLogAggregation @eventLogAggregation);		
		public EventLogHistory LoadEventLogHistory(Int64 @timestampId, Int32 @eventLogId)
		{
			EventLogHistory retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1, p2) => this.LoadEventLogHistory(uowc, p1, p2), @timestampId, @eventLogId);
			
			return retval;
		}
		
		public EventLogHistory LoadEventLogHistory(IUnitOfWorkContext unitOfWorkContext, Int64 @timestampId, Int32 @eventLogId)
		{			
			EventLogHistory @eventLogHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.EventLogHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@EventLogId == @eventLogId);

				if ((object)query == null)
					return null; // does not exist
				
				@eventLogHistory = new EventLogHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@EventLogId = query.@EventLogId,
									@EventText = query.@EventText,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEventLogHistory(unitOfWorkContext, @eventLogHistory);

				return @eventLogHistory;
			}
		}
		
		public IList<EventLogHistory> FindEventLogHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory>> callback)
		{
			IList<EventLogHistory> @eventLogHistories;
			
			@eventLogHistories = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindEventLogHistories(uowc, e), callback);
			
			return @eventLogHistories;
		}
		
		public IList<EventLogHistory> FindEventLogHistories(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory>> callback)
		{
			IList<EventLogHistory> @eventLogHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@EventLogHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@eventLogHistories = queryable.Select(lo => new EventLogHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@EventLogId = lo.@EventLogId,
													@EventText = lo.@EventText,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@LogicalDelete = lo.@LogicalDelete
												 }).ToList(); // force execution against store

				foreach (EventLogHistory @eventLogHistory in @eventLogHistories)
					this.OnSelectEventLogHistory(unitOfWorkContext, @eventLogHistory);
				
				return @eventLogHistories;
			}			
		}
		
		public bool SaveEventLogHistory(EventLogHistory @eventLogHistory)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveEventLogHistory(uowc, e), @eventLogHistory);
			
			return retval;
		}
		
		public bool SaveEventLogHistory(IUnitOfWorkContext unitOfWorkContext, EventLogHistory @eventLogHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@eventLogHistory == null)
				throw new ArgumentNullException("eventLogHistory");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @eventLogHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEventLogHistory(unitOfWorkContext, @eventLogHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory();

					ctx.Context.EventLogHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEventLogHistory(unitOfWorkContext, @eventLogHistory);
					
					query = ctx.Context.EventLogHistories.SingleOrDefault(lo => lo.@TimestampId == @eventLogHistory.@TimestampId && lo.@EventLogId == @eventLogHistory.@EventLogId);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @eventLogHistory.@TimestampId;
				query.@EventLogId = @eventLogHistory.@EventLogId;
				query.@EventText = @eventLogHistory.@EventText;
				query.@CreationTimestamp = @eventLogHistory.@CreationTimestamp;
				query.@ModificationTimestamp = @eventLogHistory.@ModificationTimestamp;
				query.@LogicalDelete = @eventLogHistory.@LogicalDelete;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEventLogHistory(unitOfWorkContext, @eventLogHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@eventLogHistory.@TimestampId = query.@TimestampId;
				@eventLogHistory.@EventLogId = query.@EventLogId;
				@eventLogHistory.@EventText = query.@EventText;
				@eventLogHistory.@CreationTimestamp = query.@CreationTimestamp;
				@eventLogHistory.@ModificationTimestamp = query.@ModificationTimestamp;
				@eventLogHistory.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEventLogHistory(unitOfWorkContext, @eventLogHistory);
				}
				else
				{
					this.OnPostUpdateEventLogHistory(unitOfWorkContext, @eventLogHistory);
				}

				return true;
			}
		}
		
		public bool DiscardEventLogHistory(EventLogHistory @eventLogHistory)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardEventLogHistory(uowc, e), @eventLogHistory);
			
			return retval;
		}
		
		public bool DiscardEventLogHistory(IUnitOfWorkContext unitOfWorkContext, EventLogHistory @eventLogHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EventLogHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@eventLogHistory == null)
				throw new ArgumentNullException("eventLogHistory");
				
			if (@eventLogHistory.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEventLogHistory(unitOfWorkContext, @eventLogHistory);
				
				query = ctx.Context.@EventLogHistories.SingleOrDefault(lo => lo.@TimestampId == @eventLogHistory.@TimestampId && lo.@EventLogId == @eventLogHistory.@EventLogId);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@EventLogHistories.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEventLogHistory(unitOfWorkContext, @eventLogHistory);
					
					return false;
				}

				this.OnPostDeleteEventLogHistory(unitOfWorkContext, @eventLogHistory);
				
				@eventLogHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEventLogHistory(IUnitOfWorkContext unitOfWorkContext, EventLogHistory @eventLogHistory);
		
		partial void OnPostInsertEventLogHistory(IUnitOfWorkContext unitOfWorkContext, EventLogHistory @eventLogHistory);
		
		partial void OnPreUpdateEventLogHistory(IUnitOfWorkContext unitOfWorkContext, EventLogHistory @eventLogHistory);
		
		partial void OnPostUpdateEventLogHistory(IUnitOfWorkContext unitOfWorkContext, EventLogHistory @eventLogHistory);
		
		partial void OnSaveConflictEventLogHistory(IUnitOfWorkContext unitOfWorkContext, EventLogHistory @eventLogHistory);
		
		partial void OnDiscardConflictEventLogHistory(IUnitOfWorkContext unitOfWorkContext, EventLogHistory @eventLogHistory);
				
		partial void OnPreDeleteEventLogHistory(IUnitOfWorkContext unitOfWorkContext, EventLogHistory @eventLogHistory);
		
		partial void OnPostDeleteEventLogHistory(IUnitOfWorkContext unitOfWorkContext, EventLogHistory @eventLogHistory);
		
		partial void OnSelectEventLogHistory(IUnitOfWorkContext unitOfWorkContext, EventLogHistory @eventLogHistory);		

		public EmailMessageHistory LoadEmailMessageHistory(Int64 @timestampId, Int32 @emailMessageId)
		{
			EmailMessageHistory retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1, p2) => this.LoadEmailMessageHistory(uowc, p1, p2), @timestampId, @emailMessageId);
			
			return retval;
		}
		
		public EmailMessageHistory LoadEmailMessageHistory(IUnitOfWorkContext unitOfWorkContext, Int64 @timestampId, Int32 @emailMessageId)
		{			
			EmailMessageHistory @emailMessageHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.EmailMessageHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@EmailMessageId == @emailMessageId);

				if ((object)query == null)
					return null; // does not exist
				
				@emailMessageHistory = new EmailMessageHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@EmailMessageId = query.@EmailMessageId,
									@From = query.@From,
									@Sender = query.@Sender,
									@ReplyTo = query.@ReplyTo,
									@To = query.@To,
									@CarbonCopy = query.@CarbonCopy,
									@BlindCarbonCopy = query.@BlindCarbonCopy,
									@Subject = query.@Subject,
									@IsBodyHtml = query.@IsBodyHtml,
									@Body = query.@Body,
									@Processed = query.@Processed,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEmailMessageHistory(unitOfWorkContext, @emailMessageHistory);

				return @emailMessageHistory;
			}
		}
		
		public IList<EmailMessageHistory> FindEmailMessageHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory>> callback)
		{
			IList<EmailMessageHistory> @emailMessageHistories;
			
			@emailMessageHistories = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindEmailMessageHistories(uowc, e), callback);
			
			return @emailMessageHistories;
		}
		
		public IList<EmailMessageHistory> FindEmailMessageHistories(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory>> callback)
		{
			IList<EmailMessageHistory> @emailMessageHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@EmailMessageHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@emailMessageHistories = queryable.Select(lo => new EmailMessageHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@EmailMessageId = lo.@EmailMessageId,
													@From = lo.@From,
													@Sender = lo.@Sender,
													@ReplyTo = lo.@ReplyTo,
													@To = lo.@To,
													@CarbonCopy = lo.@CarbonCopy,
													@BlindCarbonCopy = lo.@BlindCarbonCopy,
													@Subject = lo.@Subject,
													@IsBodyHtml = lo.@IsBodyHtml,
													@Body = lo.@Body,
													@Processed = lo.@Processed,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@LogicalDelete = lo.@LogicalDelete
												 }).ToList(); // force execution against store

				foreach (EmailMessageHistory @emailMessageHistory in @emailMessageHistories)
					this.OnSelectEmailMessageHistory(unitOfWorkContext, @emailMessageHistory);
				
				return @emailMessageHistories;
			}			
		}
		
		public bool SaveEmailMessageHistory(EmailMessageHistory @emailMessageHistory)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveEmailMessageHistory(uowc, e), @emailMessageHistory);
			
			return retval;
		}
		
		public bool SaveEmailMessageHistory(IUnitOfWorkContext unitOfWorkContext, EmailMessageHistory @emailMessageHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@emailMessageHistory == null)
				throw new ArgumentNullException("emailMessageHistory");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @emailMessageHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEmailMessageHistory(unitOfWorkContext, @emailMessageHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory();

					ctx.Context.EmailMessageHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEmailMessageHistory(unitOfWorkContext, @emailMessageHistory);
					
					query = ctx.Context.EmailMessageHistories.SingleOrDefault(lo => lo.@TimestampId == @emailMessageHistory.@TimestampId && lo.@EmailMessageId == @emailMessageHistory.@EmailMessageId);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @emailMessageHistory.@TimestampId;
				query.@EmailMessageId = @emailMessageHistory.@EmailMessageId;
				query.@From = @emailMessageHistory.@From;
				query.@Sender = @emailMessageHistory.@Sender;
				query.@ReplyTo = @emailMessageHistory.@ReplyTo;
				query.@To = @emailMessageHistory.@To;
				query.@CarbonCopy = @emailMessageHistory.@CarbonCopy;
				query.@BlindCarbonCopy = @emailMessageHistory.@BlindCarbonCopy;
				query.@Subject = @emailMessageHistory.@Subject;
				query.@IsBodyHtml = @emailMessageHistory.@IsBodyHtml;
				query.@Body = @emailMessageHistory.@Body;
				query.@Processed = @emailMessageHistory.@Processed;
				query.@CreationTimestamp = @emailMessageHistory.@CreationTimestamp;
				query.@ModificationTimestamp = @emailMessageHistory.@ModificationTimestamp;
				query.@LogicalDelete = @emailMessageHistory.@LogicalDelete;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEmailMessageHistory(unitOfWorkContext, @emailMessageHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@emailMessageHistory.@TimestampId = query.@TimestampId;
				@emailMessageHistory.@EmailMessageId = query.@EmailMessageId;
				@emailMessageHistory.@From = query.@From;
				@emailMessageHistory.@Sender = query.@Sender;
				@emailMessageHistory.@ReplyTo = query.@ReplyTo;
				@emailMessageHistory.@To = query.@To;
				@emailMessageHistory.@CarbonCopy = query.@CarbonCopy;
				@emailMessageHistory.@BlindCarbonCopy = query.@BlindCarbonCopy;
				@emailMessageHistory.@Subject = query.@Subject;
				@emailMessageHistory.@IsBodyHtml = query.@IsBodyHtml;
				@emailMessageHistory.@Body = query.@Body;
				@emailMessageHistory.@Processed = query.@Processed;
				@emailMessageHistory.@CreationTimestamp = query.@CreationTimestamp;
				@emailMessageHistory.@ModificationTimestamp = query.@ModificationTimestamp;
				@emailMessageHistory.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEmailMessageHistory(unitOfWorkContext, @emailMessageHistory);
				}
				else
				{
					this.OnPostUpdateEmailMessageHistory(unitOfWorkContext, @emailMessageHistory);
				}

				return true;
			}
		}
		
		public bool DiscardEmailMessageHistory(EmailMessageHistory @emailMessageHistory)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardEmailMessageHistory(uowc, e), @emailMessageHistory);
			
			return retval;
		}
		
		public bool DiscardEmailMessageHistory(IUnitOfWorkContext unitOfWorkContext, EmailMessageHistory @emailMessageHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailMessageHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@emailMessageHistory == null)
				throw new ArgumentNullException("emailMessageHistory");
				
			if (@emailMessageHistory.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEmailMessageHistory(unitOfWorkContext, @emailMessageHistory);
				
				query = ctx.Context.@EmailMessageHistories.SingleOrDefault(lo => lo.@TimestampId == @emailMessageHistory.@TimestampId && lo.@EmailMessageId == @emailMessageHistory.@EmailMessageId);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@EmailMessageHistories.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEmailMessageHistory(unitOfWorkContext, @emailMessageHistory);
					
					return false;
				}

				this.OnPostDeleteEmailMessageHistory(unitOfWorkContext, @emailMessageHistory);
				
				@emailMessageHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEmailMessageHistory(IUnitOfWorkContext unitOfWorkContext, EmailMessageHistory @emailMessageHistory);
		
		partial void OnPostInsertEmailMessageHistory(IUnitOfWorkContext unitOfWorkContext, EmailMessageHistory @emailMessageHistory);
		
		partial void OnPreUpdateEmailMessageHistory(IUnitOfWorkContext unitOfWorkContext, EmailMessageHistory @emailMessageHistory);
		
		partial void OnPostUpdateEmailMessageHistory(IUnitOfWorkContext unitOfWorkContext, EmailMessageHistory @emailMessageHistory);
		
		partial void OnSaveConflictEmailMessageHistory(IUnitOfWorkContext unitOfWorkContext, EmailMessageHistory @emailMessageHistory);
		
		partial void OnDiscardConflictEmailMessageHistory(IUnitOfWorkContext unitOfWorkContext, EmailMessageHistory @emailMessageHistory);
				
		partial void OnPreDeleteEmailMessageHistory(IUnitOfWorkContext unitOfWorkContext, EmailMessageHistory @emailMessageHistory);
		
		partial void OnPostDeleteEmailMessageHistory(IUnitOfWorkContext unitOfWorkContext, EmailMessageHistory @emailMessageHistory);
		
		partial void OnSelectEmailMessageHistory(IUnitOfWorkContext unitOfWorkContext, EmailMessageHistory @emailMessageHistory);		

		public EmailAttachmentHistory LoadEmailAttachmentHistory(Int64 @timestampId, Int32 @emailAttachmentId)
		{
			EmailAttachmentHistory retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1, p2) => this.LoadEmailAttachmentHistory(uowc, p1, p2), @timestampId, @emailAttachmentId);
			
			return retval;
		}
		
		public EmailAttachmentHistory LoadEmailAttachmentHistory(IUnitOfWorkContext unitOfWorkContext, Int64 @timestampId, Int32 @emailAttachmentId)
		{			
			EmailAttachmentHistory @emailAttachmentHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.EmailAttachmentHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@EmailAttachmentId == @emailAttachmentId);

				if ((object)query == null)
					return null; // does not exist
				
				@emailAttachmentHistory = new EmailAttachmentHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@EmailAttachmentId = query.@EmailAttachmentId,
									@EmailMessageId = query.@EmailMessageId,
									@MimeType = query.@MimeType,
									@AttachmentBits = (object)query.AttachmentBits != null ? query.@AttachmentBits.ToArray() : null,
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectEmailAttachmentHistory(unitOfWorkContext, @emailAttachmentHistory);

				return @emailAttachmentHistory;
			}
		}
		
		public IList<EmailAttachmentHistory> FindEmailAttachmentHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory>> callback)
		{
			IList<EmailAttachmentHistory> @emailAttachmentHistories;
			
			@emailAttachmentHistories = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindEmailAttachmentHistories(uowc, e), callback);
			
			return @emailAttachmentHistories;
		}
		
		public IList<EmailAttachmentHistory> FindEmailAttachmentHistories(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory>> callback)
		{
			IList<EmailAttachmentHistory> @emailAttachmentHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@EmailAttachmentHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@emailAttachmentHistories = queryable.Select(lo => new EmailAttachmentHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@EmailAttachmentId = lo.@EmailAttachmentId,
													@EmailMessageId = lo.@EmailMessageId,
													@MimeType = lo.@MimeType,
													@AttachmentBits = (object)lo.@AttachmentBits != null ? lo.@AttachmentBits.ToArray() : null,
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@LogicalDelete = lo.@LogicalDelete
												 }).ToList(); // force execution against store

				foreach (EmailAttachmentHistory @emailAttachmentHistory in @emailAttachmentHistories)
					this.OnSelectEmailAttachmentHistory(unitOfWorkContext, @emailAttachmentHistory);
				
				return @emailAttachmentHistories;
			}			
		}
		
		public bool SaveEmailAttachmentHistory(EmailAttachmentHistory @emailAttachmentHistory)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveEmailAttachmentHistory(uowc, e), @emailAttachmentHistory);
			
			return retval;
		}
		
		public bool SaveEmailAttachmentHistory(IUnitOfWorkContext unitOfWorkContext, EmailAttachmentHistory @emailAttachmentHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@emailAttachmentHistory == null)
				throw new ArgumentNullException("emailAttachmentHistory");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @emailAttachmentHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertEmailAttachmentHistory(unitOfWorkContext, @emailAttachmentHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory();

					ctx.Context.EmailAttachmentHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateEmailAttachmentHistory(unitOfWorkContext, @emailAttachmentHistory);
					
					query = ctx.Context.EmailAttachmentHistories.SingleOrDefault(lo => lo.@TimestampId == @emailAttachmentHistory.@TimestampId && lo.@EmailAttachmentId == @emailAttachmentHistory.@EmailAttachmentId);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @emailAttachmentHistory.@TimestampId;
				query.@EmailAttachmentId = @emailAttachmentHistory.@EmailAttachmentId;
				query.@EmailMessageId = @emailAttachmentHistory.@EmailMessageId;
				query.@MimeType = @emailAttachmentHistory.@MimeType;
				if ((object)@emailAttachmentHistory.@AttachmentBits != null) // prevent implicit conversion of null -> exception
					query.@AttachmentBits = @emailAttachmentHistory.@AttachmentBits;
				query.@CreationTimestamp = @emailAttachmentHistory.@CreationTimestamp;
				query.@ModificationTimestamp = @emailAttachmentHistory.@ModificationTimestamp;
				query.@LogicalDelete = @emailAttachmentHistory.@LogicalDelete;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictEmailAttachmentHistory(unitOfWorkContext, @emailAttachmentHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@emailAttachmentHistory.@TimestampId = query.@TimestampId;
				@emailAttachmentHistory.@EmailAttachmentId = query.@EmailAttachmentId;
				@emailAttachmentHistory.@EmailMessageId = query.@EmailMessageId;
				@emailAttachmentHistory.@MimeType = query.@MimeType;
				@emailAttachmentHistory.@AttachmentBits = (object)query.@AttachmentBits != null ? query.@AttachmentBits.ToArray() : null;
				@emailAttachmentHistory.@CreationTimestamp = query.@CreationTimestamp;
				@emailAttachmentHistory.@ModificationTimestamp = query.@ModificationTimestamp;
				@emailAttachmentHistory.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertEmailAttachmentHistory(unitOfWorkContext, @emailAttachmentHistory);
				}
				else
				{
					this.OnPostUpdateEmailAttachmentHistory(unitOfWorkContext, @emailAttachmentHistory);
				}

				return true;
			}
		}
		
		public bool DiscardEmailAttachmentHistory(EmailAttachmentHistory @emailAttachmentHistory)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardEmailAttachmentHistory(uowc, e), @emailAttachmentHistory);
			
			return retval;
		}
		
		public bool DiscardEmailAttachmentHistory(IUnitOfWorkContext unitOfWorkContext, EmailAttachmentHistory @emailAttachmentHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.EmailAttachmentHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@emailAttachmentHistory == null)
				throw new ArgumentNullException("emailAttachmentHistory");
				
			if (@emailAttachmentHistory.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteEmailAttachmentHistory(unitOfWorkContext, @emailAttachmentHistory);
				
				query = ctx.Context.@EmailAttachmentHistories.SingleOrDefault(lo => lo.@TimestampId == @emailAttachmentHistory.@TimestampId && lo.@EmailAttachmentId == @emailAttachmentHistory.@EmailAttachmentId);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@EmailAttachmentHistories.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictEmailAttachmentHistory(unitOfWorkContext, @emailAttachmentHistory);
					
					return false;
				}

				this.OnPostDeleteEmailAttachmentHistory(unitOfWorkContext, @emailAttachmentHistory);
				
				@emailAttachmentHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertEmailAttachmentHistory(IUnitOfWorkContext unitOfWorkContext, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnPostInsertEmailAttachmentHistory(IUnitOfWorkContext unitOfWorkContext, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnPreUpdateEmailAttachmentHistory(IUnitOfWorkContext unitOfWorkContext, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnPostUpdateEmailAttachmentHistory(IUnitOfWorkContext unitOfWorkContext, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnSaveConflictEmailAttachmentHistory(IUnitOfWorkContext unitOfWorkContext, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnDiscardConflictEmailAttachmentHistory(IUnitOfWorkContext unitOfWorkContext, EmailAttachmentHistory @emailAttachmentHistory);
				
		partial void OnPreDeleteEmailAttachmentHistory(IUnitOfWorkContext unitOfWorkContext, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnPostDeleteEmailAttachmentHistory(IUnitOfWorkContext unitOfWorkContext, EmailAttachmentHistory @emailAttachmentHistory);
		
		partial void OnSelectEmailAttachmentHistory(IUnitOfWorkContext unitOfWorkContext, EmailAttachmentHistory @emailAttachmentHistory);		

		public TableWithPrimaryKeyAsIdentityHistory LoadTableWithPrimaryKeyAsIdentityHistory(Int64 @timestampId, Int32 @pkId)
		{
			TableWithPrimaryKeyAsIdentityHistory retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1, p2) => this.LoadTableWithPrimaryKeyAsIdentityHistory(uowc, p1, p2), @timestampId, @pkId);
			
			return retval;
		}
		
		public TableWithPrimaryKeyAsIdentityHistory LoadTableWithPrimaryKeyAsIdentityHistory(IUnitOfWorkContext unitOfWorkContext, Int64 @timestampId, Int32 @pkId)
		{			
			TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.TableWithPrimaryKeyAsIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@PkId == @pkId);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithPrimaryKeyAsIdentityHistory = new TableWithPrimaryKeyAsIdentityHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@PkId = query.@PkId,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithPrimaryKeyAsIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyAsIdentityHistory);

				return @tableWithPrimaryKeyAsIdentityHistory;
			}
		}
		
		public IList<TableWithPrimaryKeyAsIdentityHistory> FindTableWithPrimaryKeyAsIdentityHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory>> callback)
		{
			IList<TableWithPrimaryKeyAsIdentityHistory> @tableWithPrimaryKeyAsIdentityHistories;
			
			@tableWithPrimaryKeyAsIdentityHistories = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindTableWithPrimaryKeyAsIdentityHistories(uowc, e), callback);
			
			return @tableWithPrimaryKeyAsIdentityHistories;
		}
		
		public IList<TableWithPrimaryKeyAsIdentityHistory> FindTableWithPrimaryKeyAsIdentityHistories(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory>> callback)
		{
			IList<TableWithPrimaryKeyAsIdentityHistory> @tableWithPrimaryKeyAsIdentityHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@TableWithPrimaryKeyAsIdentityHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@tableWithPrimaryKeyAsIdentityHistories = queryable.Select(lo => new TableWithPrimaryKeyAsIdentityHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@PkId = lo.@PkId,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }).ToList(); // force execution against store

				foreach (TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory in @tableWithPrimaryKeyAsIdentityHistories)
					this.OnSelectTableWithPrimaryKeyAsIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyAsIdentityHistory);
				
				return @tableWithPrimaryKeyAsIdentityHistories;
			}			
		}
		
		public bool SaveTableWithPrimaryKeyAsIdentityHistory(TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveTableWithPrimaryKeyAsIdentityHistory(uowc, e), @tableWithPrimaryKeyAsIdentityHistory);
			
			return retval;
		}
		
		public bool SaveTableWithPrimaryKeyAsIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithPrimaryKeyAsIdentityHistory == null)
				throw new ArgumentNullException("tableWithPrimaryKeyAsIdentityHistory");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithPrimaryKeyAsIdentityHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithPrimaryKeyAsIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyAsIdentityHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory();

					ctx.Context.TableWithPrimaryKeyAsIdentityHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithPrimaryKeyAsIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyAsIdentityHistory);
					
					query = ctx.Context.TableWithPrimaryKeyAsIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithPrimaryKeyAsIdentityHistory.@TimestampId && lo.@PkId == @tableWithPrimaryKeyAsIdentityHistory.@PkId);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @tableWithPrimaryKeyAsIdentityHistory.@TimestampId;
				query.@PkId = @tableWithPrimaryKeyAsIdentityHistory.@PkId;
				query.@Data01 = @tableWithPrimaryKeyAsIdentityHistory.@Data01;
				query.@Data02 = @tableWithPrimaryKeyAsIdentityHistory.@Data02;
				query.@Data03 = @tableWithPrimaryKeyAsIdentityHistory.@Data03;
				query.@Data04 = @tableWithPrimaryKeyAsIdentityHistory.@Data04;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithPrimaryKeyAsIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyAsIdentityHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithPrimaryKeyAsIdentityHistory.@TimestampId = query.@TimestampId;
				@tableWithPrimaryKeyAsIdentityHistory.@PkId = query.@PkId;
				@tableWithPrimaryKeyAsIdentityHistory.@Data01 = query.@Data01;
				@tableWithPrimaryKeyAsIdentityHistory.@Data02 = query.@Data02;
				@tableWithPrimaryKeyAsIdentityHistory.@Data03 = query.@Data03;
				@tableWithPrimaryKeyAsIdentityHistory.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithPrimaryKeyAsIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyAsIdentityHistory);
				}
				else
				{
					this.OnPostUpdateTableWithPrimaryKeyAsIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyAsIdentityHistory);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithPrimaryKeyAsIdentityHistory(TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardTableWithPrimaryKeyAsIdentityHistory(uowc, e), @tableWithPrimaryKeyAsIdentityHistory);
			
			return retval;
		}
		
		public bool DiscardTableWithPrimaryKeyAsIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsIdentityHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithPrimaryKeyAsIdentityHistory == null)
				throw new ArgumentNullException("tableWithPrimaryKeyAsIdentityHistory");
				
			if (@tableWithPrimaryKeyAsIdentityHistory.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithPrimaryKeyAsIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyAsIdentityHistory);
				
				query = ctx.Context.@TableWithPrimaryKeyAsIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithPrimaryKeyAsIdentityHistory.@TimestampId && lo.@PkId == @tableWithPrimaryKeyAsIdentityHistory.@PkId);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@TableWithPrimaryKeyAsIdentityHistories.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithPrimaryKeyAsIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyAsIdentityHistory);
					
					return false;
				}

				this.OnPostDeleteTableWithPrimaryKeyAsIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyAsIdentityHistory);
				
				@tableWithPrimaryKeyAsIdentityHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithPrimaryKeyAsIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);
		
		partial void OnPostInsertTableWithPrimaryKeyAsIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);
		
		partial void OnPreUpdateTableWithPrimaryKeyAsIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);
		
		partial void OnPostUpdateTableWithPrimaryKeyAsIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);
		
		partial void OnSaveConflictTableWithPrimaryKeyAsIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);
		
		partial void OnDiscardConflictTableWithPrimaryKeyAsIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);
				
		partial void OnPreDeleteTableWithPrimaryKeyAsIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);
		
		partial void OnPostDeleteTableWithPrimaryKeyAsIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);
		
		partial void OnSelectTableWithPrimaryKeyAsIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsIdentityHistory @tableWithPrimaryKeyAsIdentityHistory);		

		public TableWithPrimaryKeyAsDefaultHistory LoadTableWithPrimaryKeyAsDefaultHistory(Int64 @timestampId, Guid @pkDf)
		{
			TableWithPrimaryKeyAsDefaultHistory retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1, p2) => this.LoadTableWithPrimaryKeyAsDefaultHistory(uowc, p1, p2), @timestampId, @pkDf);
			
			return retval;
		}
		
		public TableWithPrimaryKeyAsDefaultHistory LoadTableWithPrimaryKeyAsDefaultHistory(IUnitOfWorkContext unitOfWorkContext, Int64 @timestampId, Guid @pkDf)
		{			
			TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.TableWithPrimaryKeyAsDefaultHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@PkDf == @pkDf);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithPrimaryKeyAsDefaultHistory = new TableWithPrimaryKeyAsDefaultHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@PkDf = query.@PkDf,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithPrimaryKeyAsDefaultHistory(unitOfWorkContext, @tableWithPrimaryKeyAsDefaultHistory);

				return @tableWithPrimaryKeyAsDefaultHistory;
			}
		}
		
		public IList<TableWithPrimaryKeyAsDefaultHistory> FindTableWithPrimaryKeyAsDefaultHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory>> callback)
		{
			IList<TableWithPrimaryKeyAsDefaultHistory> @tableWithPrimaryKeyAsDefaultHistories;
			
			@tableWithPrimaryKeyAsDefaultHistories = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindTableWithPrimaryKeyAsDefaultHistories(uowc, e), callback);
			
			return @tableWithPrimaryKeyAsDefaultHistories;
		}
		
		public IList<TableWithPrimaryKeyAsDefaultHistory> FindTableWithPrimaryKeyAsDefaultHistories(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory>> callback)
		{
			IList<TableWithPrimaryKeyAsDefaultHistory> @tableWithPrimaryKeyAsDefaultHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@TableWithPrimaryKeyAsDefaultHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@tableWithPrimaryKeyAsDefaultHistories = queryable.Select(lo => new TableWithPrimaryKeyAsDefaultHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@PkDf = lo.@PkDf,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }).ToList(); // force execution against store

				foreach (TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory in @tableWithPrimaryKeyAsDefaultHistories)
					this.OnSelectTableWithPrimaryKeyAsDefaultHistory(unitOfWorkContext, @tableWithPrimaryKeyAsDefaultHistory);
				
				return @tableWithPrimaryKeyAsDefaultHistories;
			}			
		}
		
		public bool SaveTableWithPrimaryKeyAsDefaultHistory(TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveTableWithPrimaryKeyAsDefaultHistory(uowc, e), @tableWithPrimaryKeyAsDefaultHistory);
			
			return retval;
		}
		
		public bool SaveTableWithPrimaryKeyAsDefaultHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithPrimaryKeyAsDefaultHistory == null)
				throw new ArgumentNullException("tableWithPrimaryKeyAsDefaultHistory");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithPrimaryKeyAsDefaultHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithPrimaryKeyAsDefaultHistory(unitOfWorkContext, @tableWithPrimaryKeyAsDefaultHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory();

					ctx.Context.TableWithPrimaryKeyAsDefaultHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithPrimaryKeyAsDefaultHistory(unitOfWorkContext, @tableWithPrimaryKeyAsDefaultHistory);
					
					query = ctx.Context.TableWithPrimaryKeyAsDefaultHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithPrimaryKeyAsDefaultHistory.@TimestampId && lo.@PkDf == @tableWithPrimaryKeyAsDefaultHistory.@PkDf);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @tableWithPrimaryKeyAsDefaultHistory.@TimestampId;
				query.@PkDf = @tableWithPrimaryKeyAsDefaultHistory.@PkDf;
				query.@Data01 = @tableWithPrimaryKeyAsDefaultHistory.@Data01;
				query.@Data02 = @tableWithPrimaryKeyAsDefaultHistory.@Data02;
				query.@Data03 = @tableWithPrimaryKeyAsDefaultHistory.@Data03;
				query.@Data04 = @tableWithPrimaryKeyAsDefaultHistory.@Data04;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithPrimaryKeyAsDefaultHistory(unitOfWorkContext, @tableWithPrimaryKeyAsDefaultHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithPrimaryKeyAsDefaultHistory.@TimestampId = query.@TimestampId;
				@tableWithPrimaryKeyAsDefaultHistory.@PkDf = query.@PkDf;
				@tableWithPrimaryKeyAsDefaultHistory.@Data01 = query.@Data01;
				@tableWithPrimaryKeyAsDefaultHistory.@Data02 = query.@Data02;
				@tableWithPrimaryKeyAsDefaultHistory.@Data03 = query.@Data03;
				@tableWithPrimaryKeyAsDefaultHistory.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithPrimaryKeyAsDefaultHistory(unitOfWorkContext, @tableWithPrimaryKeyAsDefaultHistory);
				}
				else
				{
					this.OnPostUpdateTableWithPrimaryKeyAsDefaultHistory(unitOfWorkContext, @tableWithPrimaryKeyAsDefaultHistory);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithPrimaryKeyAsDefaultHistory(TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardTableWithPrimaryKeyAsDefaultHistory(uowc, e), @tableWithPrimaryKeyAsDefaultHistory);
			
			return retval;
		}
		
		public bool DiscardTableWithPrimaryKeyAsDefaultHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyAsDefaultHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithPrimaryKeyAsDefaultHistory == null)
				throw new ArgumentNullException("tableWithPrimaryKeyAsDefaultHistory");
				
			if (@tableWithPrimaryKeyAsDefaultHistory.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithPrimaryKeyAsDefaultHistory(unitOfWorkContext, @tableWithPrimaryKeyAsDefaultHistory);
				
				query = ctx.Context.@TableWithPrimaryKeyAsDefaultHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithPrimaryKeyAsDefaultHistory.@TimestampId && lo.@PkDf == @tableWithPrimaryKeyAsDefaultHistory.@PkDf);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@TableWithPrimaryKeyAsDefaultHistories.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithPrimaryKeyAsDefaultHistory(unitOfWorkContext, @tableWithPrimaryKeyAsDefaultHistory);
					
					return false;
				}

				this.OnPostDeleteTableWithPrimaryKeyAsDefaultHistory(unitOfWorkContext, @tableWithPrimaryKeyAsDefaultHistory);
				
				@tableWithPrimaryKeyAsDefaultHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithPrimaryKeyAsDefaultHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);
		
		partial void OnPostInsertTableWithPrimaryKeyAsDefaultHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);
		
		partial void OnPreUpdateTableWithPrimaryKeyAsDefaultHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);
		
		partial void OnPostUpdateTableWithPrimaryKeyAsDefaultHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);
		
		partial void OnSaveConflictTableWithPrimaryKeyAsDefaultHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);
		
		partial void OnDiscardConflictTableWithPrimaryKeyAsDefaultHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);
				
		partial void OnPreDeleteTableWithPrimaryKeyAsDefaultHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);
		
		partial void OnPostDeleteTableWithPrimaryKeyAsDefaultHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);
		
		partial void OnSelectTableWithPrimaryKeyAsDefaultHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyAsDefaultHistory @tableWithPrimaryKeyAsDefaultHistory);		

		public TableWithPrimaryKeyWithDiffIdentityHistory LoadTableWithPrimaryKeyWithDiffIdentityHistory(Int64 @timestampId, Int32 @pk)
		{
			TableWithPrimaryKeyWithDiffIdentityHistory retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1, p2) => this.LoadTableWithPrimaryKeyWithDiffIdentityHistory(uowc, p1, p2), @timestampId, @pk);
			
			return retval;
		}
		
		public TableWithPrimaryKeyWithDiffIdentityHistory LoadTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWorkContext unitOfWorkContext, Int64 @timestampId, Int32 @pk)
		{			
			TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.TableWithPrimaryKeyWithDiffIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@Pk == @pk);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithPrimaryKeyWithDiffIdentityHistory = new TableWithPrimaryKeyWithDiffIdentityHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@Pk = query.@Pk,
									@Id = query.@Id,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentityHistory);

				return @tableWithPrimaryKeyWithDiffIdentityHistory;
			}
		}
		
		public IList<TableWithPrimaryKeyWithDiffIdentityHistory> FindTableWithPrimaryKeyWithDiffIdentityHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory>> callback)
		{
			IList<TableWithPrimaryKeyWithDiffIdentityHistory> @tableWithPrimaryKeyWithDiffIdentityHistories;
			
			@tableWithPrimaryKeyWithDiffIdentityHistories = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindTableWithPrimaryKeyWithDiffIdentityHistories(uowc, e), callback);
			
			return @tableWithPrimaryKeyWithDiffIdentityHistories;
		}
		
		public IList<TableWithPrimaryKeyWithDiffIdentityHistory> FindTableWithPrimaryKeyWithDiffIdentityHistories(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory>> callback)
		{
			IList<TableWithPrimaryKeyWithDiffIdentityHistory> @tableWithPrimaryKeyWithDiffIdentityHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@TableWithPrimaryKeyWithDiffIdentityHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@tableWithPrimaryKeyWithDiffIdentityHistories = queryable.Select(lo => new TableWithPrimaryKeyWithDiffIdentityHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@Pk = lo.@Pk,
													@Id = lo.@Id,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }).ToList(); // force execution against store

				foreach (TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory in @tableWithPrimaryKeyWithDiffIdentityHistories)
					this.OnSelectTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentityHistory);
				
				return @tableWithPrimaryKeyWithDiffIdentityHistories;
			}			
		}
		
		public bool SaveTableWithPrimaryKeyWithDiffIdentityHistory(TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveTableWithPrimaryKeyWithDiffIdentityHistory(uowc, e), @tableWithPrimaryKeyWithDiffIdentityHistory);
			
			return retval;
		}
		
		public bool SaveTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithPrimaryKeyWithDiffIdentityHistory == null)
				throw new ArgumentNullException("tableWithPrimaryKeyWithDiffIdentityHistory");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithPrimaryKeyWithDiffIdentityHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentityHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory();

					ctx.Context.TableWithPrimaryKeyWithDiffIdentityHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentityHistory);
					
					query = ctx.Context.TableWithPrimaryKeyWithDiffIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithPrimaryKeyWithDiffIdentityHistory.@TimestampId && lo.@Pk == @tableWithPrimaryKeyWithDiffIdentityHistory.@Pk);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @tableWithPrimaryKeyWithDiffIdentityHistory.@TimestampId;
				query.@Pk = @tableWithPrimaryKeyWithDiffIdentityHistory.@Pk;
				query.@Id = @tableWithPrimaryKeyWithDiffIdentityHistory.@Id;
				query.@Data01 = @tableWithPrimaryKeyWithDiffIdentityHistory.@Data01;
				query.@Data02 = @tableWithPrimaryKeyWithDiffIdentityHistory.@Data02;
				query.@Data03 = @tableWithPrimaryKeyWithDiffIdentityHistory.@Data03;
				query.@Data04 = @tableWithPrimaryKeyWithDiffIdentityHistory.@Data04;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentityHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithPrimaryKeyWithDiffIdentityHistory.@TimestampId = query.@TimestampId;
				@tableWithPrimaryKeyWithDiffIdentityHistory.@Pk = query.@Pk;
				@tableWithPrimaryKeyWithDiffIdentityHistory.@Id = query.@Id;
				@tableWithPrimaryKeyWithDiffIdentityHistory.@Data01 = query.@Data01;
				@tableWithPrimaryKeyWithDiffIdentityHistory.@Data02 = query.@Data02;
				@tableWithPrimaryKeyWithDiffIdentityHistory.@Data03 = query.@Data03;
				@tableWithPrimaryKeyWithDiffIdentityHistory.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentityHistory);
				}
				else
				{
					this.OnPostUpdateTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentityHistory);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithPrimaryKeyWithDiffIdentityHistory(TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardTableWithPrimaryKeyWithDiffIdentityHistory(uowc, e), @tableWithPrimaryKeyWithDiffIdentityHistory);
			
			return retval;
		}
		
		public bool DiscardTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyWithDiffIdentityHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithPrimaryKeyWithDiffIdentityHistory == null)
				throw new ArgumentNullException("tableWithPrimaryKeyWithDiffIdentityHistory");
				
			if (@tableWithPrimaryKeyWithDiffIdentityHistory.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentityHistory);
				
				query = ctx.Context.@TableWithPrimaryKeyWithDiffIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithPrimaryKeyWithDiffIdentityHistory.@TimestampId && lo.@Pk == @tableWithPrimaryKeyWithDiffIdentityHistory.@Pk);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@TableWithPrimaryKeyWithDiffIdentityHistories.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentityHistory);
					
					return false;
				}

				this.OnPostDeleteTableWithPrimaryKeyWithDiffIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyWithDiffIdentityHistory);
				
				@tableWithPrimaryKeyWithDiffIdentityHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);
		
		partial void OnPostInsertTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);
		
		partial void OnPreUpdateTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);
		
		partial void OnPostUpdateTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);
		
		partial void OnSaveConflictTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);
		
		partial void OnDiscardConflictTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);
				
		partial void OnPreDeleteTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);
		
		partial void OnPostDeleteTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);
		
		partial void OnSelectTableWithPrimaryKeyWithDiffIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyWithDiffIdentityHistory @tableWithPrimaryKeyWithDiffIdentityHistory);		

		public TableNoPrimaryKeyWithIdentityHistory LoadTableNoPrimaryKeyWithIdentityHistory(Int64 @timestampId, Int32 @id, Boolean @data01, DateTime @data02, Int32 @data03, String @data04)
		{
			TableNoPrimaryKeyWithIdentityHistory retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1, p2, p3, p4, p5, p6) => this.LoadTableNoPrimaryKeyWithIdentityHistory(uowc, p1, p2, p3, p4, p5, p6), @timestampId, @id, @data01, @data02, @data03, @data04);
			
			return retval;
		}
		
		public TableNoPrimaryKeyWithIdentityHistory LoadTableNoPrimaryKeyWithIdentityHistory(IUnitOfWorkContext unitOfWorkContext, Int64 @timestampId, Int32 @id, Boolean @data01, DateTime @data02, Int32 @data03, String @data04)
		{			
			TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.TableNoPrimaryKeyWithIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@Id == @id && lo.@Data01 == @data01 && lo.@Data02 == @data02 && lo.@Data03 == @data03 && lo.@Data04 == @data04);

				if ((object)query == null)
					return null; // does not exist
				
				@tableNoPrimaryKeyWithIdentityHistory = new TableNoPrimaryKeyWithIdentityHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@Id = query.@Id,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableNoPrimaryKeyWithIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyWithIdentityHistory);

				return @tableNoPrimaryKeyWithIdentityHistory;
			}
		}
		
		public IList<TableNoPrimaryKeyWithIdentityHistory> FindTableNoPrimaryKeyWithIdentityHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory>> callback)
		{
			IList<TableNoPrimaryKeyWithIdentityHistory> @tableNoPrimaryKeyWithIdentityHistories;
			
			@tableNoPrimaryKeyWithIdentityHistories = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindTableNoPrimaryKeyWithIdentityHistories(uowc, e), callback);
			
			return @tableNoPrimaryKeyWithIdentityHistories;
		}
		
		public IList<TableNoPrimaryKeyWithIdentityHistory> FindTableNoPrimaryKeyWithIdentityHistories(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory>> callback)
		{
			IList<TableNoPrimaryKeyWithIdentityHistory> @tableNoPrimaryKeyWithIdentityHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@TableNoPrimaryKeyWithIdentityHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@tableNoPrimaryKeyWithIdentityHistories = queryable.Select(lo => new TableNoPrimaryKeyWithIdentityHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@Id = lo.@Id,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }).ToList(); // force execution against store

				foreach (TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory in @tableNoPrimaryKeyWithIdentityHistories)
					this.OnSelectTableNoPrimaryKeyWithIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyWithIdentityHistory);
				
				return @tableNoPrimaryKeyWithIdentityHistories;
			}			
		}
		
		public bool SaveTableNoPrimaryKeyWithIdentityHistory(TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveTableNoPrimaryKeyWithIdentityHistory(uowc, e), @tableNoPrimaryKeyWithIdentityHistory);
			
			return retval;
		}
		
		public bool SaveTableNoPrimaryKeyWithIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableNoPrimaryKeyWithIdentityHistory == null)
				throw new ArgumentNullException("tableNoPrimaryKeyWithIdentityHistory");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableNoPrimaryKeyWithIdentityHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableNoPrimaryKeyWithIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyWithIdentityHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory();

					ctx.Context.TableNoPrimaryKeyWithIdentityHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableNoPrimaryKeyWithIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyWithIdentityHistory);
					
					query = ctx.Context.TableNoPrimaryKeyWithIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableNoPrimaryKeyWithIdentityHistory.@TimestampId && lo.@Id == @tableNoPrimaryKeyWithIdentityHistory.@Id && lo.@Data01 == @tableNoPrimaryKeyWithIdentityHistory.@Data01 && lo.@Data02 == @tableNoPrimaryKeyWithIdentityHistory.@Data02 && lo.@Data03 == @tableNoPrimaryKeyWithIdentityHistory.@Data03 && lo.@Data04 == @tableNoPrimaryKeyWithIdentityHistory.@Data04);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @tableNoPrimaryKeyWithIdentityHistory.@TimestampId;
				query.@Id = @tableNoPrimaryKeyWithIdentityHistory.@Id;
				query.@Data01 = @tableNoPrimaryKeyWithIdentityHistory.@Data01;
				query.@Data02 = @tableNoPrimaryKeyWithIdentityHistory.@Data02;
				query.@Data03 = @tableNoPrimaryKeyWithIdentityHistory.@Data03;
				query.@Data04 = @tableNoPrimaryKeyWithIdentityHistory.@Data04;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableNoPrimaryKeyWithIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyWithIdentityHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableNoPrimaryKeyWithIdentityHistory.@TimestampId = query.@TimestampId;
				@tableNoPrimaryKeyWithIdentityHistory.@Id = query.@Id;
				@tableNoPrimaryKeyWithIdentityHistory.@Data01 = query.@Data01;
				@tableNoPrimaryKeyWithIdentityHistory.@Data02 = query.@Data02;
				@tableNoPrimaryKeyWithIdentityHistory.@Data03 = query.@Data03;
				@tableNoPrimaryKeyWithIdentityHistory.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableNoPrimaryKeyWithIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyWithIdentityHistory);
				}
				else
				{
					this.OnPostUpdateTableNoPrimaryKeyWithIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyWithIdentityHistory);
				}

				return true;
			}
		}
		
		public bool DiscardTableNoPrimaryKeyWithIdentityHistory(TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardTableNoPrimaryKeyWithIdentityHistory(uowc, e), @tableNoPrimaryKeyWithIdentityHistory);
			
			return retval;
		}
		
		public bool DiscardTableNoPrimaryKeyWithIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyWithIdentityHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableNoPrimaryKeyWithIdentityHistory == null)
				throw new ArgumentNullException("tableNoPrimaryKeyWithIdentityHistory");
				
			if (@tableNoPrimaryKeyWithIdentityHistory.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableNoPrimaryKeyWithIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyWithIdentityHistory);
				
				query = ctx.Context.@TableNoPrimaryKeyWithIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableNoPrimaryKeyWithIdentityHistory.@TimestampId && lo.@Id == @tableNoPrimaryKeyWithIdentityHistory.@Id && lo.@Data01 == @tableNoPrimaryKeyWithIdentityHistory.@Data01 && lo.@Data02 == @tableNoPrimaryKeyWithIdentityHistory.@Data02 && lo.@Data03 == @tableNoPrimaryKeyWithIdentityHistory.@Data03 && lo.@Data04 == @tableNoPrimaryKeyWithIdentityHistory.@Data04);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@TableNoPrimaryKeyWithIdentityHistories.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableNoPrimaryKeyWithIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyWithIdentityHistory);
					
					return false;
				}

				this.OnPostDeleteTableNoPrimaryKeyWithIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyWithIdentityHistory);
				
				@tableNoPrimaryKeyWithIdentityHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableNoPrimaryKeyWithIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);
		
		partial void OnPostInsertTableNoPrimaryKeyWithIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);
		
		partial void OnPreUpdateTableNoPrimaryKeyWithIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);
		
		partial void OnPostUpdateTableNoPrimaryKeyWithIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);
		
		partial void OnSaveConflictTableNoPrimaryKeyWithIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);
		
		partial void OnDiscardConflictTableNoPrimaryKeyWithIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);
				
		partial void OnPreDeleteTableNoPrimaryKeyWithIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);
		
		partial void OnPostDeleteTableNoPrimaryKeyWithIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);
		
		partial void OnSelectTableNoPrimaryKeyWithIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyWithIdentityHistory @tableNoPrimaryKeyWithIdentityHistory);		

		public TableWithPrimaryKeyNoIdentityHistory LoadTableWithPrimaryKeyNoIdentityHistory(Int64 @timestampId, Int32 @pk)
		{
			TableWithPrimaryKeyNoIdentityHistory retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1, p2) => this.LoadTableWithPrimaryKeyNoIdentityHistory(uowc, p1, p2), @timestampId, @pk);
			
			return retval;
		}
		
		public TableWithPrimaryKeyNoIdentityHistory LoadTableWithPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, Int64 @timestampId, Int32 @pk)
		{			
			TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.TableWithPrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@Pk == @pk);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithPrimaryKeyNoIdentityHistory = new TableWithPrimaryKeyNoIdentityHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@Pk = query.@Pk,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyNoIdentityHistory);

				return @tableWithPrimaryKeyNoIdentityHistory;
			}
		}
		
		public IList<TableWithPrimaryKeyNoIdentityHistory> FindTableWithPrimaryKeyNoIdentityHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory>> callback)
		{
			IList<TableWithPrimaryKeyNoIdentityHistory> @tableWithPrimaryKeyNoIdentityHistories;
			
			@tableWithPrimaryKeyNoIdentityHistories = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindTableWithPrimaryKeyNoIdentityHistories(uowc, e), callback);
			
			return @tableWithPrimaryKeyNoIdentityHistories;
		}
		
		public IList<TableWithPrimaryKeyNoIdentityHistory> FindTableWithPrimaryKeyNoIdentityHistories(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory>> callback)
		{
			IList<TableWithPrimaryKeyNoIdentityHistory> @tableWithPrimaryKeyNoIdentityHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@TableWithPrimaryKeyNoIdentityHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@tableWithPrimaryKeyNoIdentityHistories = queryable.Select(lo => new TableWithPrimaryKeyNoIdentityHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@Pk = lo.@Pk,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }).ToList(); // force execution against store

				foreach (TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory in @tableWithPrimaryKeyNoIdentityHistories)
					this.OnSelectTableWithPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyNoIdentityHistory);
				
				return @tableWithPrimaryKeyNoIdentityHistories;
			}			
		}
		
		public bool SaveTableWithPrimaryKeyNoIdentityHistory(TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveTableWithPrimaryKeyNoIdentityHistory(uowc, e), @tableWithPrimaryKeyNoIdentityHistory);
			
			return retval;
		}
		
		public bool SaveTableWithPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithPrimaryKeyNoIdentityHistory == null)
				throw new ArgumentNullException("tableWithPrimaryKeyNoIdentityHistory");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithPrimaryKeyNoIdentityHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyNoIdentityHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory();

					ctx.Context.TableWithPrimaryKeyNoIdentityHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyNoIdentityHistory);
					
					query = ctx.Context.TableWithPrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithPrimaryKeyNoIdentityHistory.@TimestampId && lo.@Pk == @tableWithPrimaryKeyNoIdentityHistory.@Pk);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @tableWithPrimaryKeyNoIdentityHistory.@TimestampId;
				query.@Pk = @tableWithPrimaryKeyNoIdentityHistory.@Pk;
				query.@Data01 = @tableWithPrimaryKeyNoIdentityHistory.@Data01;
				query.@Data02 = @tableWithPrimaryKeyNoIdentityHistory.@Data02;
				query.@Data03 = @tableWithPrimaryKeyNoIdentityHistory.@Data03;
				query.@Data04 = @tableWithPrimaryKeyNoIdentityHistory.@Data04;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyNoIdentityHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithPrimaryKeyNoIdentityHistory.@TimestampId = query.@TimestampId;
				@tableWithPrimaryKeyNoIdentityHistory.@Pk = query.@Pk;
				@tableWithPrimaryKeyNoIdentityHistory.@Data01 = query.@Data01;
				@tableWithPrimaryKeyNoIdentityHistory.@Data02 = query.@Data02;
				@tableWithPrimaryKeyNoIdentityHistory.@Data03 = query.@Data03;
				@tableWithPrimaryKeyNoIdentityHistory.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyNoIdentityHistory);
				}
				else
				{
					this.OnPostUpdateTableWithPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyNoIdentityHistory);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithPrimaryKeyNoIdentityHistory(TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardTableWithPrimaryKeyNoIdentityHistory(uowc, e), @tableWithPrimaryKeyNoIdentityHistory);
			
			return retval;
		}
		
		public bool DiscardTableWithPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithPrimaryKeyNoIdentityHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithPrimaryKeyNoIdentityHistory == null)
				throw new ArgumentNullException("tableWithPrimaryKeyNoIdentityHistory");
				
			if (@tableWithPrimaryKeyNoIdentityHistory.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyNoIdentityHistory);
				
				query = ctx.Context.@TableWithPrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithPrimaryKeyNoIdentityHistory.@TimestampId && lo.@Pk == @tableWithPrimaryKeyNoIdentityHistory.@Pk);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@TableWithPrimaryKeyNoIdentityHistories.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyNoIdentityHistory);
					
					return false;
				}

				this.OnPostDeleteTableWithPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithPrimaryKeyNoIdentityHistory);
				
				@tableWithPrimaryKeyNoIdentityHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);
		
		partial void OnPostInsertTableWithPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);
		
		partial void OnPreUpdateTableWithPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);
		
		partial void OnPostUpdateTableWithPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);
		
		partial void OnSaveConflictTableWithPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);
		
		partial void OnDiscardConflictTableWithPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);
				
		partial void OnPreDeleteTableWithPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);
		
		partial void OnPostDeleteTableWithPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);
		
		partial void OnSelectTableWithPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithPrimaryKeyNoIdentityHistory @tableWithPrimaryKeyNoIdentityHistory);		

		public TableWithCompositePrimaryKeyNoIdentityHistory LoadTableWithCompositePrimaryKeyNoIdentityHistory(Int64 @timestampId, Int32 @pk0, Int32 @pk1, Int32 @pk2, Int32 @pk3)
		{
			TableWithCompositePrimaryKeyNoIdentityHistory retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1, p2, p3, p4, p5) => this.LoadTableWithCompositePrimaryKeyNoIdentityHistory(uowc, p1, p2, p3, p4, p5), @timestampId, @pk0, @pk1, @pk2, @pk3);
			
			return retval;
		}
		
		public TableWithCompositePrimaryKeyNoIdentityHistory LoadTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, Int64 @timestampId, Int32 @pk0, Int32 @pk1, Int32 @pk2, Int32 @pk3)
		{			
			TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.TableWithCompositePrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@Pk0 == @pk0 && lo.@Pk1 == @pk1 && lo.@Pk2 == @pk2 && lo.@Pk3 == @pk3);

				if ((object)query == null)
					return null; // does not exist
				
				@tableWithCompositePrimaryKeyNoIdentityHistory = new TableWithCompositePrimaryKeyNoIdentityHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@Pk0 = query.@Pk0,
									@Pk1 = query.@Pk1,
									@Pk2 = query.@Pk2,
									@Pk3 = query.@Pk3,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentityHistory);

				return @tableWithCompositePrimaryKeyNoIdentityHistory;
			}
		}
		
		public IList<TableWithCompositePrimaryKeyNoIdentityHistory> FindTableWithCompositePrimaryKeyNoIdentityHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory>> callback)
		{
			IList<TableWithCompositePrimaryKeyNoIdentityHistory> @tableWithCompositePrimaryKeyNoIdentityHistories;
			
			@tableWithCompositePrimaryKeyNoIdentityHistories = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindTableWithCompositePrimaryKeyNoIdentityHistories(uowc, e), callback);
			
			return @tableWithCompositePrimaryKeyNoIdentityHistories;
		}
		
		public IList<TableWithCompositePrimaryKeyNoIdentityHistory> FindTableWithCompositePrimaryKeyNoIdentityHistories(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory>> callback)
		{
			IList<TableWithCompositePrimaryKeyNoIdentityHistory> @tableWithCompositePrimaryKeyNoIdentityHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@TableWithCompositePrimaryKeyNoIdentityHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@tableWithCompositePrimaryKeyNoIdentityHistories = queryable.Select(lo => new TableWithCompositePrimaryKeyNoIdentityHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@Pk0 = lo.@Pk0,
													@Pk1 = lo.@Pk1,
													@Pk2 = lo.@Pk2,
													@Pk3 = lo.@Pk3,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }).ToList(); // force execution against store

				foreach (TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory in @tableWithCompositePrimaryKeyNoIdentityHistories)
					this.OnSelectTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentityHistory);
				
				return @tableWithCompositePrimaryKeyNoIdentityHistories;
			}			
		}
		
		public bool SaveTableWithCompositePrimaryKeyNoIdentityHistory(TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveTableWithCompositePrimaryKeyNoIdentityHistory(uowc, e), @tableWithCompositePrimaryKeyNoIdentityHistory);
			
			return retval;
		}
		
		public bool SaveTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithCompositePrimaryKeyNoIdentityHistory == null)
				throw new ArgumentNullException("tableWithCompositePrimaryKeyNoIdentityHistory");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableWithCompositePrimaryKeyNoIdentityHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentityHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory();

					ctx.Context.TableWithCompositePrimaryKeyNoIdentityHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentityHistory);
					
					query = ctx.Context.TableWithCompositePrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithCompositePrimaryKeyNoIdentityHistory.@TimestampId && lo.@Pk0 == @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk0 && lo.@Pk1 == @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk1 && lo.@Pk2 == @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk2 && lo.@Pk3 == @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk3);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @tableWithCompositePrimaryKeyNoIdentityHistory.@TimestampId;
				query.@Pk0 = @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk0;
				query.@Pk1 = @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk1;
				query.@Pk2 = @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk2;
				query.@Pk3 = @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk3;
				query.@Data01 = @tableWithCompositePrimaryKeyNoIdentityHistory.@Data01;
				query.@Data02 = @tableWithCompositePrimaryKeyNoIdentityHistory.@Data02;
				query.@Data03 = @tableWithCompositePrimaryKeyNoIdentityHistory.@Data03;
				query.@Data04 = @tableWithCompositePrimaryKeyNoIdentityHistory.@Data04;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentityHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableWithCompositePrimaryKeyNoIdentityHistory.@TimestampId = query.@TimestampId;
				@tableWithCompositePrimaryKeyNoIdentityHistory.@Pk0 = query.@Pk0;
				@tableWithCompositePrimaryKeyNoIdentityHistory.@Pk1 = query.@Pk1;
				@tableWithCompositePrimaryKeyNoIdentityHistory.@Pk2 = query.@Pk2;
				@tableWithCompositePrimaryKeyNoIdentityHistory.@Pk3 = query.@Pk3;
				@tableWithCompositePrimaryKeyNoIdentityHistory.@Data01 = query.@Data01;
				@tableWithCompositePrimaryKeyNoIdentityHistory.@Data02 = query.@Data02;
				@tableWithCompositePrimaryKeyNoIdentityHistory.@Data03 = query.@Data03;
				@tableWithCompositePrimaryKeyNoIdentityHistory.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentityHistory);
				}
				else
				{
					this.OnPostUpdateTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentityHistory);
				}

				return true;
			}
		}
		
		public bool DiscardTableWithCompositePrimaryKeyNoIdentityHistory(TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardTableWithCompositePrimaryKeyNoIdentityHistory(uowc, e), @tableWithCompositePrimaryKeyNoIdentityHistory);
			
			return retval;
		}
		
		public bool DiscardTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableWithCompositePrimaryKeyNoIdentityHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableWithCompositePrimaryKeyNoIdentityHistory == null)
				throw new ArgumentNullException("tableWithCompositePrimaryKeyNoIdentityHistory");
				
			if (@tableWithCompositePrimaryKeyNoIdentityHistory.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentityHistory);
				
				query = ctx.Context.@TableWithCompositePrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableWithCompositePrimaryKeyNoIdentityHistory.@TimestampId && lo.@Pk0 == @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk0 && lo.@Pk1 == @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk1 && lo.@Pk2 == @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk2 && lo.@Pk3 == @tableWithCompositePrimaryKeyNoIdentityHistory.@Pk3);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@TableWithCompositePrimaryKeyNoIdentityHistories.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentityHistory);
					
					return false;
				}

				this.OnPostDeleteTableWithCompositePrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableWithCompositePrimaryKeyNoIdentityHistory);
				
				@tableWithCompositePrimaryKeyNoIdentityHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);
		
		partial void OnPostInsertTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);
		
		partial void OnPreUpdateTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);
		
		partial void OnPostUpdateTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);
		
		partial void OnSaveConflictTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);
		
		partial void OnDiscardConflictTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);
				
		partial void OnPreDeleteTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);
		
		partial void OnPostDeleteTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);
		
		partial void OnSelectTableWithCompositePrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableWithCompositePrimaryKeyNoIdentityHistory @tableWithCompositePrimaryKeyNoIdentityHistory);		

		public TableNoPrimaryKeyNoIdentityHistory LoadTableNoPrimaryKeyNoIdentityHistory(Int64 @timestampId, Int32 @value, Boolean @data01, DateTime @data02, Int32 @data03, String @data04)
		{
			TableNoPrimaryKeyNoIdentityHistory retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1, p2, p3, p4, p5, p6) => this.LoadTableNoPrimaryKeyNoIdentityHistory(uowc, p1, p2, p3, p4, p5, p6), @timestampId, @value, @data01, @data02, @data03, @data04);
			
			return retval;
		}
		
		public TableNoPrimaryKeyNoIdentityHistory LoadTableNoPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, Int64 @timestampId, Int32 @value, Boolean @data01, DateTime @data02, Int32 @data03, String @data04)
		{			
			TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.TableNoPrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@Value == @value && lo.@Data01 == @data01 && lo.@Data02 == @data02 && lo.@Data03 == @data03 && lo.@Data04 == @data04);

				if ((object)query == null)
					return null; // does not exist
				
				@tableNoPrimaryKeyNoIdentityHistory = new TableNoPrimaryKeyNoIdentityHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@Value = query.@Value,
									@Data01 = query.@Data01,
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data04 = query.@Data04
								};	

				this.OnSelectTableNoPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyNoIdentityHistory);

				return @tableNoPrimaryKeyNoIdentityHistory;
			}
		}
		
		public IList<TableNoPrimaryKeyNoIdentityHistory> FindTableNoPrimaryKeyNoIdentityHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory>> callback)
		{
			IList<TableNoPrimaryKeyNoIdentityHistory> @tableNoPrimaryKeyNoIdentityHistories;
			
			@tableNoPrimaryKeyNoIdentityHistories = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindTableNoPrimaryKeyNoIdentityHistories(uowc, e), callback);
			
			return @tableNoPrimaryKeyNoIdentityHistories;
		}
		
		public IList<TableNoPrimaryKeyNoIdentityHistory> FindTableNoPrimaryKeyNoIdentityHistories(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory>> callback)
		{
			IList<TableNoPrimaryKeyNoIdentityHistory> @tableNoPrimaryKeyNoIdentityHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@TableNoPrimaryKeyNoIdentityHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@tableNoPrimaryKeyNoIdentityHistories = queryable.Select(lo => new TableNoPrimaryKeyNoIdentityHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@Value = lo.@Value,
													@Data01 = lo.@Data01,
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data04 = lo.@Data04
												 }).ToList(); // force execution against store

				foreach (TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory in @tableNoPrimaryKeyNoIdentityHistories)
					this.OnSelectTableNoPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyNoIdentityHistory);
				
				return @tableNoPrimaryKeyNoIdentityHistories;
			}			
		}
		
		public bool SaveTableNoPrimaryKeyNoIdentityHistory(TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveTableNoPrimaryKeyNoIdentityHistory(uowc, e), @tableNoPrimaryKeyNoIdentityHistory);
			
			return retval;
		}
		
		public bool SaveTableNoPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableNoPrimaryKeyNoIdentityHistory == null)
				throw new ArgumentNullException("tableNoPrimaryKeyNoIdentityHistory");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableNoPrimaryKeyNoIdentityHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableNoPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyNoIdentityHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory();

					ctx.Context.TableNoPrimaryKeyNoIdentityHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableNoPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyNoIdentityHistory);
					
					query = ctx.Context.TableNoPrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableNoPrimaryKeyNoIdentityHistory.@TimestampId && lo.@Value == @tableNoPrimaryKeyNoIdentityHistory.@Value && lo.@Data01 == @tableNoPrimaryKeyNoIdentityHistory.@Data01 && lo.@Data02 == @tableNoPrimaryKeyNoIdentityHistory.@Data02 && lo.@Data03 == @tableNoPrimaryKeyNoIdentityHistory.@Data03 && lo.@Data04 == @tableNoPrimaryKeyNoIdentityHistory.@Data04);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @tableNoPrimaryKeyNoIdentityHistory.@TimestampId;
				query.@Value = @tableNoPrimaryKeyNoIdentityHistory.@Value;
				query.@Data01 = @tableNoPrimaryKeyNoIdentityHistory.@Data01;
				query.@Data02 = @tableNoPrimaryKeyNoIdentityHistory.@Data02;
				query.@Data03 = @tableNoPrimaryKeyNoIdentityHistory.@Data03;
				query.@Data04 = @tableNoPrimaryKeyNoIdentityHistory.@Data04;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableNoPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyNoIdentityHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableNoPrimaryKeyNoIdentityHistory.@TimestampId = query.@TimestampId;
				@tableNoPrimaryKeyNoIdentityHistory.@Value = query.@Value;
				@tableNoPrimaryKeyNoIdentityHistory.@Data01 = query.@Data01;
				@tableNoPrimaryKeyNoIdentityHistory.@Data02 = query.@Data02;
				@tableNoPrimaryKeyNoIdentityHistory.@Data03 = query.@Data03;
				@tableNoPrimaryKeyNoIdentityHistory.@Data04 = query.@Data04;
						
				if (wasNew)
				{
					this.OnPostInsertTableNoPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyNoIdentityHistory);
				}
				else
				{
					this.OnPostUpdateTableNoPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyNoIdentityHistory);
				}

				return true;
			}
		}
		
		public bool DiscardTableNoPrimaryKeyNoIdentityHistory(TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardTableNoPrimaryKeyNoIdentityHistory(uowc, e), @tableNoPrimaryKeyNoIdentityHistory);
			
			return retval;
		}
		
		public bool DiscardTableNoPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableNoPrimaryKeyNoIdentityHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableNoPrimaryKeyNoIdentityHistory == null)
				throw new ArgumentNullException("tableNoPrimaryKeyNoIdentityHistory");
				
			if (@tableNoPrimaryKeyNoIdentityHistory.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableNoPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyNoIdentityHistory);
				
				query = ctx.Context.@TableNoPrimaryKeyNoIdentityHistories.SingleOrDefault(lo => lo.@TimestampId == @tableNoPrimaryKeyNoIdentityHistory.@TimestampId && lo.@Value == @tableNoPrimaryKeyNoIdentityHistory.@Value && lo.@Data01 == @tableNoPrimaryKeyNoIdentityHistory.@Data01 && lo.@Data02 == @tableNoPrimaryKeyNoIdentityHistory.@Data02 && lo.@Data03 == @tableNoPrimaryKeyNoIdentityHistory.@Data03 && lo.@Data04 == @tableNoPrimaryKeyNoIdentityHistory.@Data04);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@TableNoPrimaryKeyNoIdentityHistories.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableNoPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyNoIdentityHistory);
					
					return false;
				}

				this.OnPostDeleteTableNoPrimaryKeyNoIdentityHistory(unitOfWorkContext, @tableNoPrimaryKeyNoIdentityHistory);
				
				@tableNoPrimaryKeyNoIdentityHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableNoPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);
		
		partial void OnPostInsertTableNoPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);
		
		partial void OnPreUpdateTableNoPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);
		
		partial void OnPostUpdateTableNoPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);
		
		partial void OnSaveConflictTableNoPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);
		
		partial void OnDiscardConflictTableNoPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);
				
		partial void OnPreDeleteTableNoPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);
		
		partial void OnPostDeleteTableNoPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);
		
		partial void OnSelectTableNoPrimaryKeyNoIdentityHistory(IUnitOfWorkContext unitOfWorkContext, TableNoPrimaryKeyNoIdentityHistory @tableNoPrimaryKeyNoIdentityHistory);		

		public TableTypeTestHistory LoadTableTypeTestHistory(Int64 @timestampId, Int32 @pkId)
		{
			TableTypeTestHistory retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1, p2) => this.LoadTableTypeTestHistory(uowc, p1, p2), @timestampId, @pkId);
			
			return retval;
		}
		
		public TableTypeTestHistory LoadTableTypeTestHistory(IUnitOfWorkContext unitOfWorkContext, Int64 @timestampId, Int32 @pkId)
		{			
			TableTypeTestHistory @tableTypeTestHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.TableTypeTestHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@PkId == @pkId);

				if ((object)query == null)
					return null; // does not exist
				
				@tableTypeTestHistory = new TableTypeTestHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@PkId = query.@PkId,
									@Data00 = query.@Data00,
									@Data01 = query.@Data01.ToArray(),
									@Data02 = query.@Data02,
									@Data03 = query.@Data03,
									@Data05 = query.@Data05,
									@Data06 = query.@Data06,
									@Data07 = query.@Data07,
									@Data08 = query.@Data08,
									@Data09 = query.@Data09,
									@Data10 = query.@Data10,
									@Data12 = (object)query.Data12 != null ? query.@Data12.ToArray() : null,
									@Data13 = query.@Data13,
									@Data14 = query.@Data14,
									@Data15 = query.@Data15,
									@Data16 = query.@Data16,
									@Data17 = query.@Data17,
									@Data18 = query.@Data18,
									@Data19 = query.@Data19,
									@Data20 = query.@Data20,
									@Data21 = query.@Data21,
									@Data22 = query.@Data22,
									@Data26 = query.@Data26,
									@Data27 = query.@Data27,
									@Data29 = query.@Data29,
									@Data30 = query.@Data30,
									@Data31 = query.@Data31.ToArray(),
									@Data32 = query.@Data32
								};	

				this.OnSelectTableTypeTestHistory(unitOfWorkContext, @tableTypeTestHistory);

				return @tableTypeTestHistory;
			}
		}
		
		public IList<TableTypeTestHistory> FindTableTypeTestHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory>> callback)
		{
			IList<TableTypeTestHistory> @tableTypeTestHistories;
			
			@tableTypeTestHistories = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindTableTypeTestHistories(uowc, e), callback);
			
			return @tableTypeTestHistories;
		}
		
		public IList<TableTypeTestHistory> FindTableTypeTestHistories(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory>> callback)
		{
			IList<TableTypeTestHistory> @tableTypeTestHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@TableTypeTestHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@tableTypeTestHistories = queryable.Select(lo => new TableTypeTestHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@PkId = lo.@PkId,
													@Data00 = lo.@Data00,
													@Data01 = lo.@Data01.ToArray(),
													@Data02 = lo.@Data02,
													@Data03 = lo.@Data03,
													@Data05 = lo.@Data05,
													@Data06 = lo.@Data06,
													@Data07 = lo.@Data07,
													@Data08 = lo.@Data08,
													@Data09 = lo.@Data09,
													@Data10 = lo.@Data10,
													@Data12 = (object)lo.@Data12 != null ? lo.@Data12.ToArray() : null,
													@Data13 = lo.@Data13,
													@Data14 = lo.@Data14,
													@Data15 = lo.@Data15,
													@Data16 = lo.@Data16,
													@Data17 = lo.@Data17,
													@Data18 = lo.@Data18,
													@Data19 = lo.@Data19,
													@Data20 = lo.@Data20,
													@Data21 = lo.@Data21,
													@Data22 = lo.@Data22,
													@Data26 = lo.@Data26,
													@Data27 = lo.@Data27,
													@Data29 = lo.@Data29,
													@Data30 = lo.@Data30,
													@Data31 = lo.@Data31.ToArray(),
													@Data32 = lo.@Data32
												 }).ToList(); // force execution against store

				foreach (TableTypeTestHistory @tableTypeTestHistory in @tableTypeTestHistories)
					this.OnSelectTableTypeTestHistory(unitOfWorkContext, @tableTypeTestHistory);
				
				return @tableTypeTestHistories;
			}			
		}
		
		public bool SaveTableTypeTestHistory(TableTypeTestHistory @tableTypeTestHistory)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveTableTypeTestHistory(uowc, e), @tableTypeTestHistory);
			
			return retval;
		}
		
		public bool SaveTableTypeTestHistory(IUnitOfWorkContext unitOfWorkContext, TableTypeTestHistory @tableTypeTestHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableTypeTestHistory == null)
				throw new ArgumentNullException("tableTypeTestHistory");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @tableTypeTestHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertTableTypeTestHistory(unitOfWorkContext, @tableTypeTestHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory();

					ctx.Context.TableTypeTestHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateTableTypeTestHistory(unitOfWorkContext, @tableTypeTestHistory);
					
					query = ctx.Context.TableTypeTestHistories.SingleOrDefault(lo => lo.@TimestampId == @tableTypeTestHistory.@TimestampId && lo.@PkId == @tableTypeTestHistory.@PkId);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @tableTypeTestHistory.@TimestampId;
				query.@PkId = @tableTypeTestHistory.@PkId;
				query.@Data00 = @tableTypeTestHistory.@Data00;
				query.@Data01 = @tableTypeTestHistory.@Data01;
				query.@Data02 = @tableTypeTestHistory.@Data02;
				query.@Data03 = @tableTypeTestHistory.@Data03;
				query.@Data05 = @tableTypeTestHistory.@Data05;
				query.@Data06 = @tableTypeTestHistory.@Data06;
				query.@Data07 = @tableTypeTestHistory.@Data07;
				query.@Data08 = @tableTypeTestHistory.@Data08;
				query.@Data09 = @tableTypeTestHistory.@Data09;
				query.@Data10 = @tableTypeTestHistory.@Data10;
				if ((object)@tableTypeTestHistory.@Data12 != null) // prevent implicit conversion of null -> exception
					query.@Data12 = @tableTypeTestHistory.@Data12;
				query.@Data13 = @tableTypeTestHistory.@Data13;
				query.@Data14 = @tableTypeTestHistory.@Data14;
				query.@Data15 = @tableTypeTestHistory.@Data15;
				query.@Data16 = @tableTypeTestHistory.@Data16;
				query.@Data17 = @tableTypeTestHistory.@Data17;
				query.@Data18 = @tableTypeTestHistory.@Data18;
				query.@Data19 = @tableTypeTestHistory.@Data19;
				query.@Data20 = @tableTypeTestHistory.@Data20;
				query.@Data21 = @tableTypeTestHistory.@Data21;
				query.@Data22 = @tableTypeTestHistory.@Data22;
				query.@Data26 = @tableTypeTestHistory.@Data26;
				query.@Data27 = @tableTypeTestHistory.@Data27;
				query.@Data29 = @tableTypeTestHistory.@Data29;
				query.@Data30 = @tableTypeTestHistory.@Data30;
				query.@Data31 = @tableTypeTestHistory.@Data31;
				query.@Data32 = @tableTypeTestHistory.@Data32;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictTableTypeTestHistory(unitOfWorkContext, @tableTypeTestHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@tableTypeTestHistory.@TimestampId = query.@TimestampId;
				@tableTypeTestHistory.@PkId = query.@PkId;
				@tableTypeTestHistory.@Data00 = query.@Data00;
				@tableTypeTestHistory.@Data01 = query.@Data01.ToArray();
				@tableTypeTestHistory.@Data02 = query.@Data02;
				@tableTypeTestHistory.@Data03 = query.@Data03;
				@tableTypeTestHistory.@Data05 = query.@Data05;
				@tableTypeTestHistory.@Data06 = query.@Data06;
				@tableTypeTestHistory.@Data07 = query.@Data07;
				@tableTypeTestHistory.@Data08 = query.@Data08;
				@tableTypeTestHistory.@Data09 = query.@Data09;
				@tableTypeTestHistory.@Data10 = query.@Data10;
				@tableTypeTestHistory.@Data12 = (object)query.@Data12 != null ? query.@Data12.ToArray() : null;
				@tableTypeTestHistory.@Data13 = query.@Data13;
				@tableTypeTestHistory.@Data14 = query.@Data14;
				@tableTypeTestHistory.@Data15 = query.@Data15;
				@tableTypeTestHistory.@Data16 = query.@Data16;
				@tableTypeTestHistory.@Data17 = query.@Data17;
				@tableTypeTestHistory.@Data18 = query.@Data18;
				@tableTypeTestHistory.@Data19 = query.@Data19;
				@tableTypeTestHistory.@Data20 = query.@Data20;
				@tableTypeTestHistory.@Data21 = query.@Data21;
				@tableTypeTestHistory.@Data22 = query.@Data22;
				@tableTypeTestHistory.@Data26 = query.@Data26;
				@tableTypeTestHistory.@Data27 = query.@Data27;
				@tableTypeTestHistory.@Data29 = query.@Data29;
				@tableTypeTestHistory.@Data30 = query.@Data30;
				@tableTypeTestHistory.@Data31 = query.@Data31.ToArray();
				@tableTypeTestHistory.@Data32 = query.@Data32;
						
				if (wasNew)
				{
					this.OnPostInsertTableTypeTestHistory(unitOfWorkContext, @tableTypeTestHistory);
				}
				else
				{
					this.OnPostUpdateTableTypeTestHistory(unitOfWorkContext, @tableTypeTestHistory);
				}

				return true;
			}
		}
		
		public bool DiscardTableTypeTestHistory(TableTypeTestHistory @tableTypeTestHistory)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardTableTypeTestHistory(uowc, e), @tableTypeTestHistory);
			
			return retval;
		}
		
		public bool DiscardTableTypeTestHistory(IUnitOfWorkContext unitOfWorkContext, TableTypeTestHistory @tableTypeTestHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TableTypeTestHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@tableTypeTestHistory == null)
				throw new ArgumentNullException("tableTypeTestHistory");
				
			if (@tableTypeTestHistory.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteTableTypeTestHistory(unitOfWorkContext, @tableTypeTestHistory);
				
				query = ctx.Context.@TableTypeTestHistories.SingleOrDefault(lo => lo.@TimestampId == @tableTypeTestHistory.@TimestampId && lo.@PkId == @tableTypeTestHistory.@PkId);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@TableTypeTestHistories.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictTableTypeTestHistory(unitOfWorkContext, @tableTypeTestHistory);
					
					return false;
				}

				this.OnPostDeleteTableTypeTestHistory(unitOfWorkContext, @tableTypeTestHistory);
				
				@tableTypeTestHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertTableTypeTestHistory(IUnitOfWorkContext unitOfWorkContext, TableTypeTestHistory @tableTypeTestHistory);
		
		partial void OnPostInsertTableTypeTestHistory(IUnitOfWorkContext unitOfWorkContext, TableTypeTestHistory @tableTypeTestHistory);
		
		partial void OnPreUpdateTableTypeTestHistory(IUnitOfWorkContext unitOfWorkContext, TableTypeTestHistory @tableTypeTestHistory);
		
		partial void OnPostUpdateTableTypeTestHistory(IUnitOfWorkContext unitOfWorkContext, TableTypeTestHistory @tableTypeTestHistory);
		
		partial void OnSaveConflictTableTypeTestHistory(IUnitOfWorkContext unitOfWorkContext, TableTypeTestHistory @tableTypeTestHistory);
		
		partial void OnDiscardConflictTableTypeTestHistory(IUnitOfWorkContext unitOfWorkContext, TableTypeTestHistory @tableTypeTestHistory);
				
		partial void OnPreDeleteTableTypeTestHistory(IUnitOfWorkContext unitOfWorkContext, TableTypeTestHistory @tableTypeTestHistory);
		
		partial void OnPostDeleteTableTypeTestHistory(IUnitOfWorkContext unitOfWorkContext, TableTypeTestHistory @tableTypeTestHistory);
		
		partial void OnSelectTableTypeTestHistory(IUnitOfWorkContext unitOfWorkContext, TableTypeTestHistory @tableTypeTestHistory);		

		public SexualChocolateHistory LoadSexualChocolateHistory(Int64 @timestampId, Int32 @sexualChocolateId)
		{
			SexualChocolateHistory retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1, p2) => this.LoadSexualChocolateHistory(uowc, p1, p2), @timestampId, @sexualChocolateId);
			
			return retval;
		}
		
		public SexualChocolateHistory LoadSexualChocolateHistory(IUnitOfWorkContext unitOfWorkContext, Int64 @timestampId, Int32 @sexualChocolateId)
		{			
			SexualChocolateHistory @sexualChocolateHistory;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.SexualChocolateHistories.SingleOrDefault(lo => lo.@TimestampId == @timestampId && lo.@SexualChocolateId == @sexualChocolateId);

				if ((object)query == null)
					return null; // does not exist
				
				@sexualChocolateHistory = new SexualChocolateHistory()
								{
									// map result to POCO from L2S object
									@TimestampId = query.@TimestampId,
									@SexualChocolateId = query.@SexualChocolateId,
									@Em = query.@Em,
									@Blob = query.@Blob.ToArray(),
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectSexualChocolateHistory(unitOfWorkContext, @sexualChocolateHistory);

				return @sexualChocolateHistory;
			}
		}
		
		public IList<SexualChocolateHistory> FindSexualChocolateHistories(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory>> callback)
		{
			IList<SexualChocolateHistory> @sexualChocolateHistories;
			
			@sexualChocolateHistories = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindSexualChocolateHistories(uowc, e), callback);
			
			return @sexualChocolateHistories;
		}
		
		public IList<SexualChocolateHistory> FindSexualChocolateHistories(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory>> callback)
		{
			IList<SexualChocolateHistory> @sexualChocolateHistories;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@SexualChocolateHistories);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@sexualChocolateHistories = queryable.Select(lo => new SexualChocolateHistory()
												 {
													// map results to POCOs from L2S objects
													@TimestampId = lo.@TimestampId,
													@SexualChocolateId = lo.@SexualChocolateId,
													@Em = lo.@Em,
													@Blob = lo.@Blob.ToArray(),
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@LogicalDelete = lo.@LogicalDelete
												 }).ToList(); // force execution against store

				foreach (SexualChocolateHistory @sexualChocolateHistory in @sexualChocolateHistories)
					this.OnSelectSexualChocolateHistory(unitOfWorkContext, @sexualChocolateHistory);
				
				return @sexualChocolateHistories;
			}			
		}
		
		public bool SaveSexualChocolateHistory(SexualChocolateHistory @sexualChocolateHistory)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveSexualChocolateHistory(uowc, e), @sexualChocolateHistory);
			
			return retval;
		}
		
		public bool SaveSexualChocolateHistory(IUnitOfWorkContext unitOfWorkContext, SexualChocolateHistory @sexualChocolateHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@sexualChocolateHistory == null)
				throw new ArgumentNullException("sexualChocolateHistory");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @sexualChocolateHistory.IsNew;

				if (wasNew)
				{
					this.OnPreInsertSexualChocolateHistory(unitOfWorkContext, @sexualChocolateHistory);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory();

					ctx.Context.SexualChocolateHistories.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateSexualChocolateHistory(unitOfWorkContext, @sexualChocolateHistory);
					
					query = ctx.Context.SexualChocolateHistories.SingleOrDefault(lo => lo.@TimestampId == @sexualChocolateHistory.@TimestampId && lo.@SexualChocolateId == @sexualChocolateHistory.@SexualChocolateId);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@TimestampId = @sexualChocolateHistory.@TimestampId;
				query.@SexualChocolateId = @sexualChocolateHistory.@SexualChocolateId;
				query.@Em = @sexualChocolateHistory.@Em;
				query.@Blob = @sexualChocolateHistory.@Blob;
				query.@CreationTimestamp = @sexualChocolateHistory.@CreationTimestamp;
				query.@ModificationTimestamp = @sexualChocolateHistory.@ModificationTimestamp;
				query.@LogicalDelete = @sexualChocolateHistory.@LogicalDelete;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictSexualChocolateHistory(unitOfWorkContext, @sexualChocolateHistory);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@sexualChocolateHistory.@TimestampId = query.@TimestampId;
				@sexualChocolateHistory.@SexualChocolateId = query.@SexualChocolateId;
				@sexualChocolateHistory.@Em = query.@Em;
				@sexualChocolateHistory.@Blob = query.@Blob.ToArray();
				@sexualChocolateHistory.@CreationTimestamp = query.@CreationTimestamp;
				@sexualChocolateHistory.@ModificationTimestamp = query.@ModificationTimestamp;
				@sexualChocolateHistory.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertSexualChocolateHistory(unitOfWorkContext, @sexualChocolateHistory);
				}
				else
				{
					this.OnPostUpdateSexualChocolateHistory(unitOfWorkContext, @sexualChocolateHistory);
				}

				return true;
			}
		}
		
		public bool DiscardSexualChocolateHistory(SexualChocolateHistory @sexualChocolateHistory)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardSexualChocolateHistory(uowc, e), @sexualChocolateHistory);
			
			return retval;
		}
		
		public bool DiscardSexualChocolateHistory(IUnitOfWorkContext unitOfWorkContext, SexualChocolateHistory @sexualChocolateHistory)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolateHistory query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@sexualChocolateHistory == null)
				throw new ArgumentNullException("sexualChocolateHistory");
				
			if (@sexualChocolateHistory.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteSexualChocolateHistory(unitOfWorkContext, @sexualChocolateHistory);
				
				query = ctx.Context.@SexualChocolateHistories.SingleOrDefault(lo => lo.@TimestampId == @sexualChocolateHistory.@TimestampId && lo.@SexualChocolateId == @sexualChocolateHistory.@SexualChocolateId);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@SexualChocolateHistories.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictSexualChocolateHistory(unitOfWorkContext, @sexualChocolateHistory);
					
					return false;
				}

				this.OnPostDeleteSexualChocolateHistory(unitOfWorkContext, @sexualChocolateHistory);
				
				@sexualChocolateHistory.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertSexualChocolateHistory(IUnitOfWorkContext unitOfWorkContext, SexualChocolateHistory @sexualChocolateHistory);
		
		partial void OnPostInsertSexualChocolateHistory(IUnitOfWorkContext unitOfWorkContext, SexualChocolateHistory @sexualChocolateHistory);
		
		partial void OnPreUpdateSexualChocolateHistory(IUnitOfWorkContext unitOfWorkContext, SexualChocolateHistory @sexualChocolateHistory);
		
		partial void OnPostUpdateSexualChocolateHistory(IUnitOfWorkContext unitOfWorkContext, SexualChocolateHistory @sexualChocolateHistory);
		
		partial void OnSaveConflictSexualChocolateHistory(IUnitOfWorkContext unitOfWorkContext, SexualChocolateHistory @sexualChocolateHistory);
		
		partial void OnDiscardConflictSexualChocolateHistory(IUnitOfWorkContext unitOfWorkContext, SexualChocolateHistory @sexualChocolateHistory);
				
		partial void OnPreDeleteSexualChocolateHistory(IUnitOfWorkContext unitOfWorkContext, SexualChocolateHistory @sexualChocolateHistory);
		
		partial void OnPostDeleteSexualChocolateHistory(IUnitOfWorkContext unitOfWorkContext, SexualChocolateHistory @sexualChocolateHistory);
		
		partial void OnSelectSexualChocolateHistory(IUnitOfWorkContext unitOfWorkContext, SexualChocolateHistory @sexualChocolateHistory);		
		public SexualChocolate LoadSexualChocolate(Int32 @sexualChocolateId)
		{
			SexualChocolate retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, p1) => this.LoadSexualChocolate(uowc, p1), @sexualChocolateId);
			
			return retval;
		}
		
		public SexualChocolate LoadSexualChocolate(IUnitOfWorkContext unitOfWorkContext, Int32 @sexualChocolateId)
		{			
			SexualChocolate @sexualChocolate;
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{					
				query = ctx.Context.SexualChocolates.SingleOrDefault(lo => lo.@SexualChocolateId == @sexualChocolateId);

				if ((object)query == null)
					return null; // does not exist
				
				@sexualChocolate = new SexualChocolate()
								{
									// map result to POCO from L2S object
									@SexualChocolateId = query.@SexualChocolateId,
									@Em = query.@Em,
									@Blob = query.@Blob.ToArray(),
									@CreationTimestamp = query.@CreationTimestamp,
									@ModificationTimestamp = query.@ModificationTimestamp,
									@LogicalDelete = query.@LogicalDelete
								};	

				this.OnSelectSexualChocolate(unitOfWorkContext, @sexualChocolate);

				return @sexualChocolate;
			}
		}
		
		public IList<SexualChocolate> FindSexualChocolates(Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate>> callback)
		{
			IList<SexualChocolate> @sexualChocolates;
			
			@sexualChocolates = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.FindSexualChocolates(uowc, e), callback);
			
			return @sexualChocolates;
		}
		
		public IList<SexualChocolate> FindSexualChocolates(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate>, IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate>> callback)
		{
			IList<SexualChocolate> @sexualChocolates;			
			IQueryable<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				queryable = callback(ctx.Context.@SexualChocolates);
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@sexualChocolates = queryable.Select(lo => new SexualChocolate()
												 {
													// map results to POCOs from L2S objects
													@SexualChocolateId = lo.@SexualChocolateId,
													@Em = lo.@Em,
													@Blob = lo.@Blob.ToArray(),
													@CreationTimestamp = lo.@CreationTimestamp,
													@ModificationTimestamp = lo.@ModificationTimestamp,
													@LogicalDelete = lo.@LogicalDelete
												 }).ToList(); // force execution against store

				foreach (SexualChocolate @sexualChocolate in @sexualChocolates)
					this.OnSelectSexualChocolate(unitOfWorkContext, @sexualChocolate);
				
				return @sexualChocolates;
			}			
		}
		
		public bool SaveSexualChocolate(SexualChocolate @sexualChocolate)
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.SaveSexualChocolate(uowc, e), @sexualChocolate);
			
			return retval;
		}
		
		public bool SaveSexualChocolate(IUnitOfWorkContext unitOfWorkContext, SexualChocolate @sexualChocolate)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@sexualChocolate == null)
				throw new ArgumentNullException("sexualChocolate");
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{
				wasNew = @sexualChocolate.IsNew;

				if (wasNew)
				{
					this.OnPreInsertSexualChocolate(unitOfWorkContext, @sexualChocolate);
					
					query = new TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate();

					ctx.Context.SexualChocolates.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdateSexualChocolate(unitOfWorkContext, @sexualChocolate);
					
					query = ctx.Context.SexualChocolates.SingleOrDefault(lo => lo.@SexualChocolateId == @sexualChocolate.@SexualChocolateId);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
				query.@SexualChocolateId = @sexualChocolate.@SexualChocolateId;
				query.@Em = @sexualChocolate.@Em;
				query.@Blob = @sexualChocolate.@Blob;
				query.@CreationTimestamp = @sexualChocolate.@CreationTimestamp;
				query.@ModificationTimestamp = @sexualChocolate.@ModificationTimestamp;
				query.@LogicalDelete = @sexualChocolate.@LogicalDelete;		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflictSexualChocolate(unitOfWorkContext, @sexualChocolate);
					
					return false;
				}

				// map server changes back to POCO from L2S object
				@sexualChocolate.@SexualChocolateId = query.@SexualChocolateId;
				@sexualChocolate.@Em = query.@Em;
				@sexualChocolate.@Blob = query.@Blob.ToArray();
				@sexualChocolate.@CreationTimestamp = query.@CreationTimestamp;
				@sexualChocolate.@ModificationTimestamp = query.@ModificationTimestamp;
				@sexualChocolate.@LogicalDelete = query.@LogicalDelete;
						
				if (wasNew)
				{
					this.OnPostInsertSexualChocolate(unitOfWorkContext, @sexualChocolate);
				}
				else
				{
					this.OnPostUpdateSexualChocolate(unitOfWorkContext, @sexualChocolate);
				}

				return true;
			}
		}
		
		public bool DiscardSexualChocolate(SexualChocolate @sexualChocolate)
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.DiscardSexualChocolate(uowc, e), @sexualChocolate);
			
			return retval;
		}
		
		public bool DiscardSexualChocolate(IUnitOfWorkContext unitOfWorkContext, SexualChocolate @sexualChocolate)
		{
			TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.SexualChocolate query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@sexualChocolate == null)
				throw new ArgumentNullException("sexualChocolate");
				
			if (@sexualChocolate.IsNew)
				return true;
				
			using (ContextWrapper<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext> ctx = unitOfWorkContext.GetContext<TextMetal.HostImpl.AspNetSample.Objects.Model.L2S.TxtMtlPrimaryDataContext>())
			{				
				this.OnPreDeleteSexualChocolate(unitOfWorkContext, @sexualChocolate);
				
				query = ctx.Context.@SexualChocolates.SingleOrDefault(lo => lo.@SexualChocolateId == @sexualChocolate.@SexualChocolateId);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@SexualChocolates.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflictSexualChocolate(unitOfWorkContext, @sexualChocolate);
					
					return false;
				}

				this.OnPostDeleteSexualChocolate(unitOfWorkContext, @sexualChocolate);
				
				@sexualChocolate.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsertSexualChocolate(IUnitOfWorkContext unitOfWorkContext, SexualChocolate @sexualChocolate);
		
		partial void OnPostInsertSexualChocolate(IUnitOfWorkContext unitOfWorkContext, SexualChocolate @sexualChocolate);
		
		partial void OnPreUpdateSexualChocolate(IUnitOfWorkContext unitOfWorkContext, SexualChocolate @sexualChocolate);
		
		partial void OnPostUpdateSexualChocolate(IUnitOfWorkContext unitOfWorkContext, SexualChocolate @sexualChocolate);
		
		partial void OnSaveConflictSexualChocolate(IUnitOfWorkContext unitOfWorkContext, SexualChocolate @sexualChocolate);
		
		partial void OnDiscardConflictSexualChocolate(IUnitOfWorkContext unitOfWorkContext, SexualChocolate @sexualChocolate);
				
		partial void OnPreDeleteSexualChocolate(IUnitOfWorkContext unitOfWorkContext, SexualChocolate @sexualChocolate);
		
		partial void OnPostDeleteSexualChocolate(IUnitOfWorkContext unitOfWorkContext, SexualChocolate @sexualChocolate);
		
		partial void OnSelectSexualChocolate(IUnitOfWorkContext unitOfWorkContext, SexualChocolate @sexualChocolate);		

		#endregion
	}
}
