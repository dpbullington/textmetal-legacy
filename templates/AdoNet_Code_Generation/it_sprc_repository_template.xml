<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v6.0.0">

	<OutputScope name="${ModuleName}.IntegrationTests\RepositoryTests.sp.g.cs">
		<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Xml;

using NUnit.Framework;

using TextMetal.Common.Data;
using TextMetal.TestFramework;
]]>
		<If>
			<If.Condition>
				<UnaryExpression operator="IsDef">
					<UnaryExpression.TheExpression>
						<Aspect name="ClrUsingNamespaces" />
					</UnaryExpression.TheExpression>
				</UnaryExpression>
			</If.Condition>
			<If.True>
				<ForEach in="ClrUsingNamespaces" var-ct="_LoopCount" var-ix="_LoopIndex" var-item="_LoopItem">
					<ForEach.Body>
						<![CDATA[using ${_LoopItem};
]]>
					</ForEach.Body>
				</ForEach>
			</If.True>
		</If>
		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasProcedures" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Procedures;
]]>
			</If.True>
		</If>
		<![CDATA[
namespace ${ClrNamespace}.IntegrationTests
{
	[TestFixture]
	public partial class RepositoryTests
	{
		#region Methods/Operators

]]>

		<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
			<ForEach.Filter></ForEach.Filter>
			<ForEach.Body>

				<ForEach in="Procedures" var-ct="_LoopCount" var-ix="_LoopIndex">
					<ForEach.Filter></ForEach.Filter>
					<ForEach.Body>
						<![CDATA[		[Test]
		public void ShouldExecute${ProcedureNamePascalCase}Test()
		{
			Repository repository;
			I${ProcedureNameSingularPascalCase}_Request @${ProcedureNameSingularCamelCase}_Request;
			I${ProcedureNameSingularPascalCase}_Response @${ProcedureNameSingularCamelCase}_Response;

			Assert.IsNull(UnitOfWork.Current);

			repository = new Repository();

			@${ProcedureNameSingularCamelCase}_Request = repository.CreateRequestModel<I${ProcedureNameSingularPascalCase}_Request>();
]]>
	<ForEach in="Parameters" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Eq">
				<BinaryExpression.LeftExpression>
					<Facet name="ParameterIsReadOnly" />
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<Value type="System.Boolean" data="False" />
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			<![CDATA[			@${ProcedureNameSingularCamelCase}_Request.@${ParameterNamePascalCase} = ValueGenerator.GetNextValue<${ParameterCSharpClrType}>();]]>
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="_LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="_LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[
]]>
				</If.True>
			</If>
		</ForEach.Body>
	</ForEach>
	<![CDATA[

			using (AmbientUnitOfWorkScope scope = new AmbientUnitOfWorkScope(repository))
			{
				Assert.IsNotNull(UnitOfWork.Current);

				@${ProcedureNameSingularCamelCase}_Response = repository.Execute<I${ProcedureNameSingularPascalCase}_Request, I${ProcedureNameSingularPascalCase}_Result, I${ProcedureNameSingularPascalCase}_Response>(@${ProcedureNameSingularCamelCase}_Request);

				Assert.IsNotNull(@${ProcedureNameSingularCamelCase}_Response);
				Assert.IsNotNull(@${ProcedureNameSingularCamelCase}_Response.Results);

				scope.ScopeComplete();
			}

			Assert.IsNull(UnitOfWork.Current);
		}
]]>
						<If>
							<If.Condition>
								<BinaryExpression operator="Ne">
									<BinaryExpression.LeftExpression>
										<Facet name="_LoopCount" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Facet name="_LoopIndex" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[
]]>
							</If.True>
						</If>
					</ForEach.Body>
				</ForEach>

			</ForEach.Body>
		</ForEach>

		<![CDATA[
		#endregion
	}
}
]]>
	</OutputScope>

</Template>
