<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v6.0.0">
	<Alloc token="FolderName" />

	<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter></ForEach.Filter>
		<ForEach.Body>

			<ForEach in="Tables" var-ct="_LoopCount" var-ix="_LoopIndex">
				<ForEach.Filter></ForEach.Filter>
				<ForEach.Body>

					<If>
						<If.Condition>
							<UnaryExpression operator="Not">
								<UnaryExpression.TheExpression>
									<Facet name="IsView" />
								</UnaryExpression.TheExpression>
							</UnaryExpression>
						</If.Condition>
						<If.True>
							<Assign token="FolderName">
								<Assign.Expression>
									<Value data="Tables" />
								</Assign.Expression>
							</Assign>
						</If.True>
					</If>

					<If>
						<If.Condition>
							<Facet name="IsView" />
						</If.Condition>
						<If.True>
							<Assign token="FolderName">
								<Assign.Expression>
									<Value data="Views" />
								</Assign.Expression>
							</Assign>
						</If.True>
					</If>

					<OutputScope name="${ClrNamespace}\${FolderName}\.partial\${TableNameSingularPascalCase}.cs">
						<Include name="include_gen_cprt_message_no_warn.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
using System.Linq;

using TextMetal.Common.Core;
]]>
						<If>
							<If.Condition>
								<UnaryExpression operator="IsDef">
									<UnaryExpression.TheExpression>
										<Aspect name="ClrUsingNamespaces" />
									</UnaryExpression.TheExpression>
								</UnaryExpression>
							</If.Condition>
							<If.True>
								<ForEach in="ClrUsingNamespaces" var-ct="_LoopCount" var-ix="_LoopIndex" var-item="_LoopItem">
									<ForEach.Body>
										<![CDATA[using ${_LoopItem};
]]>
									</ForEach.Body>
								</ForEach>
							</If.True>
						</If>
						<![CDATA[
namespace ${ClrNamespace}.${FolderName}
{
	public partial class ${TableNameSingularPascalCase}
	{
		#region Methods/Operators

		public static bool Exists(${TableNameSingularPascalCase} ${TableNameSingularCamelCase})
		{
			IEnumerable<${TableNameSingularPascalCase}> ${TableNamePluralCamelCase};

			if ((object)${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("${TableNameSingularCamelCase}");

			${TableNamePluralCamelCase} =
				Stuff.Get<IRepository>("").Find${TableNamePluralPascalCase}(/* TODO */);

			return ${TableNamePluralCamelCase}.Count() > 0;
		}

		partial void OnMark()
		{
			DateTime now;

			now = DateTime.UtcNow;

			this.CreationTimestamp = this.CreationTimestamp ?? now;
			this.ModificationTimestamp = !this.IsNew ? now : this.CreationTimestamp;
			this.CreationUserId = ((this.IsNew ? Current.UserId : this.CreationUserId) ?? this.CreationUserId) ?? User.SYSTEM_USER_ID;
			this.ModificationUserId = ((!this.IsNew ? Current.UserId : this.CreationUserId) ?? this.ModificationUserId) ?? User.SYSTEM_USER_ID;
			this.LogicalDelete = this.LogicalDelete ?? false;

			this.OrganizationId = this.OrganizationId ?? (int)Current.OrganizationId;
		}

		partial void OnValidate(ref IEnumerable<Message> messages)
		{
			bool exists;
			List<Message> _messages;

			_messages = new List<Message>();

			if (DataType.Instance.IsNullOrWhiteSpace(this.XXX))
				_messages.Add(new Message("", "XXX is required.", Severity.Error));

			if (_messages.Count == 0)
			{
				exists = Exists(this);

				if (exists)
					_messages.Add(new Message("", "${TableNameSingularPascalCase} must be unique.", Severity.Error));
			}

			messages = _messages;
		}

		#endregion
	}
}
]]>
					</OutputScope>
				</ForEach.Body>
			</ForEach>

		</ForEach.Body>
	</ForEach>

</Template>
