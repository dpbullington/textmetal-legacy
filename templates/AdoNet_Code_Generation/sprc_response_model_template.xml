<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v6.0.0">

	<Alloc token="FolderName" />

	<Assign token="FolderName">
		<Assign.Expression>
			<Value data="Procedures" />
		</Assign.Expression>
	</Assign>

	<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter></ForEach.Filter>
		<ForEach.Body>

			<ForEach in="Procedures" var-ct="_LoopCount" var-ix="_LoopIndex">
				<ForEach.Filter></ForEach.Filter>
				<ForEach.Body>

					<OutputScope name="${ClrNamespace}\${FolderName}\${ProcedureNameSingularPascalCase}_Response.g.cs">
						<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;

using TextMetal.Common.Core;
using TextMetal.Common.Data.Framework;
]]>
						<If>
							<If.Condition>
								<UnaryExpression operator="IsDef">
									<UnaryExpression.TheExpression>
										<Aspect name="ClrUsingNamespaces" />
									</UnaryExpression.TheExpression>
								</UnaryExpression>
							</If.Condition>
							<If.True>
								<ForEach in="ClrUsingNamespaces" var-ct="_LoopCount" var-ix="_LoopIndex" var-item="_LoopItem">
									<ForEach.Body>
										<![CDATA[using ${_LoopItem};
]]>
									</ForEach.Body>
								</ForEach>
							</If.True>
						</If>
						<![CDATA[
namespace ${ClrNamespace}.${FolderName}
{
	[Serializable]
	public partial class ${ProcedureNameSingularPascalCase}_Response : ${ClrSuperType}, INotifyPropertyChanged, I${ProcedureNameSingularPascalCase}_Response
	{
		#region Constructors/Destructors

		public ${ProcedureNameSingularPascalCase}_Response()
		{
		}

		#endregion

		#region Fields/Constants

		private bool enumerationComplete;
		private IEnumerable<I${ProcedureNameSingularPascalCase}_Result> results;

		public const string SCHEMA_NAME = "${SchemaName}";
		public const string PROCEDURE_NAME = "${ProcedureName}";

]]>

					<ForEach in="Parameters" var-ct="_LoopCount" var-ix="_LoopIndex">
						<ForEach.Filter>
							<BinaryExpression operator="Or">
								<BinaryExpression.LeftExpression>
									<BinaryExpression operator="Eq">
										<BinaryExpression.LeftExpression>
											<Facet name="ParameterIsOutput" />
										</BinaryExpression.LeftExpression>
										<BinaryExpression.RightExpression>
											<Value type="System.Boolean" data="True" />
										</BinaryExpression.RightExpression>
									</BinaryExpression>
								</BinaryExpression.LeftExpression>
								<BinaryExpression.RightExpression>
									<BinaryExpression operator="Eq">
										<BinaryExpression.LeftExpression>
											<Facet name="ParameterIsReadOnly" />
										</BinaryExpression.LeftExpression>
										<BinaryExpression.RightExpression>
											<Value type="System.Boolean" data="True" />
										</BinaryExpression.RightExpression>
									</BinaryExpression>
								</BinaryExpression.RightExpression>
							</BinaryExpression>
						</ForEach.Filter>
						<ForEach.Body>
							<![CDATA[		public const string PARAMETER_NAME_${ParameterNameConstantCase} = "${ParameterName}";]]>

							<If>
								<If.Condition>
									<BinaryExpression operator="Ne">
										<BinaryExpression.LeftExpression>
											<Facet name="_LoopCount" />
										</BinaryExpression.LeftExpression>
										<BinaryExpression.RightExpression>
											<Facet name="_LoopIndex" />
										</BinaryExpression.RightExpression>
									</BinaryExpression>
								</If.Condition>
								<If.True>
<![CDATA[
]]>
								</If.True>
							</If>
						</ForEach.Body>
					</ForEach>

<![CDATA[

]]>

						<ForEach in="Parameters" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ParameterIsOutput" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ParameterIsReadOnly" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>

								<![CDATA[		private ${ParameterCSharpClrNullableType} @${ParameterNameCamelCase};]]>

								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="_LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="_LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[
]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>

						<![CDATA[

		#endregion

		#region Properties/Indexers/Events

		public event PropertyChangedEventHandler PropertyChanged;

		public bool EnumerationComplete
		{
			get
			{
				return this.enumerationComplete;
			}
			private set
			{
				if (!DataType.Instance.ObjectsEqualValueSemantics(this.enumerationComplete, value))
				{
					this.enumerationComplete = value;
					OnPropertyChanged("EnumerationComplete");
				}
			}
		}

		public IEnumerable<I${ProcedureNameSingularPascalCase}_Result> Results
		{
			get
			{
				return this.results;
			}
			set
			{
				if (!DataType.Instance.ObjectsEqualValueSemantics(this.results, value))
				{
					this.results = value;
					this.EnumerationComplete = false;
					OnPropertyChanged("Results");
				}
			}
		}
]]>
						<ForEach in="Parameters" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ParameterIsOutput" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ParameterIsReadOnly" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>

								<![CDATA[
		public ${ParameterCSharpClrNullableType} @${ParameterNamePascalCase}
		{
			get
			{
				return this.@${ParameterNameCamelCase};
			}
			set
			{
				if (!DataType.Instance.ObjectsEqualValueSemantics(this.@${ParameterNameCamelCase}, value))
				{
					this.@${ParameterNameCamelCase} = value;
					OnPropertyChanged(PARAMETER_NAME_${ParameterNameConstantCase});
				}
			}
		}
		]]>
							</ForEach.Body>
						</ForEach>
<![CDATA[
		#endregion

		#region Methods/Operators

		protected void OnAllPropertiesChanged()
        {
			this.OnPropertyChanged(null);
		}

		protected void OnPropertyChanged(string propertyName)
        {
			if ((object)this.PropertyChanged != null)
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

		void IResponseModelObject.SetEnumerationComplete()
		{
			this.EnumerationComplete = true;
		}

		#endregion
	}
}
]]>
					</OutputScope>
				</ForEach.Body>
			</ForEach>

		</ForEach.Body>
	</ForEach>

</Template>
