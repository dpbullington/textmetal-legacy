<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v6.0.0">

	<OutputScope name="${ClrNamespace}\Repository.tv.g.cs">
		<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Xml;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
using TextMetal.Common.Data.Advanced;
using TextMetal.Common.Expressions;
]]>
		<If>
			<If.Condition>
				<UnaryExpression operator="IsDef">
					<UnaryExpression.TheExpression>
						<Aspect name="ClrUsingNamespaces" />
					</UnaryExpression.TheExpression>
				</UnaryExpression>
			</If.Condition>
			<If.True>
				<ForEach in="ClrUsingNamespaces" var-ct="_LoopCount" var-ix="_LoopIndex" var-item="_LoopItem">
					<ForEach.Body>
						<![CDATA[using ${_LoopItem};
]]>
					</ForEach.Body>
				</ForEach>
			</If.True>
		</If>

		<If>
			<If.Condition>
				<BinaryExpression operator="Or">
					<BinaryExpression.LeftExpression>
						<BinaryExpression operator="Eq">
							<BinaryExpression.LeftExpression>
								<Facet name="HasTables" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value type="System.Boolean" data="True" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<BinaryExpression operator="Eq">
							<BinaryExpression.LeftExpression>
								<Facet name="HasViews" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value type="System.Boolean" data="True" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[
]]>
			</If.True>
		</If>

		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasTables" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Tables;
]]>
			</If.True>
		</If>
		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasViews" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Views;
]]>
			</If.True>
		</If>
		<![CDATA[
namespace ${ClrNamespace}
{
	public partial class Repository
	{		
		#region Methods/Operators

]]>

		<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">			
			<ForEach.Body>
				
				<ForEach in="Tables" var-ct="_LoopCount" var-ix="_LoopIndex">
					<ForEach.Body>
						<![CDATA[		public I${TableNameSingularPascalCase} Load${TableNameSingularPascalCase}(]]>
						<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ColumnIsPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="HasNoDefinedPrimaryKeyColumns" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<![CDATA[${ColumnCSharpClrType} @${ColumnNameCamelCase}]]>
								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="_LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="_LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[, ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[)
		{
			I${TableNameSingularPascalCase} @${TableNameSingularCamelCase};
						
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@${TableNameSingularCamelCase} = this.Load${TableNameSingularPascalCase}(unitOfWork, ]]>
						<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ColumnIsPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="HasNoDefinedPrimaryKeyColumns" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<![CDATA[@${ColumnNameCamelCase}]]>
								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="_LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="_LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[, ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[);

					unitOfWork.Complete();
				}
			}
			else
				@${TableNameSingularCamelCase} = this.Load${TableNameSingularPascalCase}(UnitOfWork.Current, ]]>
						<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ColumnIsPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="HasNoDefinedPrimaryKeyColumns" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<![CDATA[@${ColumnNameCamelCase}]]>
								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="_LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="_LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[, ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[);
			
			return @${TableNameSingularCamelCase};
		}
		
]]>
				
<![CDATA[		public I${TableNameSingularPascalCase} Load${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, ]]>
						<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ColumnIsPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="HasNoDefinedPrimaryKeyColumns" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<![CDATA[${ColumnCSharpClrType} @${ColumnNameCamelCase}]]>
								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="_LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="_LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[, ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[)
		{			
			I${TableNameSingularPascalCase} @${TableNameSingularCamelCase};			
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int queryExpectedRecordsAffected;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			commandParameters = new List<IDataParameter>();
			
]]>
	<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Or">
				<BinaryExpression.LeftExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsPrimaryKey" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="HasNoDefinedPrimaryKeyColumns" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[			commandParameter = unitOfWork.CreateParameter(ParameterDirection.Input, DbType.${ColumnDbType}, ${ColumnSize}, ${ColumnPrecision}, ${ColumnScale}, ${ColumnCSharpNullableLiteral}, GetDataSourceTagSpecificInstance().GetParameterName(${TableNameSingularPascalCase}.COLUMN_NAME_${ColumnNameConstantCase}), @${ColumnNameCamelCase});
			commandParameters.Add(commandParameter);
			GetDataSourceTagSpecificInstance().ParameterMagic(unitOfWork, commandParameter, "${ColumnSqlType}");]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="_LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="_LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>
<![CDATA[

			]]>
			<Import name="import_selectone.xml" />
<![CDATA[			
			
			GetDataSourceTagSpecificInstance().CommandMagic(unitOfWork, false, out queryExpectedRecordsAffected);

			OnProfileCommand(typeof(I${TableNameSingularPascalCase}), CommandType.Text, commandText, commandParameters, false, queryExpectedRecordsAffected);			
			
			@${TableNameSingularCamelCase} = unitOfWork.FetchModel<I${TableNameSingularPascalCase}>(CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapTo${TableNameSingularPascalCase}, () => this.CreateModel<I${TableNameSingularPascalCase}>());
							
			this.OnSelect${TableNameSingularPascalCase}(unitOfWork, @${TableNameSingularCamelCase});

			return @${TableNameSingularCamelCase};
		}
		
		public IEnumerable<I${TableNameSingularPascalCase}> Find${TableNamePluralPascalCase}(Query ${TableNameSingularCamelCase}Query)
		{
			IEnumerable<I${TableNameSingularPascalCase}> @${TableNamePluralCamelCase};
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					@${TableNamePluralCamelCase} = this.Find${TableNamePluralPascalCase}(unitOfWork, ${TableNameSingularCamelCase}Query);

					@${TableNamePluralCamelCase} = @${TableNamePluralCamelCase}.ToList(); // FORCE EAGER LOAD
					
					unitOfWork.Complete();
				}
			}
			else
			{
				@${TableNamePluralCamelCase} = this.Find${TableNamePluralPascalCase}(UnitOfWork.Current, ${TableNameSingularCamelCase}Query);
			
				// DO NOT FORCE EAGER LOAD
			}

			return @${TableNamePluralCamelCase};
		}
		
		public IEnumerable<I${TableNameSingularPascalCase}> Find${TableNamePluralPascalCase}(IUnitOfWork unitOfWork, Query ${TableNameSingularCamelCase}Query)
		{
			IEnumerable<I${TableNameSingularPascalCase}> @${TableNamePluralCamelCase};			
			List<IDataParameter> commandParameters;
			string commandText, filterFragment, sortFragment;
			int queryExpectedRecordsAffected;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
				
			if ((object)${TableNameSingularCamelCase}Query == null)
				throw new ArgumentNullException("${TableNameSingularCamelCase}Query");	
			
			if ((object)${TableNameSingularCamelCase}Query.Orders == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameters = new List<IDataParameter>();
			
			filterFragment = SqlExpressionVisitor.GetFilterText(GetDataSourceTagSpecificInstance(), unitOfWork, commandParameters, ${TableNameSingularCamelCase}Query.Expression);
			sortFragment = SqlExpressionVisitor.GetSortText(GetDataSourceTagSpecificInstance(), unitOfWork, commandParameters, ${TableNameSingularCamelCase}Query.Orders);

			]]>
			<Import name="import_selectfor.xml" />
<![CDATA[
			commandText = string.Format(commandText, filterFragment, sortFragment);
			
			GetDataSourceTagSpecificInstance().CommandMagic(unitOfWork, false, out queryExpectedRecordsAffected);
			
			OnProfileCommand(typeof(I${TableNameSingularPascalCase}), CommandType.Text, commandText, commandParameters, false, queryExpectedRecordsAffected);
			
			@${TableNamePluralCamelCase} = unitOfWork.QueryModel<I${TableNameSingularPascalCase}>(CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapTo${TableNameSingularPascalCase}, () => this.CreateModel<I${TableNameSingularPascalCase}>());
			
			foreach (I${TableNameSingularPascalCase} @${TableNameSingularCamelCase} in @${TableNamePluralCamelCase})
			{
				this.OnSelect${TableNameSingularPascalCase}(unitOfWork, @${TableNameSingularCamelCase});
				
				yield return @${TableNameSingularCamelCase}; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
			}
		}
		
		public bool Save${TableNameSingularPascalCase}(I${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			bool retval;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.Save${TableNameSingularPascalCase}(unitOfWork, @${TableNameSingularCamelCase});

					unitOfWork.Complete();
				}
			}
			else
				retval = this.Save${TableNameSingularPascalCase}(UnitOfWork.Current, @${TableNameSingularCamelCase});
			
			return retval;
		}
		
		public bool Save${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, I${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int persistNotExpectedRecordsAffected, queryExpectedRecordsAffected;
			bool wasNew, retval;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("${TableNameSingularCamelCase}");
			
			wasNew = @${TableNameSingularCamelCase}.IsNew;
			
			commandParameters = new List<IDataParameter>();
			
			if (wasNew)
			{	
				this.OnPreInsert${TableNameSingularPascalCase}(unitOfWork, @${TableNameSingularCamelCase});
				
]]>

	<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Ne">
				<BinaryExpression.LeftExpression>
					<Facet name="IsColumnServerGeneratedPrimaryKey" />
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<Value type="System.Boolean" data="True" />
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[				commandParameter = unitOfWork.CreateParameter(ParameterDirection.Input, DbType.${ColumnDbType}, ${ColumnSize}, ${ColumnPrecision}, ${ColumnScale}, ${ColumnCSharpNullableLiteral}, GetDataSourceTagSpecificInstance().GetParameterName("${ColumnNamePascalCase}"), ${TableNameSingularCamelCase}.@${ColumnNamePascalCase});
				commandParameters.Add(commandParameter);
				GetDataSourceTagSpecificInstance().ParameterMagic(unitOfWork, commandParameter, "${ColumnSqlType}");]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="_LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="_LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	</ForEach>

			
<![CDATA[

				]]>
				<Import name="import_insert.xml" />
<![CDATA[
			
				GetDataSourceTagSpecificInstance().CommandMagic(unitOfWork, true, out persistNotExpectedRecordsAffected);
			}
			else
			{
				this.OnPreUpdate${TableNameSingularPascalCase}(unitOfWork, @${TableNameSingularCamelCase});
				
]]>

	<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Ne">
				<BinaryExpression.LeftExpression>
					<Facet name="IsColumnServerGeneratedPrimaryKey" />
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<Value type="System.Boolean" data="True" />
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[				commandParameter = unitOfWork.CreateParameter(ParameterDirection.Input, DbType.${ColumnDbType}, ${ColumnSize}, ${ColumnPrecision}, ${ColumnScale}, ${ColumnCSharpNullableLiteral}, GetDataSourceTagSpecificInstance().GetParameterName(${TableNameSingularPascalCase}.COLUMN_NAME_${ColumnNameConstantCase}), ${TableNameSingularCamelCase}.@${ColumnNamePascalCase});
				commandParameters.Add(commandParameter);
				GetDataSourceTagSpecificInstance().ParameterMagic(unitOfWork, commandParameter, "${ColumnSqlType}");]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="_LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="_LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	</ForEach>

<![CDATA[

]]>	
	
	<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Or">
				<BinaryExpression.LeftExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsPrimaryKey" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="HasNoDefinedPrimaryKeyColumns" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[				commandParameter = unitOfWork.CreateParameter(ParameterDirection.Input, DbType.${ColumnDbType}, ${ColumnSize}, ${ColumnPrecision}, ${ColumnScale}, ${ColumnCSharpNullableLiteral}, GetDataSourceTagSpecificInstance().GetParameterName(${TableNameSingularPascalCase}.COLUMN_NAME_${ColumnNameConstantCase}), ${TableNameSingularCamelCase}.@${ColumnNamePascalCase});
				commandParameters.Add(commandParameter);
				GetDataSourceTagSpecificInstance().ParameterMagic(unitOfWork, commandParameter, "${ColumnSqlType}");]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="_LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="_LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	</ForEach>

			
<![CDATA[

				]]>
				<Import name="import_update.xml" />
<![CDATA[
				
				GetDataSourceTagSpecificInstance().CommandMagic(unitOfWork, true, out persistNotExpectedRecordsAffected);
			}			
			
			OnProfileCommand(typeof(I${TableNameSingularPascalCase}), CommandType.Text, commandText, commandParameters, true, persistNotExpectedRecordsAffected);
			
			retval = unitOfWork.PersistModel<I${TableNameSingularPascalCase}>(@${TableNameSingularCamelCase}, CommandType.Text, commandText, commandParameters, persistNotExpectedRecordsAffected, MapTo${TableNameSingularPascalCase});
		
			if (!retval)
			{
				this.OnSaveConflict${TableNameSingularPascalCase}(unitOfWork, @${TableNameSingularCamelCase});
				
				return retval;
			}
			
			commandParameters.Clear();
			]]>
			<Import name="import_identity.xml" />
<![CDATA[
				
			GetDataSourceTagSpecificInstance().CommandMagic(unitOfWork, false, out queryExpectedRecordsAffected);
				
			if (${TableNameSingularPascalCase}.HAS_SINGLE_COLUMN_SERVER_GENERATED_PRIMARY_KEY && wasNew && !DataType.IsNullOrWhiteSpace(commandText))
			{
				OnProfileCommand(typeof(I${TableNameSingularPascalCase}), CommandType.Text, commandText, commandParameters, false, queryExpectedRecordsAffected);
				
				// select the identity on the same connection
				unitOfWork.FillModel<I${TableNameSingularPascalCase}>(@${TableNameSingularCamelCase}, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapTo${TableNameSingularPascalCase});
			}
			
			if (wasNew)
			{
				this.OnPostInsert${TableNameSingularPascalCase}(unitOfWork, @${TableNameSingularCamelCase});
			}
			else
			{
				this.OnPostUpdate${TableNameSingularPascalCase}(unitOfWork, @${TableNameSingularCamelCase});
			}			

			return retval;
		}
		
		public bool Discard${TableNameSingularPascalCase}(I${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			bool retval;
			
			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = Repository.DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					retval = this.Discard${TableNameSingularPascalCase}(unitOfWork, @${TableNameSingularCamelCase});

					unitOfWork.Complete();
				}
			}
			else
				retval = this.Discard${TableNameSingularPascalCase}(UnitOfWork.Current, @${TableNameSingularCamelCase});
			
			return retval;
		}
		
		public bool Discard${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, I${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int persistNotExpectedRecordsAffected;
			bool retval;
			
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");
			
			if ((object)@${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("${TableNameSingularCamelCase}");
			
			if (@${TableNameSingularCamelCase}.IsNew)
				return true;
				
			commandParameters = new List<IDataParameter>();			
						
]]><ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Or">
				<BinaryExpression.LeftExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsPrimaryKey" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="HasNoDefinedPrimaryKeyColumns" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[			commandParameter = unitOfWork.CreateParameter(ParameterDirection.Input, DbType.${ColumnDbType}, ${ColumnSize}, ${ColumnPrecision}, ${ColumnScale}, ${ColumnCSharpNullableLiteral}, GetDataSourceTagSpecificInstance().GetParameterName(${TableNameSingularPascalCase}.COLUMN_NAME_${ColumnNameConstantCase}), ${TableNameSingularCamelCase}.@${ColumnNamePascalCase});
			commandParameters.Add(commandParameter);
			GetDataSourceTagSpecificInstance().ParameterMagic(unitOfWork, commandParameter, "${ColumnSqlType}");]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="_LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="_LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>
<![CDATA[

			this.OnPreDelete${TableNameSingularPascalCase}(unitOfWork, @${TableNameSingularCamelCase});

			]]>
			<Import name="import_delete.xml" />
<![CDATA[
			
			GetDataSourceTagSpecificInstance().CommandMagic(unitOfWork, true, out persistNotExpectedRecordsAffected);
			
			OnProfileCommand(typeof(I${TableNameSingularPascalCase}), CommandType.Text, commandText, commandParameters, true, persistNotExpectedRecordsAffected);
			
			retval = unitOfWork.PersistModel<I${TableNameSingularPascalCase}>(@${TableNameSingularCamelCase}, CommandType.Text, commandText, commandParameters, persistNotExpectedRecordsAffected, MapTo${TableNameSingularPascalCase});

			if (!retval)
			{
				this.OnDiscardConflict${TableNameSingularPascalCase}(unitOfWork, @${TableNameSingularCamelCase});
				
				return retval;
			}
			
			this.OnPostDelete${TableNameSingularPascalCase}(unitOfWork, @${TableNameSingularCamelCase});
						
			@${TableNameSingularCamelCase}.IsNew = false;

			return retval;
		}
		
		private static void MapTo${TableNameSingularPascalCase}(IDictionary<string, object> result, I${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			object value;
			
			if ((object)result == null)
				throw new ArgumentNullException("result");
				
			if ((object)@${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("${TableNameSingularCamelCase}");
			
]]><ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Body>
			<![CDATA[			if (result.TryGetValue(${TableNameSingularPascalCase}.COLUMN_NAME_${ColumnNameConstantCase}, out value))
				${TableNameSingularCamelCase}.@${ColumnNamePascalCase} = value.ChangeType<${ColumnCSharpClrNullableType}>();
]]>
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="_LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="_LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
					<![CDATA[
]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>
<![CDATA[		}
		
		partial void OnPreInsert${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, I${TableNameSingularPascalCase} @${TableNameSingularCamelCase});
		
		partial void OnPostInsert${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, I${TableNameSingularPascalCase} @${TableNameSingularCamelCase});
		
		partial void OnPreUpdate${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, I${TableNameSingularPascalCase} @${TableNameSingularCamelCase});
		
		partial void OnPostUpdate${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, I${TableNameSingularPascalCase} @${TableNameSingularCamelCase});
		
		partial void OnPreDelete${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, I${TableNameSingularPascalCase} @${TableNameSingularCamelCase});
		
		partial void OnPostDelete${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, I${TableNameSingularPascalCase} @${TableNameSingularCamelCase});
		
		partial void OnSaveConflict${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, I${TableNameSingularPascalCase} @${TableNameSingularCamelCase});
		
		partial void OnDiscardConflict${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, I${TableNameSingularPascalCase} @${TableNameSingularCamelCase});
		
		partial void OnSelect${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, I${TableNameSingularPascalCase} @${TableNameSingularCamelCase});		
]]>
						<If>
							<If.Condition>
								<BinaryExpression operator="Ne">
									<BinaryExpression.LeftExpression>
										<Facet name="_LoopCount" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Facet name="_LoopIndex" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[
]]>
							</If.True>
						</If>
					</ForEach.Body>
				</ForEach>

			</ForEach.Body>
		</ForEach>

		<![CDATA[
		#endregion
	}
}
]]>
	</OutputScope>

</Template>