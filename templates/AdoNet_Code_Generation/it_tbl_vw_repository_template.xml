<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v5.0.0">

	<OutputScope name="${ClrNamespace}.IntegrationTests\RepositoryTests.tv.g.cs">
		<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
using System.Xml;

using NUnit.Framework;

using TextMetal.TestFramework;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
using TextMetal.Common.Data.Advanced;
using TextMetal.Common.Expressions;

using TextMetal.Framework.ExpressionModel;
]]>
		<If>
			<If.Condition>
				<UnaryExpression operator="IsDef">
					<UnaryExpression.TheExpression>
						<Aspect name="ClrUsingNamespaces" />
					</UnaryExpression.TheExpression>
				</UnaryExpression>
			</If.Condition>
			<If.True>
				<ForEach in="ClrUsingNamespaces" var-ct="_LoopCount" var-ix="_LoopIndex" var-item="_LoopItem">
					<ForEach.Body>
						<![CDATA[using ${_LoopItem};
]]>
					</ForEach.Body>
				</ForEach>
			</If.True>
		</If>
		<If>
			<If.Condition>
				<BinaryExpression operator="Or">
					<BinaryExpression.LeftExpression>
						<BinaryExpression operator="Eq">
							<BinaryExpression.LeftExpression>
								<Facet name="HasTables" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value type="System.Boolean" data="True" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<BinaryExpression operator="Eq">
							<BinaryExpression.LeftExpression>
								<Facet name="HasViews" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value type="System.Boolean" data="True" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[
]]>
			</If.True>
		</If>

		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasTables" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Tables;
]]>
			</If.True>
		</If>
		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasViews" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Views;
]]>
			</If.True>
		</If>
		<![CDATA[
namespace ${ClrNamespace}.IntegrationTests
{
	[TestFixture]
	public partial class RepositoryTests
	{		
		#region Methods/Operators
		
]]>

		<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
			<ForEach.Filter></ForEach.Filter>
			<ForEach.Body>

				<ForEach in="Tables" var-ct="_LoopCount" var-ix="_LoopIndex">
					<ForEach.Filter></ForEach.Filter>
					<ForEach.Body>

						<If>
							<If.Condition>
								<UnaryExpression operator="Not">
									<UnaryExpression.TheExpression>
										<Facet name="IsView" />
									</UnaryExpression.TheExpression>
								</UnaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[		[Test]
		public void ShouldSave${TableNameSingularPascalCase}Test()
		{
			Repository repository;
			${TableNameSingularPascalCase} @${TableNameSingularCamelCase};
			bool result;
			
			Assert.IsNull(UnitOfWork.Current);
			
			repository = new Repository();
				
			using (AmbientUnitOfWorkScope scope = new AmbientUnitOfWorkScope(Repository.DefaultUnitOfWorkFactory.Instance))
			{
				Assert.IsNotNull(UnitOfWork.Current);

				@${TableNameSingularCamelCase} = new ${TableNameSingularPascalCase}();
]]>

								<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
									<ForEach.Filter>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="IsColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</ForEach.Filter>
									<ForEach.Body>

<![CDATA[				@${TableNameSingularCamelCase}.@${ColumnNamePascalCase} = ValueGenerator.GetNextValue<${ColumnCSharpClrType}>();]]>

										<If>
											<If.Condition>
												<BinaryExpression operator="Ne">
													<BinaryExpression.LeftExpression>
														<Facet name="_LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="_LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
<![CDATA[
]]>
											</If.True>
										</If>
									</ForEach.Body>
								</ForEach>

<![CDATA[

				// do INSERT first
				Assert.IsTrue(@${TableNameSingularCamelCase}.IsNew);
				
				result = repository.Save${TableNameSingularPascalCase}(@${TableNameSingularCamelCase});

				Assert.IsTrue(result);
					
]]>

								<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
									<ForEach.Filter>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="IsColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</ForEach.Filter>
									<ForEach.Body>

<![CDATA[				${TableNameSingularCamelCase}.@${ColumnNamePascalCase} = ValueGenerator.GetNextValue<${ColumnCSharpClrType}>();]]>

										<If>
											<If.Condition>
												<BinaryExpression operator="Ne">
													<BinaryExpression.LeftExpression>
														<Facet name="_LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="_LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
<![CDATA[
]]>
											</If.True>
										</If>
									</ForEach.Body>
								</ForEach>

<![CDATA[

				// do UPDATE next
				Assert.IsFalse(@${TableNameSingularCamelCase}.IsNew);
				
				result = repository.Save${TableNameSingularPascalCase}(@${TableNameSingularCamelCase});

				Assert.IsTrue(result);
				
				scope.ScopeComplete();
			}
			
			Assert.IsNull(UnitOfWork.Current);
		}
		
]]>
							</If.True>
						</If>
						
						<![CDATA[		[Test]
		public void ShouldLoad${TableNameSingularPascalCase}Test()
		{
			Repository repository;
			${TableNameSingularPascalCase} @${TableNameSingularCamelCase};
]]>
	<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Or">
				<BinaryExpression.LeftExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsPrimaryKey" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="HasNoDefinedPrimaryKeyColumns" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			<![CDATA[			${ColumnCSharpClrType} @${ColumnNameCamelCase} = ValueGenerator.GetNextValue<${ColumnCSharpClrType}>();]]>
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="_LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="_LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[
]]>
				</If.True>
			</If>
		</ForEach.Body>
	</ForEach>
	<![CDATA[

			Assert.IsNull(UnitOfWork.Current);

			repository = new Repository();

			using (AmbientUnitOfWorkScope scope = new AmbientUnitOfWorkScope(Repository.DefaultUnitOfWorkFactory.Instance))
			{
				Assert.IsNotNull(UnitOfWork.Current);

				${TableNameSingularCamelCase} = repository.Load${TableNameSingularPascalCase}(]]>
						<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ColumnIsPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="HasNoDefinedPrimaryKeyColumns" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<![CDATA[@${ColumnNameCamelCase}]]>
								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="_LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="_LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[, ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[);

				Assert.IsNotNull(@${TableNameSingularCamelCase});
				Assert.IsFalse(@${TableNameSingularCamelCase}.IsNew);

				scope.ScopeComplete();
			}

			Assert.IsNull(UnitOfWork.Current);
		}
		
		[Test]
		public void ShouldFind${TableNamePluralPascalCase}Test()
		{
			Repository repository;
			IEnumerable<${TableNameSingularPascalCase}> @${TableNamePluralCamelCase};

			Assert.IsNull(UnitOfWork.Current);

			repository = new Repository();

			using (AmbientUnitOfWorkScope scope = new AmbientUnitOfWorkScope(Repository.DefaultUnitOfWorkFactory.Instance))
			{
				Assert.IsNotNull(UnitOfWork.Current);

				${TableNamePluralCamelCase} = repository.Find${TableNamePluralPascalCase}(new Query(new NullaryExpressionConstruct(), new Order[] { }, 0, 0));

				Assert.IsNotNull(@${TableNamePluralCamelCase});
				Assert.IsNotEmpty(@${TableNamePluralCamelCase});

				scope.ScopeComplete();
			}

			Assert.IsNull(UnitOfWork.Current);
		}
]]>
						<If>
							<If.Condition>
								<BinaryExpression operator="Ne">
									<BinaryExpression.LeftExpression>
										<Facet name="_LoopCount" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Facet name="_LoopIndex" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[
]]>
							</If.True>
						</If>
					</ForEach.Body>
				</ForEach>

			</ForEach.Body>
		</ForEach>

		<![CDATA[
		#endregion
	}
}
]]>
	</OutputScope>

</Template>