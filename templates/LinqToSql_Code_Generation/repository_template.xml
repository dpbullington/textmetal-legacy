<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v6.0.0">

	<OutputScope name="${ClrNamespace}\Repository.g.cs">
		<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Xml;
using System.Xml.Linq;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
using TextMetal.Common.Data.Framework;
using TextMetal.Common.Data.Framework.LinqToSql;
using TextMetal.Common.Syntax.Expressions;
using TextMetal.Common.Syntax.Operators;
using TextMetal.Common.Syntax.Statements;
using TextMetal.Common.Solder.DependencyManagement;
]]>
		<If>
			<If.Condition>
				<UnaryExpression operator="IsDef">
					<UnaryExpression.TheExpression>
						<Aspect name="ClrUsingNamespaces" />
					</UnaryExpression.TheExpression>
				</UnaryExpression>
			</If.Condition>
			<If.True>
				<ForEach in="ClrUsingNamespaces" var-ct="_LoopCount" var-ix="_LoopIndex" var-item="_LoopItem">
					<ForEach.Body>
						<![CDATA[using ${_LoopItem};
]]>
					</ForEach.Body>
				</ForEach>
			</If.True>
		</If>

		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasTables" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Tables;
]]>
			</If.True>
		</If>
		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasViews" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Views;
]]>
			</If.True>
		</If>
		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasProcedures" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[//using ${ClrNamespace}.Procedures;
]]>
			</If.True>
		</If>
<![CDATA[
[assembly: DependencyRegistration]

namespace ${ClrNamespace}
{
	[DependencyRegistration]
	public partial class Repository : LinqToSqlModelRepository<${LinqToSqlDataContextRootNamespace}.${LinqToSqlTargetDataContextName}>, IRepository
	{		
		#region Constructors/Destructors
		
		public Repository()
		{
		}

		#endregion

		#region Methods/Operators

		[DependencyRegistration]
		public static void OnDepenndencyRegistration()
		{
			DependencyManager.AppDomainInstance.AddResolution<IRepository>("", new ConstructorDependencyResolution<Repository>());
]]>

	<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter></ForEach.Filter>
		<ForEach.Body>

			<ForEach in="Tables" var-ct="_LoopCount" var-ix="_LoopIndex">
				<ForEach.Filter></ForEach.Filter>
				<ForEach.Body>
<![CDATA[
			DependencyManager.AppDomainInstance.AddResolution<I${TableNameSingularPascalCase}>("", ActivatorDependencyResolution.FromNonPublicDefault<${TableNameSingularPascalCase}>());]]>

				</ForEach.Body>
			</ForEach>
			
		</ForEach.Body>
	</ForEach>

<![CDATA[
		}

		public override bool Discard<TModel>(IUnitOfWork unitOfWork, TModel model)
		{
			Type modelType;

			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)model == null)
				throw new ArgumentNullException("model");

			modelType = typeof(TModel);

			if (false)
			{
				// do nothing
			}]]>
		<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
			<ForEach.Body>
				<ForEach in="Tables" var-ct="_LoopCount" var-ix="_LoopIndex">
					<ForEach.Body>

<![CDATA[
			else if (modelType == typeof(I${TableNameSingularPascalCase}))
			{
				I${TableNameSingularPascalCase} _model = (I${TableNameSingularPascalCase})(object)model;
				return this.LinqDiscard<I${TableNameSingularPascalCase}, ${LinqToSqlDataContextRootNamespace}.${ObjectNameSqlMetalPascalCase}>(unitOfWork, _model, (t) => ]]>
						<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ColumnIsPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="HasNoDefinedPrimaryKeyColumns" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<If>
									<If.Condition>
										<Ruby src="Script" expr="" file="">
											<Script>
												type = textMetal.EvaluateToken.invoke("ColumnSqlType");
												return ["image", "varbinary", "binary", "rowversion", "timestamp"].include?(type);
											</Script>
										</Ruby>
									</If.Condition>
									<If.True>
										<![CDATA[t.@${ColumnNameSqlMetalPascalCase}.ToArray() == _model.@${ColumnNamePascalCase}]]>
									</If.True>
									<If.False>
										<If>
											<If.Condition>
												<Ruby src="Script" expr="" file="">
													<Script>
														type = textMetal.EvaluateToken.invoke("ColumnSqlType");
														return ["xml"].include?(type);
													</Script>
												</Ruby>
											</If.Condition>
											<If.True>
												<![CDATA[t.@${ColumnNameSqlMetalPascalCase} == LinqToSqlHelper.ToXElement(_model.@${ColumnNamePascalCase})]]>
											</If.True>
											<If.False>
												<![CDATA[t.@${ColumnNameSqlMetalPascalCase} == _model.@${ColumnNamePascalCase}]]>
											</If.False>
										</If>
									</If.False>
								</If>

								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="_LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="_LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[ && ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[);
			}]]>

					</ForEach.Body>
				</ForEach>
			</ForEach.Body>
		</ForEach>
<![CDATA[
			else
				throw new ArgumentOutOfRangeException(string.Format("The model type '{0}' was not recognized. Try re-generating the repository code from the templates using TextMetal.exe and try again.", modelType.FullName));
		}

		public override TResponseModel ExecuteImperative<TRequestModel, TResultModel, TResponseModel>(IUnitOfWork unitOfWork, TRequestModel requestModel)
		{
			throw new NotImplementedException();
		}

		public override TModel Fill<TModel>(IUnitOfWork unitOfWork, TModel model)
		{
			throw new NotImplementedException();
		}

		public override IEnumerable<TModel> Find<TModel>(IUnitOfWork unitOfWork, IModelQuery modelQuery)
		{
			Type modelType;

			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)modelQuery == null)
				throw new ArgumentNullException("modelQuery");

			modelType = typeof(TModel);

			if (false)
			{
				// do nothing
			}]]>
		<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
			<ForEach.Body>
				<ForEach in="Tables" var-ct="_LoopCount" var-ix="_LoopIndex">
					<ForEach.Body>

<![CDATA[
			else if (modelType == typeof(I${TableNameSingularPascalCase}))
			{
				Expression<Func<${LinqToSqlDataContextRootNamespace}.${ObjectNameSqlMetalPascalCase}, bool>> _predicate = modelQuery.GetNativeReduction() as Expression<Func<${LinqToSqlDataContextRootNamespace}.${ObjectNameSqlMetalPascalCase}, bool>>;

				if ((object)_predicate == null)
					throw new InvalidOperationException(string.Format("Model query object of type '{0}' returned an invalid native reduction (inner query); expected type is '{1}'.", modelQuery.GetType().FullName, typeof(Expression<Func<${LinqToSqlDataContextRootNamespace}.${ObjectNameSqlMetalPascalCase}, bool>>).FullName));

				return (IEnumerable<TModel>)this.LinqFind<I${TableNameSingularPascalCase}, ${LinqToSqlDataContextRootNamespace}.${ObjectNameSqlMetalPascalCase}>(unitOfWork, _predicate, (dm, st) => { ]]>
						<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter>
							</ForEach.Filter>
							<ForEach.Body>
								<If>
									<If.Condition>
										<Ruby src="Script" expr="" file="">
											<Script>
												type = textMetal.EvaluateToken.invoke("ColumnSqlType");
												return ["image", "varbinary", "binary", "rowversion", "timestamp"].include?(type);
											</Script>
										</Ruby>
									</If.Condition>
									<If.True>
										<![CDATA[dm.@${ColumnNamePascalCase} = (object)st.@${ColumnNameSqlMetalPascalCase} != null ? st.@${ColumnNameSqlMetalPascalCase}.ToArray() : null;]]>
									</If.True>
									<If.False>
										<If>
											<If.Condition>
												<Ruby src="Script" expr="" file="">
													<Script>
														type = textMetal.EvaluateToken.invoke("ColumnSqlType");
														return ["xml"].include?(type);
													</Script>
												</Ruby>
											</If.Condition>
											<If.True>
												<![CDATA[dm.@${ColumnNamePascalCase} = (object)st.@${ColumnNameSqlMetalPascalCase} != null ? LinqToSqlHelper.ToXmlDocument(st.@${ColumnNameSqlMetalPascalCase}) : null;]]>
											</If.True>
											<If.False>
												<![CDATA[dm.@${ColumnNamePascalCase} = st.@${ColumnNameSqlMetalPascalCase};]]>
											</If.False>
										</If>
									</If.False>
								</If>

								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="_LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="_LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[ ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[ });
			}]]>

					</ForEach.Body>
				</ForEach>
			</ForEach.Body>
		</ForEach>
<![CDATA[
			else
				throw new ArgumentOutOfRangeException(string.Format("The model type '{0}' was not recognized. Try re-generating the repository code from the templates using TextMetal.exe and try again.", modelType.FullName));
		}

		public override TModel Load<TModel>(IUnitOfWork unitOfWork, TModel prototype)
		{
			Type modelType;

			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)prototype == null)
				throw new ArgumentNullException("prototype");

			modelType = typeof(TModel);

			if (false)
			{
				// do nothing
			}]]>
		<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
			<ForEach.Body>
				<ForEach in="Tables" var-ct="_LoopCount" var-ix="_LoopIndex">
					<ForEach.Body>

<![CDATA[
			else if (modelType == typeof(I${TableNameSingularPascalCase}))
			{
				I${TableNameSingularPascalCase} _prototype = (I${TableNameSingularPascalCase})(object)prototype;
				return (TModel)this.LinqLoad<I${TableNameSingularPascalCase}, ${LinqToSqlDataContextRootNamespace}.${ObjectNameSqlMetalPascalCase}>(unitOfWork, (t) => ]]>
						<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ColumnIsPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="HasNoDefinedPrimaryKeyColumns" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<If>
									<If.Condition>
										<Ruby src="Script" expr="" file="">
											<Script>
												type = textMetal.EvaluateToken.invoke("ColumnSqlType");
												return ["image", "varbinary", "binary", "rowversion", "timestamp"].include?(type);
											</Script>
										</Ruby>
									</If.Condition>
									<If.True>
										<![CDATA[t.@${ColumnNameSqlMetalPascalCase}.ToArray() == _prototype.@${ColumnNamePascalCase}]]>
									</If.True>
									<If.False>
										<If>
											<If.Condition>
												<Ruby src="Script" expr="" file="">
													<Script>
														type = textMetal.EvaluateToken.invoke("ColumnSqlType");
														return ["xml"].include?(type);
													</Script>
												</Ruby>
											</If.Condition>
											<If.True>
												<![CDATA[t.@${ColumnNameSqlMetalPascalCase} == LinqToSqlHelper.ToXElement(_prototype.@${ColumnNamePascalCase})]]>
											</If.True>
											<If.False>
												<![CDATA[t.@${ColumnNameSqlMetalPascalCase} == _prototype.@${ColumnNamePascalCase}]]>
											</If.False>
										</If>
									</If.False>
								</If>

								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="_LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="_LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[ && ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[, (dm, st) => { ]]>
						<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter>
							</ForEach.Filter>
							<ForEach.Body>
								<If>
									<If.Condition>
										<Ruby src="Script" expr="" file="">
											<Script>
												type = textMetal.EvaluateToken.invoke("ColumnSqlType");
												return ["image", "varbinary", "binary", "rowversion", "timestamp"].include?(type);
											</Script>
										</Ruby>
									</If.Condition>
									<If.True>
										<![CDATA[dm.@${ColumnNamePascalCase} = (object)st.@${ColumnNameSqlMetalPascalCase} != null ? st.@${ColumnNameSqlMetalPascalCase}.ToArray() : null;]]>
									</If.True>
									<If.False>
										<If>
											<If.Condition>
												<Ruby src="Script" expr="" file="">
													<Script>
														type = textMetal.EvaluateToken.invoke("ColumnSqlType");
														return ["xml"].include?(type);
													</Script>
												</Ruby>
											</If.Condition>
											<If.True>
												<![CDATA[dm.@${ColumnNamePascalCase} = (object)st.@${ColumnNameSqlMetalPascalCase} != null ? LinqToSqlHelper.ToXmlDocument(st.@${ColumnNameSqlMetalPascalCase}) : null;]]>
											</If.True>
											<If.False>
												<![CDATA[dm.@${ColumnNamePascalCase} = st.@${ColumnNameSqlMetalPascalCase};]]>
											</If.False>
										</If>
									</If.False>
								</If>

								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="_LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="_LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[ ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[ });
			}]]>

					</ForEach.Body>
				</ForEach>
			</ForEach.Body>
		</ForEach>
<![CDATA[
			else
				throw new ArgumentOutOfRangeException(string.Format("The model type '{0}' was not recognized. Try re-generating the repository code from the templates using TextMetal.exe and try again.", modelType.FullName));
		}

		public override bool Save<TModel>(IUnitOfWork unitOfWork, TModel model)
		{
			Type modelType;

			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)model == null)
				throw new ArgumentNullException("model");

			modelType = typeof(TModel);

			if (false)
			{
				// do nothing
			}]]>
		<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
			<ForEach.Body>
				<ForEach in="Tables" var-ct="_LoopCount" var-ix="_LoopIndex">
					<ForEach.Body>

<![CDATA[
			else if (modelType == typeof(I${TableNameSingularPascalCase}))
			{
				I${TableNameSingularPascalCase} _model = (I${TableNameSingularPascalCase})(object)model;
				return this.LinqSave<I${TableNameSingularPascalCase}, ${LinqToSqlDataContextRootNamespace}.${ObjectNameSqlMetalPascalCase}>(unitOfWork, _model, (t) => ]]>
						<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ColumnIsPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="HasNoDefinedPrimaryKeyColumns" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<If>
									<If.Condition>
										<Ruby src="Script" expr="" file="">
											<Script>
												type = textMetal.EvaluateToken.invoke("ColumnSqlType");
												return ["image", "varbinary", "binary", "rowversion", "timestamp"].include?(type);
											</Script>
										</Ruby>
									</If.Condition>
									<If.True>
										<![CDATA[t.@${ColumnNameSqlMetalPascalCase}.ToArray() == _model.@${ColumnNamePascalCase}]]>
									</If.True>
									<If.False>
										<If>
											<If.Condition>
												<Ruby src="Script" expr="" file="">
													<Script>
														type = textMetal.EvaluateToken.invoke("ColumnSqlType");
														return ["xml"].include?(type);
													</Script>
												</Ruby>
											</If.Condition>
											<If.True>
												<![CDATA[t.@${ColumnNameSqlMetalPascalCase} == LinqToSqlHelper.ToXElement(_model.@${ColumnNamePascalCase})]]>
											</If.True>
											<If.False>
												<![CDATA[t.@${ColumnNameSqlMetalPascalCase} == _model.@${ColumnNamePascalCase}]]>
											</If.False>
										</If>
									</If.False>
								</If>

								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="_LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="_LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[ && ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[, (dt, sm) => { ]]>
						<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter>
							</ForEach.Filter>
							<ForEach.Body>
								<If>
									<If.Condition>
										<Ruby src="Script" expr="" file="">
											<Script>
												type = textMetal.EvaluateToken.invoke("ColumnSqlType");
												return ["image", "varbinary", "binary", "rowversion", "timestamp"].include?(type);
											</Script>
										</Ruby>
									</If.Condition>
									<If.True>
										<![CDATA[if ((object)sm.@${ColumnNamePascalCase} != null) dt.@${ColumnNameSqlMetalPascalCase} = sm.@${ColumnNamePascalCase};]]>
									</If.True>
									<If.False>
										<If>
											<If.Condition>
												<Ruby src="Script" expr="" file="">
													<Script>
														type = textMetal.EvaluateToken.invoke("ColumnSqlType");
														return ["xml"].include?(type);
													</Script>
												</Ruby>
											</If.Condition>
											<If.True>
												<![CDATA[if ((object)sm.@${ColumnNamePascalCase} != null) dt.@${ColumnNameSqlMetalPascalCase} = LinqToSqlHelper.ToXElement(sm.@${ColumnNamePascalCase});]]>
											</If.True>
											<If.False>
												<![CDATA[dt.@${ColumnNameSqlMetalPascalCase} = sm.@${ColumnNamePascalCase};]]>
											</If.False>
										</If>
									</If.False>
								</If>

								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="_LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="_LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[ ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[ }, (dm, st) => { ]]>
						<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
							<ForEach.Filter>
							</ForEach.Filter>
							<ForEach.Body>
								<If>
									<If.Condition>
										<Ruby src="Script" expr="" file="">
											<Script>
												type = textMetal.EvaluateToken.invoke("ColumnSqlType");
												return ["image", "varbinary", "binary", "rowversion", "timestamp"].include?(type);
											</Script>
										</Ruby>
									</If.Condition>
									<If.True>
										<![CDATA[dm.@${ColumnNamePascalCase} = (object)st.@${ColumnNameSqlMetalPascalCase} != null ? st.@${ColumnNameSqlMetalPascalCase}.ToArray() : null;]]>
									</If.True>
									<If.False>
										<If>
											<If.Condition>
												<Ruby src="Script" expr="" file="">
													<Script>
														type = textMetal.EvaluateToken.invoke("ColumnSqlType");
														return ["xml"].include?(type);
													</Script>
												</Ruby>
											</If.Condition>
											<If.True>
												<![CDATA[dm.@${ColumnNamePascalCase} = (object)st.@${ColumnNameSqlMetalPascalCase} != null ? LinqToSqlHelper.ToXmlDocument(st.@${ColumnNameSqlMetalPascalCase}) : null;]]>
											</If.True>
											<If.False>
												<![CDATA[dm.@${ColumnNamePascalCase} = st.@${ColumnNameSqlMetalPascalCase};]]>
											</If.False>
										</If>
									</If.False>
								</If>

								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="_LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="_LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[ ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[ });
			}]]>

					</ForEach.Body>
				</ForEach>
			</ForEach.Body>
		</ForEach>
<![CDATA[
			else
				throw new ArgumentOutOfRangeException(string.Format("The model type '{0}' was not recognized. Try re-generating the repository code from the templates using TextMetal.exe and try again.", modelType.FullName));
		}

		#endregion
	}
}
]]>
	</OutputScope>

</Template>