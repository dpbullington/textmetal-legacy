<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v5.0.0">

	<OutputScope name="${ClrNamespace}\Repository.g.cs">
		<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Xml;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
]]>
		<If>
			<If.Condition>
				<UnaryExpression operator="IsDef">
					<UnaryExpression.TheExpression>
						<Aspect name="ClrUsingNamespaces" />
					</UnaryExpression.TheExpression>
				</UnaryExpression>
			</If.Condition>
			<If.True>
				<ForEach in="ClrUsingNamespaces" var-ct="_LoopCount" var-ix="_LoopIndex" var-item="_LoopItem">
					<ForEach.Body>
						<![CDATA[using ${_LoopItem};
]]>
					</ForEach.Body>
				</ForEach>
			</If.True>
		</If>
				
		<![CDATA[
namespace ${ClrNamespace}
{
	public partial class Repository : IRepository
	{		
		#region Constructors/Destructors
		
		public Repository()
		{
		}
		
		#endregion
		
		#region Fields/Constants
		
		private const string APP_CONFIG_PREFIX = "${ClrNamespace}";
		private const string CONNECTION_STRING_NAME = "${ClrNamespace}::ConnectionString";
		private const string DATA_SOURCE_TAG = "${ClrNamespace}::DataSourceTag";
						
		#endregion
		
		#region Properties/Indexers/Events
		
		public static string ConnectionString
		{
			get
			{
				string connectionString;

				connectionString = AppConfig.GetConnectionString(ConnectionStringName);

				OnPreProcessConnectionString(ref connectionString);

				return connectionString;
			}
		}

		public static string ConnectionStringName
		{
			get
			{
				string connectionStringName;

				connectionStringName = CONNECTION_STRING_NAME;
				OnPreProcessConnectionStringName(ref connectionStringName);

				return connectionStringName;
			}
		}
		
		public static Type ConnectionType
		{
			get
			{
				return Type.GetType(AppConfig.GetConnectionProvider(ConnectionStringName), true);
			}
		}
		
		public static string DataSourceTag
		{
			get
			{
				string value;

				if (!AppConfig.HasAppSetting(DATA_SOURCE_TAG))
					return null;

				value = AppConfig.GetAppSetting<string>(DATA_SOURCE_TAG);

				return value;
			}
		}
				
		#endregion
		
		#region Methods/Operators
		
		public static IUnitOfWork GetUnitOfWork()
		{
			return UnitOfWork.Create(ConnectionType, ConnectionString, true);
		}
		
		public static void InitDatabase()
		{
			// do nothing
			throw new NotSupportedException("LINQ to SQL is being used.");
		}

		static partial void OnPreProcessConnectionString(ref string connectionString);
		
		static partial void OnPreProcessConnectionStringName(ref string connectionStringName);
		
		#endregion
		
		#region Classes/Structs/Interfaces/Enums/Delegates

		public sealed class DefaultUnitOfWorkFactory : IUnitOfWorkFactory
		{
			#region Constructors/Destructors

			private DefaultUnitOfWorkFactory()
			{
			}

			#endregion

			#region Fields/Constants

			private static readonly IUnitOfWorkFactory instance = new DefaultUnitOfWorkFactory();

			#endregion

			#region Properties/Indexers/Events

			public static IUnitOfWorkFactory Instance
			{
				get
				{
					return instance;
				}
			}

			#endregion

			#region Methods/Operators

			public IUnitOfWork GetUnitOfWork()
			{
				return Repository.GetUnitOfWork();
			}

			#endregion
		}

		#endregion
	}
}
]]>
	</OutputScope>

</Template>