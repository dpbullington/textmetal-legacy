<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v6.0.0">

	<OutputScope name="${ClrNamespace}\Repository.g.cs">
		<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Xml;
using System.Xml.Linq;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
using TextMetal.Common.Data.Advanced;
using TextMetal.Common.Data.LinqToSql;
using TextMetal.Common.Expressions;
using TextMetal.Common.Solder.DependencyManagement;
]]>
		<If>
			<If.Condition>
				<UnaryExpression operator="IsDef">
					<UnaryExpression.TheExpression>
						<Aspect name="ClrUsingNamespaces" />
					</UnaryExpression.TheExpression>
				</UnaryExpression>
			</If.Condition>
			<If.True>
				<ForEach in="ClrUsingNamespaces" var-ct="_LoopCount" var-ix="_LoopIndex" var-item="_LoopItem">
					<ForEach.Body>
						<![CDATA[using ${_LoopItem};
]]>
					</ForEach.Body>
				</ForEach>
			</If.True>
		</If>

		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasTables" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Tables;
]]>
			</If.True>
		</If>
		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasViews" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Views;
]]>
			</If.True>
		</If>
		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasProcedures" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[//using ${ClrNamespace}.Procedures;
]]>
			</If.True>
		</If>
<![CDATA[
[assembly: DependencyRegistration]

namespace ${ClrNamespace}
{
	[DependencyRegistration]
	public partial class Repository : IRepository
	{		
		#region Constructors/Destructors
		
		public Repository()
		{
		}
		
		#endregion
		
		#region Fields/Constants
		
		private const string APP_CONFIG_PREFIX = "${ClrNamespace}";
		private const string CONNECTION_STRING_NAME = "${ClrNamespace}::ConnectionString";
		private const string DATA_SOURCE_TAG = "${ClrNamespace}::DataSourceTag";
						
		#endregion

		#region Properties/Indexers/Events

		public static string ConnectionString
		{
			get
			{
				string connectionString;

				connectionString = AppConfig.GetConnectionString(ConnectionStringName);

				OnPreProcessConnectionString(ref connectionString);

				return connectionString;
			}
		}

		public static string ConnectionStringName
		{
			get
			{
				string connectionStringName;

				connectionStringName = CONNECTION_STRING_NAME;
				OnPreProcessConnectionStringName(ref connectionStringName);

				return connectionStringName;
			}
		}

		public static Type ConnectionType
		{
			get
			{
				return Type.GetType(AppConfig.GetConnectionProvider(ConnectionStringName), true);
			}
		}

		public static string DataSourceTag
		{
			get
			{
				string value;

				if (!AppConfig.HasAppSetting(DATA_SOURCE_TAG))
					return null;

				value = AppConfig.GetAppSetting<string>(DATA_SOURCE_TAG);

				return value;
			}
		}

		#endregion
		
		#region Methods/Operators

		public TModel CreateModel<TModel>()
			where TModel : class, IModelObject
		{
			return DependencyManager.AppDomainInstance.ResolveDependency<TModel>("");
		}
		
		public TModel CreateRequestModel<TModel>()
			where TModel : class, IRequestModelObject
		{
			return DependencyManager.AppDomainInstance.ResolveDependency<TModel>("");
		}
			
		public TModel CreateResultModel<TModel>()
			where TModel : class, IResultModelObject
		{
			return DependencyManager.AppDomainInstance.ResolveDependency<TModel>("");
		}
			
		public TModel CreateResponseModel<TModel>()
			where TModel : class, IResponseModelObject
		{
			return DependencyManager.AppDomainInstance.ResolveDependency<TModel>("");
		}
		
		[DependencyRegistration]
		public static void OnDepenndencyRegistration()
		{
			DependencyManager.AppDomainInstance.AddResolution<IRepository>("", new ConstructorDependencyResolution<Repository>());
]]>

	<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter></ForEach.Filter>
		<ForEach.Body>

			<ForEach in="Tables" var-ct="_LoopCount" var-ix="_LoopIndex">
				<ForEach.Filter></ForEach.Filter>
				<ForEach.Body>
<![CDATA[
			DependencyManager.AppDomainInstance.AddResolution<I${TableNameSingularPascalCase}>("", DelegateDependencyResolution.FromFunc(() => new ${TableNameSingularPascalCase}()));]]>

				</ForEach.Body>
			</ForEach>
			
		</ForEach.Body>
	</ForEach>

<![CDATA[
		}
		
		public static XElement ToXElement(XmlDocument xmlDocument)
		{
			if ((object)xmlDocument == null)
				throw new ArgumentNullException("xmlDocument");

			using (XmlNodeReader nodeReader = new XmlNodeReader(xmlDocument))
			{
				nodeReader.MoveToContent();
				return XElement.Load(nodeReader);
			}
		}

		public static XmlDocument ToXmlDocument(XElement xElement)
		{
			XmlDocument xmlDocument;

			if ((object)xElement == null)
				throw new ArgumentNullException("xElement");

			xmlDocument = new XmlDocument();

			using (XmlReader xmlReader = xElement.CreateReader())
				xmlDocument.Load(xmlReader);

			return xmlDocument;
		}

		public IEnumerable<TResultEntity> Find<TDataContext, TResultEntity>(TDataContext dummy, Func<TDataContext, IQueryable<TResultEntity>> callback)
			where TDataContext : class, IDisposable
		{
			IEnumerable<TResultEntity> things;

			if ((object)UnitOfWork.Current == null)
			{
				using (IUnitOfWork unitOfWork = DefaultUnitOfWorkFactory.Instance.GetUnitOfWork())
				{
					things = this.Find<TDataContext, TResultEntity>(dummy, unitOfWork, callback);

					things = things.ToList(); // FORCE EAGER LOAD

					unitOfWork.Complete();
				}
			}
			else
			{
				things = this.Find<TDataContext, TResultEntity>(dummy, UnitOfWork.Current, callback);

				// DO NOT FORCE EAGER LOAD
			}

			return things;
		}

		public IEnumerable<TResultEntity> Find<TDataContext, TResultEntity>(TDataContext dummy, IUnitOfWork unitOfWork, Func<TDataContext, IQueryable<TResultEntity>> callback)
			where TDataContext : class, IDisposable
		{
			IEnumerable<TResultEntity> things;
			IQueryable<TResultEntity> queryable;

			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)callback == null)
				throw new ArgumentNullException("callback");

			using (AmbientUnitOfWorkAwareDisposableWrapper<TDataContext> wrapper = unitOfWork.GetContext<TDataContext>())
			{
				queryable = callback(wrapper.Disposable);

				if ((object)queryable == null)
					throw new InvalidOperationException(string.Format("The queryable returned was invalid."));

				things = queryable; // DOES NOT FORCE EXECUTION AGAINST STORE

				foreach (TResultEntity thing in things)
				{
					//this.OnSelect(unitOfWork, thing);
					//thing.Mark();
					yield return thing; // LAZY PROCESSING INTENT HERE / DO NOT FORCE EAGER LOAD
				}
			}
		}

		public static IUnitOfWork GetUnitOfWork()
		{
			return UnitOfWork.Create(ConnectionType, ConnectionString, true);
		}
		
		public static void InitDatabase()
		{
			// do nothing
			throw new NotSupportedException("LINQ to SQL is being used.");
		}

		static partial void OnPreProcessConnectionString(ref string connectionString);

		static partial void OnPreProcessConnectionStringName(ref string connectionStringName);

		#endregion
		
		#region Classes/Structs/Interfaces/Enums/Delegates

		public sealed class DefaultUnitOfWorkFactory : IUnitOfWorkFactory
		{
			#region Constructors/Destructors

			private DefaultUnitOfWorkFactory()
			{
			}

			#endregion

			#region Fields/Constants

			private static readonly IUnitOfWorkFactory instance = new DefaultUnitOfWorkFactory();

			#endregion

			#region Properties/Indexers/Events

			public static IUnitOfWorkFactory Instance
			{
				get
				{
					return instance;
				}
			}

			#endregion

			#region Methods/Operators

			public IUnitOfWork GetUnitOfWork()
			{
				return Repository.GetUnitOfWork();
			}

			#endregion
		}

		#endregion
	}
}
]]>
	</OutputScope>

</Template>