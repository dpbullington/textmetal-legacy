<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v5.0.0">

	<OutputScope name="${ClrNamespace}\.partial\Repository.cs">
		<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
using System.Linq;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
]]>
		<If>
			<If.Condition>
				<UnaryExpression operator="IsDef">
					<UnaryExpression.TheExpression>
						<Aspect name="ClrUsingNamespaces" />
					</UnaryExpression.TheExpression>
				</UnaryExpression>
			</If.Condition>
			<If.True>
				<ForEach in="ClrUsingNamespaces" var-ct="#LoopCount" var-ix="#LoopIndex" var-item="#item">
					<ForEach.Body>
						<![CDATA[using ${#item};
]]>
					</ForEach.Body>
				</ForEach>
			</If.True>
		</If>
				
		<![CDATA[
namespace ${ClrNamespace}
{
	public partial class Repository
	{		
		#region Methods/Operators
]]>

		<ForEach in="Schemas" var-ct="#LoopCount" var-ix="#LoopIndex">			
			<ForEach.Body>
				
				<ForEach in="Tables" var-ct="#LoopCount" var-ix="#LoopIndex">
					<ForEach.Body>
<![CDATA[	
		partial void OnPreInsert${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)@${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("@${TableNameSingularCamelCase}");

			@${TableNameSingularCamelCase}.Mark();
		}
		
		partial void OnPostInsert${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)@${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("@${TableNameSingularCamelCase}");

			// do nothing
		}
		
		partial void OnPreUpdate${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)@${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("@${TableNameSingularCamelCase}");

			@${TableNameSingularCamelCase}.Mark();
		}
		
		partial void OnPostUpdate${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)@${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("@${TableNameSingularCamelCase}");

			// do nothing
		}
		
		partial void OnPreDelete${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)@${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("@${TableNameSingularCamelCase}");

			// do nothing
		}
		
		partial void OnPostDelete${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)@${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("@${TableNameSingularCamelCase}");

			// do nothing
		}
		
		partial void OnSaveConflict${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)@${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("@${TableNameSingularCamelCase}");

			// do nothing
		}
		
		partial void OnDiscardConflict${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)@${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("@${TableNameSingularCamelCase}");

			// do nothing
		}
		
		partial void OnSelect${TableNameSingularPascalCase}(IUnitOfWork unitOfWork, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			if ((object)unitOfWork == null)
				throw new ArgumentNullException("unitOfWork");

			if ((object)@${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("@${TableNameSingularCamelCase}");

			// do nothing
		}
]]>
						<If>
							<If.Condition>
								<BinaryExpression operator="Ne">
									<BinaryExpression.LeftExpression>
										<Facet name="#LoopCount" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Facet name="#LoopIndex" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[
]]>
							</If.True>
						</If>
					</ForEach.Body>
				</ForEach>

			</ForEach.Body>
		</ForEach>

		<![CDATA[
		#endregion
	}
}
]]>
	</OutputScope>

</Template>