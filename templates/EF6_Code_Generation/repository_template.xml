<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2015 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v6.0.0">

	<OutputScope name="${ModuleName}\Repository.g.cs">
		<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Migrations;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Xml;

using LeastViable.Data.Models;
using LeastViable.Data.Models.Impl.Linq.EF6;
using LeastViable.Solder.IoC;
]]>
		<If>
			<If.Condition>
				<UnaryExpression operator="IsDef">
					<UnaryExpression.TheExpression>
						<Aspect name="ClrUsingNamespaces" />
					</UnaryExpression.TheExpression>
				</UnaryExpression>
			</If.Condition>
			<If.True>
				<ForEach in="ClrUsingNamespaces" var-ct="_LoopCount" var-ix="_LoopIndex" var-item="_LoopItem">
					<ForEach.Body>
						<![CDATA[using ${_LoopItem};
]]>
					</ForEach.Body>
				</ForEach>
			</If.True>
		</If>

		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasTables" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Tables;
]]>
			</If.True>
		</If>
		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasViews" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Views;
]]>
			</If.True>
		</If>
		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasProcedures" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Procedures;
]]>
			</If.True>
		</If>
<![CDATA[
[assembly: DependencyRegistration]

namespace ${ClrNamespace}
{
	public class ThisAppDbContext : DbContext
	{
		#region Constructors/Destructors

		public ThisAppDbContext(DbConnection dbConnection, bool contextOwnsConnection)
			: base(dbConnection, contextOwnsConnection)
		{
			//Console.WriteLine(this.Database.Connection.ConnectionString);
		}

		#endregion

		#region Properties/Indexers/Events
]]>



	<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter></ForEach.Filter>
		<ForEach.Body>

			<ForEach in="Tables" var-ct="_LoopCount" var-ix="_LoopIndex">
				<ForEach.Filter></ForEach.Filter>
				<ForEach.Body>
<![CDATA[
		public DbSet<${TableNameSingularPascalCase}> ${TableNamePluralPascalCase}
		{
			get;
			set;
		}
]]>
				</ForEach.Body>
			</ForEach>

		</ForEach.Body>
	</ForEach>
<![CDATA[
		#endregion

		#region Methods/Operators

		protected override void OnModelCreating(DbModelBuilder modelBuilder)
		{
			Database.SetInitializer<ThisAppDbContext>(new ThisAppDatabaseInitializer());
			base.OnModelCreating(modelBuilder);
		}

		#endregion
	}

	internal class ThisAppDatabaseInitializer : IDatabaseInitializer<ThisAppDbContext>
	{
		#region Methods/Operators

		public void InitializeDatabase(ThisAppDbContext context)
		{
		}

		#endregion
	}

	[DependencyRegistration]
	public partial class Repository : EntityFrameworkDbContextModelRepository<ThisAppDbContext>, IRepository
	{
		#region Constructors/Destructors

		public Repository()
		{
		}

		#endregion

		#region Methods/Operators

		[DependencyRegistration]
		public static void OnDepenndencyRegistration()
		{
			DependencyManager.AppDomainInstance.AddResolution<IRepository>("", new ConstructorDependencyResolution<Repository>());
		}

		#endregion
	}
}
]]>
	</OutputScope>

</Template>
