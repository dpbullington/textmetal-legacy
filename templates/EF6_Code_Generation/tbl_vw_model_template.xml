<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2015 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v6.0.0">
	<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter></ForEach.Filter>
		<ForEach.Body>

			<ForEach in="Tables" var-ct="_LoopCount" var-ix="_LoopIndex">
				<ForEach.Filter></ForEach.Filter>
				<ForEach.Body>

					<OutputScope name="${ModuleName}\${TableNameSqlMetalSingularPascalCase}.g.cs">
						<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
using System.Xml;

using TextMetal.Middleware.Common.Fascades.Utilities;
using TextMetal.Middleware.Data.Models;
]]>
						<If>
							<If.Condition>
								<UnaryExpression operator="IsDef">
									<UnaryExpression.TheExpression>
										<Aspect name="ClrUsingNamespaces" />
									</UnaryExpression.TheExpression>
								</UnaryExpression>
							</If.Condition>
							<If.True>
								<ForEach in="ClrUsingNamespaces" var-ct="_LoopCount" var-ix="_LoopIndex" var-item="_LoopItem">
									<ForEach.Body>
										<![CDATA[using ${_LoopItem};
]]>
									</ForEach.Body>
								</ForEach>
							</If.True>
						</If>
						<![CDATA[
namespace ${ClrNamespace}
{
	[Serializable]
	public partial class ${TableNameSqlMetalSingularPascalCase} : ${ModelClrSuperType}, I${TableNameSqlMetalSingularPascalCase}
	{
		#region Constructors/Destructors

		public ${TableNameSqlMetalSingularPascalCase}(object reserved)
		{
		}

		#endregion

		#region Fields/Constants
]]>

						<If>
							<If.Condition>
								<BinaryExpression operator="And">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Value type="System.Boolean" data="false" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="HasSingleColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsView" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="false" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[
		private bool isNew = true;]]>
							</If.True>
						</If>

<![CDATA[
		#endregion

		#region Properties/Indexers/Events
]]>
						<If>
							<If.Condition>
								<BinaryExpression operator="And">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Value type="System.Boolean" data="false" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="HasSingleColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsView" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="false" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[
		public override bool IsNew
		{
			get
			{
				return this.isNew;
			}
			set
			{
				this.isNew = value;
			}
		}

		public override object[] IdValues
		{
			get
			{
				return null;
			}
		}
		]]>
							</If.True>
						</If>

						<If>
							<If.Condition>
								<BinaryExpression operator="And">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Value type="System.Boolean" data="true" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="HasSingleColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsView" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="false" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[
		public override bool IsNew
		{
			get
			{
				return ]]>

								<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
									<ForEach.Filter>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</ForEach.Filter>
									<ForEach.Body>
										<![CDATA[this.@${ColumnNameSqlMetalPascalCase} == default(${ColumnCSharpClrNullableType})]]>
										<If>
											<If.Condition>
												<BinaryExpression operator="Ne">
													<BinaryExpression.LeftExpression>
														<Facet name="_LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="_LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
												<![CDATA[ && ]]>
											</If.True>
										</If>
										<If>
											<If.Condition>
												<BinaryExpression operator="Eq">
													<BinaryExpression.LeftExpression>
														<Facet name="_LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="_LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
												<![CDATA[;
]]>
											</If.True>
										</If>
									</ForEach.Body>
								</ForEach>

								<![CDATA[			}
			set
			{
				if(value)
					]]>

								<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
									<ForEach.Filter>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</ForEach.Filter>
									<ForEach.Body>
										<![CDATA[this.@${ColumnNameSqlMetalPascalCase}]]>
										<If>
											<If.Condition>
												<BinaryExpression operator="Ne">
													<BinaryExpression.LeftExpression>
														<Facet name="_LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="_LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
												<![CDATA[ = ]]>
											</If.True>
										</If>
										<If>
											<If.Condition>
												<BinaryExpression operator="Eq">
													<BinaryExpression.LeftExpression>
														<Facet name="_LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="_LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
												<![CDATA[ =  default(${ColumnCSharpClrNullableType});
]]>
											</If.True>
										</If>
									</ForEach.Body>
								</ForEach>

								<![CDATA[			}
		}

		public override object[] IdValues
		{
			get
			{
				return new object[] { ]]>

								<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
									<ForEach.Filter>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</ForEach.Filter>
									<ForEach.Body>
										<![CDATA[this.@${ColumnNameSqlMetalPascalCase}]]>
										<If>
											<If.Condition>
												<BinaryExpression operator="Ne">
													<BinaryExpression.LeftExpression>
														<Facet name="_LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="_LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
												<![CDATA[, ]]>
											</If.True>
										</If>
										<If>
											<If.Condition>
												<BinaryExpression operator="Eq">
													<BinaryExpression.LeftExpression>
														<Facet name="_LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="_LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
												<![CDATA[ };
]]>
											</If.True>
										</If>
									</ForEach.Body>
								</ForEach>

								<![CDATA[			}
		}
		]]>
							</If.True>
						</If>

						<If>
							<If.Condition>
								<BinaryExpression operator="Eq">
									<BinaryExpression.LeftExpression>
										<Facet name="IsView" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Value type="System.Boolean" data="true" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[
		public override bool IsNew
		{
			get
			{
				throw new NotSupportedException(string.Format("The model type '{0}' does not support the IsNew property.", this.GetType().FullName));
			}
			set
			{
				throw new NotSupportedException(string.Format("The model type '{0}' does not support the IsNew property.", this.GetType().FullName));
			}
		}

		public override object[] IdValues
		{
			get
			{
				throw new NotSupportedException(string.Format("The model type '{0}' does not support the IdValues property.", this.GetType().FullName));
			}
		}
		]]>
							</If.True>
						</If>

<![CDATA[
		#endregion
	}
}
]]>
					</OutputScope>
				</ForEach.Body>
			</ForEach>

		</ForEach.Body>
	</ForEach>

</Template>
