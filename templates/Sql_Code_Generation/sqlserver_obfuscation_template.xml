<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v5.0.0">

	<OutputScope name="Obfucation_TableViewConfig_Baseline.g.sql" append="false">
<![CDATA[

SET NOCOUNT ON
GO

USE [${DataObfuscationProxyCatalogName}]
GO


]]>
	</OutputScope>

	<OutputScope name="Obfucation.g.sql">

<![CDATA[

SET NOCOUNT ON
GO

USE [master]
GO


IF EXISTS (SELECT * FROM sysdatabases WHERE name = '${DataObfuscationProxyCatalogName}')
BEGIN

	ALTER DATABASE [${DataObfuscationProxyCatalogName}] SET SINGLE_USER WITH ROLLBACK IMMEDIATE
	
	DROP DATABASE [${DataObfuscationProxyCatalogName}]
	
END
GO


CREATE DATABASE [${DataObfuscationProxyCatalogName}]
GO


USE [${DataObfuscationProxyCatalogName}]
GO


CREATE SCHEMA [DataObfuscation]
GO


-- template for custom dictionary
CREATE TABLE [DataObfuscation].[CrayonColorDictionary]
(
	[CrayonColorDictionaryKey] [int] IDENTITY(0,1) NOT NULL,
	[CrayonColorDictionaryValue] [nvarchar](255) NOT NULL,
	
	CONSTRAINT [pk_CrayonColorDictionary] PRIMARY KEY
	(
		[CrayonColorDictionaryKey]
	),
	
	-- optional
	CONSTRAINT [uk_CrayonColorDictionary] UNIQUE
	(
		[CrayonColorDictionaryValue]
	)
)	
GO


INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Transparent')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Almond')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Antique Brass')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Apricot')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Aquamarine')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Asparagus')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Atomic Tangerine')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Banana Mania')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Beaver')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Bittersweet')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Black')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Blue')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Blue Bell')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Blue Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Blue Violet')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Blush')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Brick Red')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Brown')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Burnt Orange')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Burnt Sienna')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Cadet Blue')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Canary')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Caribbean Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Carnation Pink')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Cerise')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Cerulean')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Chestnut')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Copper')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Cornflower')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Cotton Candy')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Dandelion')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Denim')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Desert Sand')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Eggplant')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Electric Lime')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Fern')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Forest Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Fuchsia')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Fuzzy Wuzzy Brown')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Gold')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Goldenrod')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Granny Smith Apple')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Gray')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Green Yellow')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Hot Magenta')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Inch Worm')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Indigo')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Jazzberry Jam')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Jungle Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Laser Lemon')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Lavender')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Macaroni and Cheese')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Magenta')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Mahogany')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Manatee')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Mango Tango')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Maroon')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Mauvelous')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Melon')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Midnight Blue')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Mountain Meadow')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Navy Blue')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Neon Carrot')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Olive Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Orange')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Orchid')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Outer Space')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Outrageous Orange')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Pacific Blue')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Peach')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Periwinkle')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Piggy Pink')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Pine Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Pink Flamingo')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Pink Sherbet')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Plum')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Purple Heart')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Purple Mountains’ Majesty')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Purple Pizzazz')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Radical Red')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Raw Sienna')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Razzle Dazzle Rose')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Razzmatazz')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Red')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Red Orange')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Red Violet')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Robin Egg Blue')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Royal Purple')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Salmon')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Scarlet')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Screamin Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Sea Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Sepia')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Shadow')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Shamrock')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Shocking Pink')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Silver')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Sky Blue')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Spring Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Sunglow')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Sunset Orange')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Tan')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Tickle Me Pink')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Timberwolf')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Tropical Rain Forest')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Tumbleweed')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Turquoise Blue')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Unmellow Yellow')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Violet (Purple)')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Violet Red')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Vivid Tangerine')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Vivid Violet')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('White')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Wild Blue Yonder')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Wild Strawberry')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Wild Watermelon')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Wisteria')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Yellow')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Yellow Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Yellow Orange')
GO


CREATE VIEW [DataObfuscation].[Dictionary]
AS
SELECT 1001 as [DictionaryId], t.[CrayonColorDictionaryKey] as [DictionaryKey], t.[CrayonColorDictionaryValue] as [DictionaryValue]
	FROM [DataObfuscation].[CrayonColorDictionary] t
--	UNION ALL
-- more dictionaries
GO


CREATE TABLE [DataObfuscation].[Strategy]
(
	[StrategyId] [int] NOT NULL,
	[StrategyName] [nvarchar](64) NOT NULL,
	[StrategyDesc] [nvarchar](1023) NOT NULL,

	CONSTRAINT [pk_Strategy] PRIMARY KEY
	(
		[StrategyId]
	),
	
	CONSTRAINT [uk_Strategy] UNIQUE
	(
		[StrategyName]
	)
)	
GO


INSERT INTO [DataObfuscation].[Strategy] VALUES (0, 'None', 'Performs no obfuscation.');
INSERT INTO [DataObfuscation].[Strategy] VALUES (1, 'Substitution', 'Returns an alternate value for the real data using a hash appoach.');
INSERT INTO [DataObfuscation].[Strategy] VALUES (2, 'Shuffling', 'Returns an alternate value for the real data using a shuffle appoach.');
INSERT INTO [DataObfuscation].[Strategy] VALUES (3, 'Variance', 'Returns a value within +/- (x% | xd) of the real data.');
INSERT INTO [DataObfuscation].[Strategy] VALUES (4, 'Cipher', 'Returns an encrypted value for all real data.');
INSERT INTO [DataObfuscation].[Strategy] VALUES (5, 'Nulling', 'Return a null value instead of the real data.');
INSERT INTO [DataObfuscation].[Strategy] VALUES (6, 'Masking', 'Returns a mask value for most but not all of the real data.');
GO


CREATE TABLE [DataObfuscation].[StoredProcedureParameterConfig]
(
	[StoredProcedureParameterConfigId] [int] IDENTITY(1,1) NOT NULL,

	[CatalogName] [nvarchar](64) NOT NULL, -- skimping here to prevent index warning exceed 900 bytes
	[SchemaName] [nvarchar](128) NOT NULL,
	[ProcedureName] [nvarchar](128) NOT NULL,
	[ParameterName] [nvarchar](128) NOT NULL, -- output paramters only
	
	[StrategyId] [int] NOT NULL,
	[DictionaryId] [int] NOT NULL,
	
	[HashSeed] [bigint] NOT NULL,
	[HashSize] [bigint] NOT NULL,

	CONSTRAINT [pk_StoredProcedureParameterConfig] PRIMARY KEY
	(
		[StoredProcedureParameterConfigId]
	),
	
	CONSTRAINT [uk_StoredProcedureParameterConfig] UNIQUE
	(
		[CatalogName],
		[SchemaName],
		[ProcedureName],
		[ParameterName]
	),
	
	CONSTRAINT [fk_StoredProcedureParameterConfig_Strategy] FOREIGN KEY
	(
		[StrategyId]
	)
	REFERENCES [DataObfuscation].[Strategy]
	(
		[StrategyId]
	)
)	
GO


CREATE TABLE [DataObfuscation].[StoredProcedureColumnConfig]
(
	[StoredProcedureColumnConfigId] [int] IDENTITY(1,1) NOT NULL,

	[CatalogName] [nvarchar](64) NOT NULL, -- skimping here to prevent index warning exceed 900 bytes
	[SchemaName] [nvarchar](128) NOT NULL,
	[ProcedureName] [nvarchar](128) NOT NULL,
	[ColumnName] [nvarchar](128) NOT NULL, -- output resultset columns only
	
	[StrategyId] [int] NOT NULL,
	[DictionaryId] [int] NOT NULL,
	
	[HashSeed] [bigint] NOT NULL,
	[HashSize] [bigint] NOT NULL,

	CONSTRAINT [pk_StoredProcedureColumnConfig] PRIMARY KEY
	(
		[StoredProcedureColumnConfigId]
	),
	
	CONSTRAINT [uk_StoredProcedureColumnConfig] UNIQUE
	(
		[CatalogName],
		[SchemaName],
		[ProcedureName],
		[ColumnName]
	),
	
	CONSTRAINT [fk_StoredProcedureColumnConfig_Strategy] FOREIGN KEY
	(
		[StrategyId]
	)
	REFERENCES [DataObfuscation].[Strategy]
	(
		[StrategyId]
	)
)	
GO


CREATE TABLE [DataObfuscation].[TableViewColumnConfig]
(
	[TableViewColumnConfigId] [int] IDENTITY(1,1) NOT NULL,

	[CatalogName] [nvarchar](64) NOT NULL, -- skimping here to prevent index warning exceed 900 bytes
	[SchemaName] [nvarchar](128) NOT NULL,
	[TableName] [nvarchar](128) NOT NULL,
	[ColumnName] [nvarchar](128) NOT NULL,
	
	[StrategyId] [int] NOT NULL,
	[DictionaryId] [int] NOT NULL,
	
	[HashSeed] [bigint] NOT NULL,
	[HashSize] [bigint] NOT NULL,

	CONSTRAINT [pk_TableViewColumnConfig] PRIMARY KEY
	(
		[TableViewColumnConfigId]
	),
	
	CONSTRAINT [uk_TableViewColumnConfig] UNIQUE
	(
		[CatalogName],
		[SchemaName],
		[TableName],
		[ColumnName]
	),
	
	CONSTRAINT [fk_TableViewColumnConfig_Strategy] FOREIGN KEY
	(
		[StrategyId]
	)
	REFERENCES [DataObfuscation].[Strategy]
	(
		[StrategyId]
	)
)	
GO


CREATE ASSEMBLY [TextMetal.Common.SqlServerClr]
AUTHORIZATION [dbo]
FROM
]]>
		<Include name="${argument_basedir}\TextMetal.Common.SqlServerClr.dll.txt" />
<![CDATA[WITH PERMISSION_SET = SAFE
GO


CREATE FUNCTION [DataObfuscation].[fn_GetCipher]
(
	@sharedSecret [nvarchar](MAX),
	@value [sql_variant]
)
RETURNS [sql_variant]
AS EXTERNAL NAME [TextMetal.Common.SqlServerClr].[TextMetal.Common.SqlServerClr.ScalarFunctions].[fn_GetCipher]
GO


CREATE FUNCTION [DataObfuscation].[fn_GetMask]
(
	@maskFactor as [float],
	@value [sql_variant]
)
RETURNS [sql_variant]
AS EXTERNAL NAME [TextMetal.Common.SqlServerClr].[TextMetal.Common.SqlServerClr.ScalarFunctions].[fn_GetMask]
GO


CREATE FUNCTION [DataObfuscation].[fn_GetShuffle]
(
	@randomSeed [bigint],
	@value [sql_variant]
)
RETURNS [sql_variant]
AS EXTERNAL NAME [TextMetal.Common.SqlServerClr].[TextMetal.Common.SqlServerClr.ScalarFunctions].[fn_GetShuffle]
GO


CREATE FUNCTION [DataObfuscation].[fn_GetVariance]
(
	@varianceFactor as [float],
	@value [sql_variant]
)
RETURNS [sql_variant]
AS EXTERNAL NAME [TextMetal.Common.SqlServerClr].[TextMetal.Common.SqlServerClr.ScalarFunctions].[fn_GetVariance]
GO

]]>

	<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter>
			<Ruby src="Script">
				<Script>!["db_accessadmin", "db_backupoperator", "db_datareader",
				"db_datawriter", "db_ddladmin", "db_denydatareader", "db_denydatawriter",
				"db_owner", "db_securityadmin", "dbo", "sys",
				"INFORMATION_SCHEMA", "guest"].include?(textMetal.EvaluateToken.invoke("SchemaName"));</Script>
			</Ruby>	
		</ForEach.Filter>
		
		<ForEach.Body>
		
<![CDATA[
CREATE SCHEMA [${SchemaName}]
GO
]]>

			<ForEach in="Tables" var-ct="_LoopCount" var-ix="_LoopIndex">
				<ForEach.Filter>
				</ForEach.Filter>
				<ForEach.Body>
<![CDATA[

CREATE FUNCTION [${SchemaName}].[iltv_fn_${TableName}]
(
]]>
				<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
					<ForEach.Sort>
						<Ascending>
							<Ascending.Compare>
								<Facet name="ColumnOrdinal" />
							</Ascending.Compare>
						</Ascending>
					</ForEach.Sort>
					<ForEach.Body>
					
<![CDATA[	@${ColumnNamePascalCase} [${ColumnSqlType}]${rb(`
	if ["varchar", "nvarchar", "varbinary"].include?(textMetal.EvaluateToken.invoke("ColumnSqlType"))
		"(" + (textMetal.EvaluateToken.invoke("ColumnSize") > 0 ? textMetal.EvaluateToken.invoke("ColumnSize").to_s() : "MAX") + ")"
	else
		""
	end
`)}]]>
						<If>
							<If.Condition>
								<BinaryExpression operator="Ne">
									<BinaryExpression.LeftExpression>
										<Facet name="_LoopCount" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Facet name="_LoopIndex" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
<![CDATA[,
]]>
							</If.True>
						</If>
					</ForEach.Body>
				</ForEach>
<![CDATA[
)
RETURNS TABLE 
RETURN
	SELECT
]]>
				<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
					<ForEach.Sort>
						<Ascending>
							<Ascending.Compare>
								<Facet name="ColumnOrdinal" />
							</Ascending.Compare>
						</Ascending>
					</ForEach.Sort>
					<ForEach.Body>
<!-- TODO HANDLE NUM VS STR HERE-->

	<If>
		<If.Condition>
			<Ruby src="Script">
				<Script>
<![CDATA[
	temp1 = ["text", "ntext", "image", "xml", "timestamp", "rowversion", "sql_variant", "geography", "hierarchyid", "geometry", "datetimeoffset"].include?(textMetal.EvaluateToken.invoke("ColumnSqlType"));
	temp2 = ["varchar", "nvarchar", "varbinary"].include?(textMetal.EvaluateToken.invoke("ColumnSqlType"))
	temp3 = textMetal.EvaluateToken.invoke("ColumnSize") <= 0
	temp4 = !(temp1 || (temp2 && temp3))
	
	temp4
]]>
				</Script>
			</Ruby>
		</If.Condition>
		<If.True>
<![CDATA[

	CAST(
		(SELECT TOP 1
		CASE
			WHEN t.[StrategyId] IS NULL OR -- UNKNOWN
				t.[StrategyId] = 0 -- NONE
				THEN @${ColumnNamePascalCase}
			WHEN t.[StrategyId] = 1 -- SUBSTITUTION
				THEN d.[DictionaryValue]
			WHEN t.[StrategyId] = 2 -- SHUFFLING
				THEN [DataObfuscation].[fn_GetShuffle](ABS(CHECKSUM(@${ColumnNamePascalCase}, t.[HashSeed]) % t.[HashSize]), @${ColumnNamePascalCase})
			WHEN t.[StrategyId] = 3 -- VARIANCE
				THEN [DataObfuscation].[fn_GetVariance]((CHECKSUM(@${ColumnNamePascalCase}, t.[HashSeed]) % t.[HashSize]) / 100.0, @${ColumnNamePascalCase})
			WHEN t.[StrategyId] = 4 -- CIPHER
				THEN [DataObfuscation].[fn_GetCipher](CAST(ABS(CHECKSUM(@${ColumnNamePascalCase}, t.[HashSeed]) % t.[HashSize]) AS [nvarchar](MAX)), @${ColumnNamePascalCase})
			WHEN t.[StrategyId] = 5 -- NULLING
				THEN NULL
			WHEN t.[StrategyId] = 6 -- MASKING
				THEN [DataObfuscation].[fn_GetMask](0.25, @${ColumnNamePascalCase})
			ELSE -- ?default?
				NULL
		END
		FROM [DataObfuscation].[TableViewColumnConfig] t
		INNER JOIN [DataObfuscation].[Strategy] s ON s.[StrategyId] = t.[StrategyId]
		LEFT OUTER JOIN [DataObfuscation].[Dictionary] d ON d.[DictionaryId] = t.[DictionaryId]
			AND d.[DictionaryKey] = ABS(CHECKSUM(@${ColumnNamePascalCase}, t.[HashSeed]) % t.[HashSize])
		WHERE t.[CatalogName] = '${InitialCatalogName}' AND t.[SchemaName] = '${SchemaName}'
			AND t.[TableName] = '${TableName}' AND t.[ColumnName] = '${ColumnName}')
	AS [${ColumnSqlType}]${rb(`
	if ["varchar", "nvarchar", "varbinary"].include?(textMetal.EvaluateToken.invoke("ColumnSqlType"))
		"(" + (textMetal.EvaluateToken.invoke("ColumnSize") > 0 ? textMetal.EvaluateToken.invoke("ColumnSize").to_s() : "MAX") + ")"
	else
		""
	end
`)} ) as [${ColumnName}]]]>
		</If.True>
		
		<If.False>
<![CDATA[

	CAST( @${ColumnNamePascalCase} AS [${ColumnSqlType}]${rb(`
	if ["varchar", "nvarchar", "varbinary"].include?(textMetal.EvaluateToken.invoke("ColumnSqlType"))
		"(" + (textMetal.EvaluateToken.invoke("ColumnSize") > 0 ? textMetal.EvaluateToken.invoke("ColumnSize").to_s() : "MAX") + ")"
	else
		""
	end
`)} ) as [${ColumnName}]]]>
		</If.False>
	</If>


						<If>
							<If.Condition>
								<BinaryExpression operator="Ne">
									<BinaryExpression.LeftExpression>
										<Facet name="_LoopCount" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Facet name="_LoopIndex" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
<![CDATA[,
]]>
							</If.True>
						</If>
						
						<OutputScope name="Obfucation_TableViewConfig_Baseline.g.sql" append="true">
<![CDATA[INSERT INTO [DataObfuscation].[TableViewColumnConfig] VALUES ('${InitialCatalogName}', '${SchemaName}', '${TableName}', '${ColumnName}', 0, 1001, 5381, 120);
]]>
						</OutputScope>
					</ForEach.Body>
				</ForEach>
<![CDATA[
GO


CREATE VIEW [${SchemaName}].[${TableName}]
AS
	SELECT 
	z.*
	FROM [${DataObfuscationTargetServerName}].[${InitialCatalogName}].[${SchemaName}].[${TableName}] t
	CROSS APPLY [${DataObfuscationProxyCatalogName}].[${SchemaName}].[iltv_fn_${TableName}]
	(
]]>
				<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
					<ForEach.Sort>
						<Ascending>
							<Ascending.Compare>
								<Facet name="ColumnOrdinal" />
							</Ascending.Compare>
						</Ascending>
					</ForEach.Sort>
					<ForEach.Body>
					
<![CDATA[		t.[${ColumnName}]]]>
						<If>
							<If.Condition>
								<BinaryExpression operator="Ne">
									<BinaryExpression.LeftExpression>
										<Facet name="_LoopCount" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Facet name="_LoopIndex" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
<![CDATA[,
]]>
							</If.True>
						</If>
						</ForEach.Body>
				</ForEach>
<![CDATA[
	) z

GO 
]]>
				</ForEach.Body>
			</ForEach>

		</ForEach.Body>
	</ForEach>
		
	</OutputScope>
	
</Template>