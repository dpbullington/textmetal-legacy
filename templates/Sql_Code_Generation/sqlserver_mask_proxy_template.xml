<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v5.0.0">

	<OutputScope name="DM.g.sql">

<![CDATA[

USE [master]
GO


IF EXISTS (SELECT * FROM sysdatabases WHERE name = '${DataObfuscationProxyCatalogName}')
BEGIN

	ALTER DATABASE [${DataObfuscationProxyCatalogName}] SET SINGLE_USER WITH ROLLBACK IMMEDIATE
	
	DROP DATABASE [${DataObfuscationProxyCatalogName}]
	
END
GO


CREATE DATABASE [${DataObfuscationProxyCatalogName}]
GO


USE [${DataObfuscationProxyCatalogName}]
GO


CREATE TABLE [dbo].[DataObfuscationStoredProcedureParameterConfig]
(
	[DataObfuscationStoredProcedureParameterConfigId] [int] IDENTITY(1,1) NOT NULL,

	[CatalogName] [nvarchar](64) NOT NULL, -- skimping here to prevent index warning exceed 900 bytes
	[SchemaName] [nvarchar](128) NOT NULL,
	[ProcedureName] [nvarchar](128) NOT NULL,
	[ParameterName] [nvarchar](128) NOT NULL, -- output paramters only
	
	[IsMasked] [bit] NOT NULL,
	[MaskType] [int] NULL,

	CONSTRAINT [pk_DataObfuscationStoredProcedureParameterConfig] PRIMARY KEY
	(
		[DataObfuscationStoredProcedureParameterConfigId]
	),
	
	CONSTRAINT [uk_DataObfuscationStoredProcedureParameterConfig] UNIQUE
	(
		[CatalogName],
		[SchemaName],
		[ProcedureName],
		[ParameterName]
	)
)	
GO


CREATE TABLE [dbo].[DataObfuscationStoredProcedureColumnConfig]
(
	[DataObfuscationStoredProcedureColumnConfigId] [int] IDENTITY(1,1) NOT NULL,

	[CatalogName] [nvarchar](64) NOT NULL, -- skimping here to prevent index warning exceed 900 bytes
	[SchemaName] [nvarchar](128) NOT NULL,
	[ProcedureName] [nvarchar](128) NOT NULL,
	[ColumnName] [nvarchar](128) NOT NULL, -- output resultset columns only
	
	[IsMasked] [bit] NOT NULL,
	[MaskType] [int] NULL,

	CONSTRAINT [pk_DataObfuscationStoredProcedureColumnConfig] PRIMARY KEY
	(
		[DataObfuscationStoredProcedureColumnConfigId]
	),
	
	CONSTRAINT [uk_DataObfuscationStoredProcedureColumnConfig] UNIQUE
	(
		[CatalogName],
		[SchemaName],
		[ProcedureName],
		[ColumnName]
	)
)	
GO


CREATE TABLE [dbo].[DataObfuscationTableViewColumnConfig]
(
	[DataObfuscationTableViewColumnConfigId] [int] IDENTITY(1,1) NOT NULL,

	[CatalogName] [nvarchar](64) NOT NULL, -- skimping here to prevent index warning exceed 900 bytes
	[SchemaName] [nvarchar](128) NOT NULL,
	[TableName] [nvarchar](128) NOT NULL,
	[ColumnName] [nvarchar](128) NOT NULL,
	
	[IsMasked] [bit] NOT NULL,
	[MaskType] [int] NULL,

	CONSTRAINT [pk_DataObfuscationTableViewColumnConfig] PRIMARY KEY
	(
		[DataObfuscationTableViewColumnConfigId]
	),
	
	CONSTRAINT [uk_DataObfuscationTableViewColumnConfig] UNIQUE
	(
		[CatalogName],
		[SchemaName],
		[TableName],
		[ColumnName]
	)
)	
GO


CREATE FUNCTION [dbo].[GetObfuscatedTableViewColumnData]
(
	@CatalogName as [nvarchar](64),
	@SchemaName as [nvarchar](128),
	@TableName as [nvarchar](128),
	@ColumnName as [nvarchar](128),
	@Value as [nvarchar](4000)
)
RETURNS [nvarchar](4000)
AS
BEGIN

	DECLARE @count [int]
	
	SELECT @count = COUNT(t.[DataObfuscationTableViewColumnConfigId]) FROM [dbo].[DataObfuscationTableViewColumnConfig] t
	WHERE
	t.[CatalogName] = @CatalogName AND
	t.[SchemaName] = @SchemaName AND
	t.[TableName] = @TableName AND
	t.[ColumnName] = @ColumnName AND
	t.[IsMasked] = 1;

	SET @Value = CASE
		WHEN @count = 1 THEN UPPER(REVERSE(@Value))
		ELSE @Value
	END

	RETURN @Value
	
END
GO


]]>

	<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter>
		</ForEach.Filter>
		
		<ForEach.Body>
		
<![CDATA[

CREATE SCHEMA [${SchemaName}]
GO

]]>

			<ForEach in="Tables" var-ct="_LoopCount" var-ix="_LoopIndex">
				<ForEach.Filter>
				</ForEach.Filter>
				<ForEach.Body>
<![CDATA[

CREATE VIEW [${SchemaName}].[${TableName}]
AS

	SELECT
]]>
				<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
					<ForEach.Sort>
						<Ascending>
							<Ascending.Compare>
								<Facet name="ColumnOrdinal" />
							</Ascending.Compare>
						</Ascending>
					</ForEach.Sort>
					<ForEach.Body>
					
<![CDATA[${rb(`
	if ["varchar", "nvarchar"].include?(textMetal.EvaluateToken.invoke("ColumnSqlType"))
		"	[dbo].[GetObfuscatedTableViewColumnData]('" +
		textMetal.EvaluateToken.invoke("InitialCatalogName") +
		"', '" +
		textMetal.EvaluateToken.invoke("SchemaName") +
		"', '" +
		textMetal.EvaluateToken.invoke("TableName") +
		"', '" +
		textMetal.EvaluateToken.invoke("ColumnName") +
		"', t.[" +
		textMetal.EvaluateToken.invoke("ColumnName") +
		"]) as [" +
		textMetal.EvaluateToken.invoke("ColumnName") +
		"]"
	else
		"	t.[" +	textMetal.EvaluateToken.invoke("ColumnName") + "]"
	end
`)}]]>
							
						<If>
							<If.Condition>
								<BinaryExpression operator="Ne">
									<BinaryExpression.LeftExpression>
										<Facet name="_LoopCount" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Facet name="_LoopIndex" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
<![CDATA[,
]]>
							</If.True>
						</If>
					</ForEach.Body>
				</ForEach>
<![CDATA[
	FROM [${InitialCatalogName}].[${SchemaName}].[${TableName}] t

GO
]]>
					
				</ForEach.Body>
			</ForEach>

		</ForEach.Body>
	</ForEach>
	</OutputScope>
</Template>