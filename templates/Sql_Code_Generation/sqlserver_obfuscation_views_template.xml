<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v5.0.0">

	<InvokeSourceStrategy src="${ObfuscationConfigFilePath}" alloc="true" var="obfuCfg" aqt-name="TextMetal.Framework.SourceModel.Primative.JsonSourceStrategy, TextMetal.Framework.SourceModel" />

	<OutputScope name="${ObfuscationConfigFilePath}.g" append="false">
<![CDATA[
{
	"MaskFactor": 0.50,
	
	"NumericSign":
	{
		"HashMultiplier": 33, 
		"HashBucketSize": 1000000,
		"HashSeed": 5381
	},
	
	"TablesViews": [
]]>
	</OutputScope>

	<OutputScope name="Obfucation_Views.g.sql">

<![CDATA[

SET NOCOUNT ON
GO


---------------------------------------------------------------------------------------------------------------------------------------------------------------
--	STRATEGY		DATA TYPE	DESCRIPTION
---------------------------------------------------------------------------------------------------------------------------------------------------------------
--	none			any			Returns un-obfuscated, original value.
--	substitution	string		Returns an alternate value using a hashed lookup into a dictionary.
--	shuffling		string		Returns an alternate value using a hashed shuffle of alphanumeric characters (while preserving other characters).
--	variance		numeric		Returns an alternate value within +/- (x%) of the original value.
--					temporal	Returns an alternate value within +/- (x%:365.25d) of the original value.
--	ciphering		string		Returns an alternate value that is a binary encryption of the original value.
--	defaulting		any			Returns an alternate value that is always NULL.
--	masking			string		Returns an alternate value that is a +/- (%) mask of the original value.
---------------------------------------------------------------------------------------------------------------------------------------------------------------


USE [master]
GO


IF EXISTS (SELECT * FROM sysdatabases WHERE name = '${DataObfuscationProxyCatalogName}')
BEGIN

	ALTER DATABASE [${DataObfuscationProxyCatalogName}] SET SINGLE_USER WITH ROLLBACK IMMEDIATE
	
	DROP DATABASE [${DataObfuscationProxyCatalogName}]
	
END
GO


CREATE DATABASE [${DataObfuscationProxyCatalogName}]
GO


USE [${DataObfuscationProxyCatalogName}]
GO


CREATE SCHEMA [DataObfuscation]
GO


-- template for custom dictionary
CREATE TABLE [DataObfuscation].[CrayonColorDictionary]
(
	[CrayonColorDictionaryKey] [int] IDENTITY(0,1) NOT NULL,
	[CrayonColorDictionaryValue] [nvarchar](255) NOT NULL,
	
	CONSTRAINT [pk_CrayonColorDictionary] PRIMARY KEY
	(
		[CrayonColorDictionaryKey]
	),
	
	-- optional
	CONSTRAINT [uk_CrayonColorDictionary] UNIQUE
	(
		[CrayonColorDictionaryValue]
	)
)	
GO


INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Transparent')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Almond')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Antique Brass')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Apricot')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Aquamarine')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Asparagus')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Atomic Tangerine')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Banana Mania')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Beaver')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Bittersweet')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Black')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Blue')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Blue Bell')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Blue Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Blue Violet')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Blush')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Brick Red')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Brown')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Burnt Orange')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Burnt Sienna')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Cadet Blue')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Canary')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Caribbean Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Carnation Pink')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Cerise')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Cerulean')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Chestnut')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Copper')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Cornflower')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Cotton Candy')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Dandelion')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Denim')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Desert Sand')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Eggplant')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Electric Lime')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Fern')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Forest Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Fuchsia')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Fuzzy Wuzzy Brown')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Gold')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Goldenrod')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Granny Smith Apple')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Gray')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Green Yellow')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Hot Magenta')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Inch Worm')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Indigo')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Jazzberry Jam')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Jungle Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Laser Lemon')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Lavender')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Macaroni and Cheese')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Magenta')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Mahogany')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Manatee')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Mango Tango')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Maroon')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Mauvelous')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Melon')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Midnight Blue')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Mountain Meadow')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Navy Blue')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Neon Carrot')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Olive Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Orange')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Orchid')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Outer Space')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Outrageous Orange')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Pacific Blue')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Peach')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Periwinkle')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Piggy Pink')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Pine Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Pink Flamingo')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Pink Sherbet')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Plum')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Purple Heart')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Purple Mountains’ Majesty')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Purple Pizzazz')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Radical Red')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Raw Sienna')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Razzle Dazzle Rose')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Razzmatazz')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Red')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Red Orange')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Red Violet')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Robin Egg Blue')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Royal Purple')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Salmon')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Scarlet')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Screamin Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Sea Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Sepia')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Shadow')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Shamrock')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Shocking Pink')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Silver')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Sky Blue')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Spring Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Sunglow')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Sunset Orange')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Tan')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Tickle Me Pink')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Timberwolf')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Tropical Rain Forest')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Tumbleweed')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Turquoise Blue')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Unmellow Yellow')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Violet (Purple)')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Violet Red')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Vivid Tangerine')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Vivid Violet')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('White')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Wild Blue Yonder')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Wild Strawberry')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Wild Watermelon')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Wisteria')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Yellow')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Yellow Green')
INSERT INTO [DataObfuscation].[CrayonColorDictionary] VALUES ('Yellow Orange')
GO


CREATE ASSEMBLY [TextMetal.Common.SqlServerClr]
AUTHORIZATION [dbo]
FROM
]]>
		<Include name="${argument_basedir}\TextMetal.Common.SqlServerClr.dll.txt" />
<![CDATA[WITH PERMISSION_SET = SAFE
GO


CREATE FUNCTION [DataObfuscation].[fn_GetCipher]
(
	@sharedSecret [nvarchar](MAX),
	@value [sql_variant]
)
RETURNS [sql_variant]
AS EXTERNAL NAME [TextMetal.Common.SqlServerClr].[TextMetal.Common.SqlServerClr.ScalarFunctions].[fn_GetCipher]
GO


CREATE FUNCTION [DataObfuscation].[fn_GetDefault]
(
	@isNullable [bit],
	@sqlType [nvarchar](64)
)
RETURNS [sql_variant]
AS EXTERNAL NAME [TextMetal.Common.SqlServerClr].[TextMetal.Common.SqlServerClr.ScalarFunctions].[fn_GetDefault]
GO


CREATE FUNCTION [DataObfuscation].[fn_GetHash]
(
	@hashMultiplier [bigint],
	@hashBucketSize [bigint],
	@hashSeed [bigint],
	@value [nvarchar](MAX)
)
RETURNS [int]
AS EXTERNAL NAME [TextMetal.Common.SqlServerClr].[TextMetal.Common.SqlServerClr.ScalarFunctions].[fn_GetHash]
GO


CREATE FUNCTION [DataObfuscation].[fn_GetMask]
(
	@maskFactor as [float],
	@value [sql_variant]
)
RETURNS [sql_variant]
AS EXTERNAL NAME [TextMetal.Common.SqlServerClr].[TextMetal.Common.SqlServerClr.ScalarFunctions].[fn_GetMask]
GO


CREATE FUNCTION [DataObfuscation].[fn_GetShuffle]
(
	@randomSeed [bigint],
	@value [sql_variant]
)
RETURNS [sql_variant]
AS EXTERNAL NAME [TextMetal.Common.SqlServerClr].[TextMetal.Common.SqlServerClr.ScalarFunctions].[fn_GetShuffle]
GO


CREATE FUNCTION [DataObfuscation].[fn_GetVariance]
(
	@varianceFactor as [float],
	@value [sql_variant]
)
RETURNS [sql_variant]
AS EXTERNAL NAME [TextMetal.Common.SqlServerClr].[TextMetal.Common.SqlServerClr.ScalarFunctions].[fn_GetVariance]
GO
]]>

	<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter>
			<Ruby src="Script">
				<Script>!["db_accessadmin", "db_backupoperator", "db_datareader",
				"db_datawriter", "db_ddladmin", "db_denydatareader", "db_denydatawriter",
				"db_owner", "db_securityadmin", "sys",
				"INFORMATION_SCHEMA", "guest"].include?(textMetal.EvaluateToken.invoke("SchemaName"));</Script>
			</Ruby>	
		</ForEach.Filter>
		
		<ForEach.Body>
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="SchemaName" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="dbo" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

CREATE SCHEMA [${SchemaName}]
GO
]]>
				</If.True>
				<If.False>
<![CDATA[

-- DO NOT CREATE SCHEMA [${SchemaName}]
]]>
				</If.False>
			</If>

			<ForEach in="Tables" var-ct="_LoopCount" var-ix="_LoopIndex">
				<ForEach.Filter>
				</ForEach.Filter>
				<ForEach.Body>
<![CDATA[

CREATE FUNCTION [${SchemaName}].[iltv_fn_${TableName}]
(
]]>
				<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
					<ForEach.Sort>
						<Ascending>
							<Ascending.Compare>
								<Facet name="ColumnOrdinal" />
							</Ascending.Compare>
						</Ascending>
					</ForEach.Sort>
					<ForEach.Body>
					
<![CDATA[	@${ColumnNamePascalCase} [${ColumnSqlType}]${rb(`
	if ["binary", "char", "float", "nchar", "nvarchar", "varbinary", "varchar"].include?(textMetal.EvaluateToken.invoke("ColumnSqlType"))
		"(" + (textMetal.EvaluateToken.invoke("ColumnSize") > 0 ? textMetal.EvaluateToken.invoke("ColumnSize").to_s() : "MAX") + ")"
	elsif ["decimal", "numeric"].include?(textMetal.EvaluateToken.invoke("ColumnSqlType"))
		"(" + textMetal.EvaluateToken.invoke("ColumnPrecision").to_s() + ", " + textMetal.EvaluateToken.invoke("ColumnScale").to_s() + ")"
	else
		""
	end
`)}]]>
						<If>
							<If.Condition>
								<BinaryExpression operator="Ne">
									<BinaryExpression.LeftExpression>
										<Facet name="_LoopCount" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Facet name="_LoopIndex" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
<![CDATA[,
]]>
							</If.True>
						</If>
					</ForEach.Body>
				</ForEach>
<![CDATA[
)
RETURNS TABLE 
RETURN
	SELECT
]]>
				<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
					<ForEach.Sort>
						<Ascending>
							<Ascending.Compare>
								<Facet name="ColumnOrdinal" />
							</Ascending.Compare>
						</Ascending>
					</ForEach.Sort>
					<ForEach.Body>

	<If>
		<If.Condition>
			<Ruby src="Script">
				<Script>
<![CDATA[
	temp1 = ["text", "ntext", "image", "xml", "timestamp", "rowversion", "sql_variant", "geography", "hierarchyid", "geometry", "datetimeoffset"].include?(textMetal.EvaluateToken.invoke("ColumnSqlType"));
	temp2 = ["varchar", "nvarchar", "varbinary"].include?(textMetal.EvaluateToken.invoke("ColumnSqlType"))
	temp3 = textMetal.EvaluateToken.invoke("ColumnSize") <= 0
	temp4 = !(temp1 || (temp2 && temp3))
	
	temp4
]]>
				</Script>
			</Ruby>
		</If.Condition>
		<If.True>
<![CDATA[	CAST( ${rb(`
	#textMetal.DebuggerBreakpoint.invoke()
	obfuCfg = textMetal.EvaluateToken.invoke("obfuCfg")
	tblCfg = obfuCfg["TablesViews".to_clr_string()].select{|obj|
		obj["CatalogName".to_clr_string()] == textMetal.EvaluateToken.invoke("InitialCatalogName") &&
		obj["SchemaName".to_clr_string()] == textMetal.EvaluateToken.invoke("SchemaName") &&
		obj["TableName".to_clr_string()] == textMetal.EvaluateToken.invoke("TableName") &&
		obj["ColumnName".to_clr_string()] == textMetal.EvaluateToken.invoke("ColumnName")
		}.first()
		
	numSgn = obfuCfg["NumericSign".to_clr_string()]
				
	if tblCfg.nil?
		"/* EXCLUDE_NO_CONFIG */ @" + textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + ""
	else
		strategy = tblCfg["StrategyTag".to_clr_string()]
		
		case strategy.to_s()			
			when "substitution"
				dctCfg = tblCfg["Dictionary".to_clr_string()]
				
				"/* SUBSTITUTION */ (SELECT TOP 1 z.[" +
					dctCfg["ValueColumnName".to_clr_string()].to_s() + "] FROM [" +
					dctCfg["CatalogName".to_clr_string()].to_s() + "].[" +
					dctCfg["SchemaName".to_clr_string()].to_s() + "].[" +
					dctCfg["TableName".to_clr_string()].to_s() + "] z WHERE z.[" +
					dctCfg["KeyColumnName".to_clr_string()].to_s() + "] = ([DataObfuscation].[fn_GetHash](" +
					tblCfg["HashMultiplier".to_clr_string()].to_s() + ", " +
					tblCfg["HashBucketSize".to_clr_string()].to_s() + ", " +
					tblCfg["HashSeed".to_clr_string()].to_s() + ", @" + textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + ")))"
			when "shuffling"
				"/* SHUFFLING */ ([DataObfuscation].[fn_GetShuffle]([DataObfuscation].[fn_GetHash](" +
					tblCfg["HashMultiplier".to_clr_string()].to_s() + ", " +
					tblCfg["HashBucketSize".to_clr_string()].to_s() + ", " +
					tblCfg["HashSeed".to_clr_string()].to_s() + ", @" + textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + "), @" +
					textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + "))"
			when "variance"
				"/* VARIANCE */ ([DataObfuscation].[fn_GetVariance]((([DataObfuscation].[fn_GetHash](" +
					tblCfg["HashMultiplier".to_clr_string()].to_s() + ", " +
					tblCfg["HashBucketSize".to_clr_string()].to_s() + ", " +
					tblCfg["HashSeed".to_clr_string()].to_s() + ", CAST(@" + textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + " AS [nvarchar](MAX))) * CASE WHEN ([DataObfuscation].[fn_GetHash](" +
					numSgn["HashMultiplier".to_clr_string()].to_s() + ", " +
					numSgn["HashBucketSize".to_clr_string()].to_s() + ", " +
					numSgn["HashSeed".to_clr_string()].to_s() + ", CAST(@" + textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + " AS [nvarchar](MAX))) % 2) = 0 THEN 1 ELSE -1 END) / 100.0), @" + textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + "))"
			when "ciphering"
				"/* CIPHERING */ (CASE WHEN @" + textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + " IS NULL OR LEN(@" + textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + ") = 0 THEN @" + textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + " ELSE " +
					"[DataObfuscation].[fn_GetCipher]([DataObfuscation].[fn_GetHash](" +
					tblCfg["HashMultiplier".to_clr_string()].to_s() + ", " +
					tblCfg["HashBucketSize".to_clr_string()].to_s() + ", " +
					tblCfg["HashSeed".to_clr_string()].to_s() + ", @" + textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + "), @" +
					textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + ") END)"
			when "defaulting"
				"/* DEFAULTING */ ([DataObfuscation].[fn_GetDefault](" + (textMetal.EvaluateToken.invoke("ColumnNullable") ? "1" : "0") + ", '" + textMetal.EvaluateToken.invoke("ColumnSqlType") + "'))"
			when "masking"
				maskFactor = obfuCfg["MaskFactor".to_clr_string()]
				
				"/* MASKING */ (CASE WHEN @" + textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + " IS NULL OR LEN(@" + textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + ") = 0 THEN @" + textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + " ELSE " +
					"[DataObfuscation].[fn_GetMask](" + maskFactor.to_s() + ", @" +
					textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + ") END)"
			else #none
				"/* NONE */ (@" + textMetal.EvaluateToken.invoke("ColumnNamePascalCase") + ")"
		end
	end
	`)} AS ${rb(`
	"[" + textMetal.EvaluateToken.invoke("ColumnSqlType") + "]" +	
	if ["binary", "char", "float", "nchar", "nvarchar", "varbinary", "varchar"].include?(textMetal.EvaluateToken.invoke("ColumnSqlType"))
		"(" + (textMetal.EvaluateToken.invoke("ColumnSize") > 0 ? textMetal.EvaluateToken.invoke("ColumnSize").to_s() : "MAX") + ")"
	elsif ["decimal", "numeric"].include?(textMetal.EvaluateToken.invoke("ColumnSqlType"))
		"(" + textMetal.EvaluateToken.invoke("ColumnPrecision").to_s() + ", " + textMetal.EvaluateToken.invoke("ColumnScale").to_s() + ")"
	else
		""
	end + " ) as [" + textMetal.EvaluateToken.invoke("ColumnName") + "]"
`)}]]>
		</If.True>
		
		<If.False>
<![CDATA[	CAST( /* EXCLUDE_BY_TYPE */ @${ColumnNamePascalCase} AS [${ColumnSqlType}]${rb(`
	if ["binary", "char", "float", "nchar", "nvarchar", "varbinary", "varchar"].include?(textMetal.EvaluateToken.invoke("ColumnSqlType"))
		"(" + (textMetal.EvaluateToken.invoke("ColumnSize") > 0 ? textMetal.EvaluateToken.invoke("ColumnSize").to_s() : "MAX") + ")"
	elsif ["decimal", "numeric"].include?(textMetal.EvaluateToken.invoke("ColumnSqlType"))
		"(" + textMetal.EvaluateToken.invoke("ColumnPrecision").to_s() + ", " + textMetal.EvaluateToken.invoke("ColumnScale").to_s() + ")"
	else
		""
	end
`)} ) as [${ColumnName}]]]>
		</If.False>
	</If>


						<If>
							<If.Condition>
								<BinaryExpression operator="Ne">
									<BinaryExpression.LeftExpression>
										<Facet name="_LoopCount" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Facet name="_LoopIndex" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
<![CDATA[,
]]>
							</If.True>
						</If>
					</ForEach.Body>
				</ForEach>
<![CDATA[
GO


CREATE VIEW [${SchemaName}].[${TableName}]
AS
	SELECT 
	z.*
	FROM [${InitialCatalogName}].[${SchemaName}].[${TableName}] t
	CROSS APPLY [${DataObfuscationProxyCatalogName}].[${SchemaName}].[iltv_fn_${TableName}]
	(
]]>
				<ForEach in="Columns" var-ct="_LoopCount" var-ix="_LoopIndex">
					<ForEach.Sort>
						<Ascending>
							<Ascending.Compare>
								<Facet name="ColumnOrdinal" />
							</Ascending.Compare>
						</Ascending>
					</ForEach.Sort>
					<ForEach.Body>
					
<![CDATA[		t.[${ColumnName}]]]>
						<If>
							<If.Condition>
								<BinaryExpression operator="Ne">
									<BinaryExpression.LeftExpression>
										<Facet name="_LoopCount" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Facet name="_LoopIndex" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
<![CDATA[,
]]>
							</If.True>
						</If>
						
						
						
						
						<OutputScope name="${ObfuscationConfigFilePath}.g" append="true">
<![CDATA[
	{
		"CatalogName": "${InitialCatalogName}",
		"SchemaName": "${SchemaName}",
		"TableName": "${TableName}",
		"ColumnName": "${ColumnName}",
		"StrategyTag": 0,
		"Dictionary":
		{
			"CatalogName": "${InitialCatalogName}",
			"SchemaName": "DataObfuscation",
			"TableName": "CrayonColorDictionary",
			"KeyColumnName": "CrayonColorDictionaryKey",
			"ValueColumnName": "CrayonColorDictionaryValue"
		},
		"HashMultiplier": 33,
		"HashBucketSize": 120,
		"HashSeed": 5381
	},
]]>
						</OutputScope>
						
						
						
						
						
						</ForEach.Body>
				</ForEach>
<![CDATA[
	) z

GO 
]]>
				</ForEach.Body>
			</ForEach>

		</ForEach.Body>
	</ForEach>
		
	</OutputScope>
	
	<OutputScope name="${ObfuscationConfigFilePath}.g" append="true">
<![CDATA[	]
}
]]>
	</OutputScope>
	
</Template>