<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2014 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v5.0.0">
	
	<Alloc token="i" />
	<OutputScope name="generics.g.cs">
		<For var-ix="LoopIndex">
			<For.Initializer>
				<!--<DebuggerBreakpoint />-->
			</For.Initializer>
			<For.Condition>
				<BinaryExpression operator="Lt">
					<BinaryExpression.LeftExpression>
						<Facet name="LoopIndex" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Value type="System.Int32" data="16" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</For.Condition>
			<For.Iterator>
				<Value type="System.Boolean" data="true" />
			</For.Iterator>
			<For.Body>
			
<![CDATA[
public static ActivatorDependencyResolution OfType<TObject${rb(`
temp = ""
for i in 0..(self.LoopIndex)
	temp += ", TParameter" + i.ToString()
end
temp
`)}>()
{
	Type actualType;
${rb(`
temp = ""
for i in 0..(self.LoopIndex)
	temp += "\tType parameterType" + i.ToString() + ";\r\n"
end
temp
`)}
	actualType = typeof(TObject);
${rb(`
temp = ""
for i in 0..(self.LoopIndex)
	temp += "\tparameterType" + i.ToString() + " = typeof(TParameter" + i.ToString() + ");\r\n"
end
temp
`)}
	return new ActivatorDependencyResolution(actualType, new Type[] { ${rb(`
temp = ""
for i in 0..(self.LoopIndex)
	temp += (i != 0 ? ", " : "") + "parameterType" + i.ToString()
end
temp
`)} });
}
]]>
			</For.Body>
		</For>
	</OutputScope>
	<Free token="i" />
</Template>