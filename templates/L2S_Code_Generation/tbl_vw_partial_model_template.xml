<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2015 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v6.0.0">
	<ForEach in="Schemas" var-ct="_LoopCount" var-ix="_LoopIndex">
		<ForEach.Filter></ForEach.Filter>
		<ForEach.Body>

			<ForEach in="Tables" var-ct="_LoopCount" var-ix="_LoopIndex">
				<ForEach.Filter></ForEach.Filter>
				<ForEach.Body>

					<OutputScope name="${ModuleName}\.partial\${TableNameSqlMetalSingularPascalCase}.cs">
						<Include name="include_gen_cprt_message_no_warn.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
using System.Linq;

using LeastViable.Data.Models;
using LeastViable.Data.Impl.MicrosoftLinq;
]]>
						<If>
							<If.Condition>
								<UnaryExpression operator="IsDef">
									<UnaryExpression.TheExpression>
										<Aspect name="ClrUsingNamespaces" />
									</UnaryExpression.TheExpression>
								</UnaryExpression>
							</If.Condition>
							<If.True>
								<ForEach in="ClrUsingNamespaces" var-ct="_LoopCount" var-ix="_LoopIndex" var-item="_LoopItem">
									<ForEach.Body>
										<![CDATA[using ${_LoopItem};
]]>
									</ForEach.Body>
								</ForEach>
							</If.True>
						</If>
						<![CDATA[
namespace ${ClrNamespace}
{
	public partial class ${TableNameSqlMetalSingularPascalCase}
	{
		#region Methods/Operators

		public static bool Exists(${TableNameSqlMetalSingularPascalCase} ${TableNameSqlMetalSingularCamelCase})
		{
			return false; // TODO - remove this and uncomment the above code fragment

			/*IEnumerable<${TableNameSqlMetalSingularPascalCase}> ${TableNameSqlMetalPluralCamelCase};
			IModelQuery modelQuery;

			if ((object)${TableNameSqlMetalSingularCamelCase} == null)
				throw new ArgumentNullException("${TableNameSqlMetalSingularCamelCase}");

			modelQuery = new LinqTableQuery<${TableNameSqlMetalPascalCase}>(z =>
								(z.TODO_UNIQUE_VALUE_1 == ${TableNameSqlMetalSingularCamelCase}.TODO_UNIQUE_VALUE_1) &&
									((object)${TableNameSqlMetalSingularCamelCase}.${TableNameSqlMetalSingularPascalCase}Id == null ||
										z.${TableNameSqlMetalSingularPascalCase}Id != ${TableNameSqlMetalSingularCamelCase}.${TableNameSqlMetalSingularPascalCase}Id));

			${TableNameSqlMetalPluralCamelCase} =
				Stuff.Get<IThisAppRepository>("").Find<${TableNameSqlMetalSingularPascalCase}>(modelQuery);

			return ${TableNameSqlMetalPluralCamelCase}.Count() > 0;*/
		}

		public override void Mark()
		{
			DateTime now;

			now = DateTime.UtcNow;

			this.CreationTimestamp = this.CreationTimestamp ?? now;
			this.ModificationTimestamp = !this.IsNew ? now : this.CreationTimestamp;
			this.CreationUserId = ((this.IsNew ? Current.Instance.UserId : this.CreationUserId) ?? this.CreationUserId) ?? User.SYSTEM_USER_ID;
			this.ModificationUserId = ((!this.IsNew ? Current.Instance.UserId : this.CreationUserId) ?? this.ModificationUserId) ?? User.SYSTEM_USER_ID;
			this.LogicalDelete = this.LogicalDelete ?? false;

			// TODO - remove this and uncomment the below code fragment if needed
			//this.TODO_PARENT_ID = this.TODO_PARENT_ID ?? (long)Current.Instance.TODO_PARENT_ID;
		}

		public override IEnumerable<Message> Validate()
		{
			bool exists;
			List<Message> messages;

			messages = new List<Message>();

			// TODO - remove this and uncomment the below code fragment if needed
			/*if (DataType.Instance.IsNullOrWhiteSpace(this.TODO_REQUIRED_VALUE_1))
				messages.Add(new Message("", "TODO_REQUIRED_VALUE_1 is required.", Severity.Error));

			if (messages.Count == 0)
			{
				exists = Exists(this);

				if (exists)
					messages.Add(new Message("", "${TableNameSqlMetalSingularPascalCase} must be unique.", Severity.Error));
			}*/

			return messages.ToArray();
		}

		#endregion
	}
}
]]>
					</OutputScope>
				</ForEach.Body>
			</ForEach>

		</ForEach.Body>
	</ForEach>

</Template>
