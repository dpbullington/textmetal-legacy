<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LeastViable.Common</name>
    </assembly>
    <members>
        <member name="T:LeastViable.Common.Fascades.AdoNet.UoW.ExtensionMethods">
            <summary>
            Provides extension methods for unit of work instances.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.ExtensionMethods.CreateParameter(LeastViable.Common.Fascades.AdoNet.UoW.IUnitOfWork,System.Data.ParameterDirection,System.Data.DbType,System.Int32,System.Byte,System.Byte,System.Boolean,System.String,System.Object)">
            <summary>
            An extension method to create a new data parameter from the data source.
            </summary>
            <param name="unitOfWork"> The target unit of work. </param>
            <param name="parameterDirection"> Specifies the parameter direction. </param>
            <param name="dbType"> Specifies the parameter provider-(in)dependent type. </param>
            <param name="parameterSize"> Specifies the parameter size. </param>
            <param name="parameterPrecision"> Specifies the parameter precision. </param>
            <param name="parameterScale"> Specifies the parameter scale. </param>
            <param name="parameterNullable"> Specifies the parameter nullable-ness. </param>
            <param name="parameterName"> Specifies the parameter name. </param>
            <param name="parameterValue"> Specifies the parameter value. </param>
            <returns> The data parameter with the specified properties set. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.ExtensionMethods.ExecuteDictionary(LeastViable.Common.Fascades.AdoNet.UoW.IUnitOfWork,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Int32@)">
            <summary>
            An extension method to execute a dictionary query operation against a target unit of work.
            This overload is for backwards compatability.
            DO NOT DISPOSE OF UNIT OF WORK CONTEXT - UP TO THE CALLER.
            </summary>
            <param name="unitOfWork"> The target unit of work. </param>
            <param name="commandType"> The type of the command. </param>
            <param name="commandText"> The SQL text or stored procedure name. </param>
            <param name="commandParameters"> The parameters to use during the operation. </param>
            <param name="recordsAffected"> The output count of records affected. </param>
            <returns> A list of dictionary instances, containing key/value pairs of data. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.ExtensionMethods.ExecuteDictionary(LeastViable.Common.Fascades.AdoNet.UoW.IUnitOfWork,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Action{System.Int32})">
            <summary>
            An extension method to execute a dictionary query operation against a target unit of work.
            DO NOT DISPOSE OF UNIT OF WORK CONTEXT - UP TO THE CALLER.
            </summary>
            <param name="unitOfWork"> The target unit of work. </param>
            <param name="commandType"> The type of the command. </param>
            <param name="commandText"> The SQL text or stored procedure name. </param>
            <param name="commandParameters"> The parameters to use during the operation. </param>
            <param name="recordsAffectedCallback"> Executed when the output count of records affected is available to return (post enumeration). </param>
            <returns> An enumerable of dictionary instances, containing key/value pairs of data. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.ExtensionMethods.ExecuteSchema(LeastViable.Common.Fascades.AdoNet.UoW.IUnitOfWork,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Int32@)">
            <summary>
            An extension method to execute a schema query operation against a target unit of work.
            DO NOT DISPOSE OF UNIT OF WORK CONTEXT - UP TO THE CALLER.
            </summary>
            <param name="unitOfWork"> The target unit of work. </param>
            <param name="commandType"> The type of the command. </param>
            <param name="commandText"> The SQL text or stored procedure name. </param>
            <param name="commandParameters"> The parameters to use during the operation. </param>
            <param name="recordsAffected"> The output count of records affected. </param>
            <returns> A list of dictionary instances, containing key/value pairs of data. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.ExtensionMethods.ExecuteSchema(LeastViable.Common.Fascades.AdoNet.UoW.IUnitOfWork,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Action{System.Int32})">
            <summary>
            An extension method to execute a schema query operation against a target unit of work.
            DO NOT DISPOSE OF UNIT OF WORK CONTEXT - UP TO THE CALLER.
            </summary>
            <param name="unitOfWork"> The target unit of work. </param>
            <param name="commandType"> The type of the command. </param>
            <param name="commandText"> The SQL text or stored procedure name. </param>
            <param name="commandParameters"> The parameters to use during the operation. </param>
            <param name="recordsAffectedCallback"> Executed when the output count of records affected is available to return (post enumeration). </param>
            <returns> An enumerable of dictionary instances, containing key/value pairs of schema data. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.IAdoNetFascade.CreateParameter(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.ParameterDirection,System.Data.DbType,System.Int32,System.Byte,System.Byte,System.Boolean,System.String,System.Object)">
            <summary>
            Create a new data parameter from the data source.
            </summary>
            <param name="dbConnection"> The database connection. </param>
            <param name="dbTransaction"> An optional local database transaction. </param>
            <param name="parameterDirection"> Specifies the parameter direction. </param>
            <param name="parameterDbType"> Specifies the parameter provider-(in)dependent type. </param>
            <param name="parameterSize"> Specifies the parameter size. </param>
            <param name="parameterPrecision"> Specifies the parameter precision. </param>
            <param name="parameterScale"> Specifies the parameter scale. </param>
            <param name="parameterNullable"> Specifies the parameter nullable-ness. </param>
            <param name="parameterName"> Specifies the parameter name. </param>
            <param name="parameterValue"> Specifies the parameter value. </param>
            <returns> The data parameter with the specified properties set. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.IAdoNetFascade.ExecuteDictionary(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Int32@)">
            <summary>
            Execute a command against a data source, mapping the data reader to a list of dictionaries.
            This overload is for backwards compatability; this overload perfoms EAGER LOADING.
            DO NOT DISPOSE OF CONNECTION/TRANSACTION - UP TO THE CALLER.
            </summary>
            <param name="dbConnection"> The database connection. </param>
            <param name="dbTransaction"> An optional local database transaction. </param>
            <param name="commandType"> The type of the command. </param>
            <param name="commandText"> The SQL text or stored procedure name. </param>
            <param name="commandParameters"> The parameters to use during the operation. </param>
            <param name="recordsAffected"> The output count of records affected. </param>
            <returns> A list of dictionary instances, containing key/value pairs of data. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.IAdoNetFascade.ExecuteDictionary(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Action{System.Int32})">
            <summary>
            Execute a command against a data source, mapping the data reader to an enumerable of dictionaries.
            This overload is for backwards compatability; this overload perfoms LAZY LOADING/DEFERRED EXECUTION.
            DO NOT DISPOSE OF CONNECTION/TRANSACTION - UP TO THE CALLER.
            </summary>
            <param name="dbConnection"> The database connection. </param>
            <param name="dbTransaction"> An optional local database transaction. </param>
            <param name="commandType"> The type of the command. </param>
            <param name="commandText"> The SQL text or stored procedure name. </param>
            <param name="commandParameters"> The parameters to use during the operation. </param>
            <param name="recordsAffectedCallback"> Executed when the output count of records affected is available to return (post enumeration). </param>
            <returns> An enumerable of dictionary instances, containing key/value pairs of data. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.IAdoNetFascade.ExecuteReader(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Data.CommandBehavior,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Executes a command, returning a data reader, against a data source.
            </summary>
            <param name="dbConnection"> The database connection. </param>
            <param name="dbTransaction"> An optional local database transaction. </param>
            <param name="commandType"> The type of the command. </param>
            <param name="commandText"> The SQL text or stored procedure name. </param>
            <param name="commandParameters"> The parameters to use during the operation. </param>
            <param name="commandBehavior"> The reader behavior. </param>
            <param name="commandTimeout"> The command timeout (use null for default). </param>
            <param name="commandPrepare"> Whether to prepare the command at the data source. </param>
            <returns> The data reader result. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.IAdoNetFascade.ExecuteSchema(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Int32@)">
            <summary>
            Execute a command against a data source, mapping the data reader GetSchemaTable() result to a list of dictionaries.
            This overload is for backwards compatability; this overload perfoms EAGER LOADING.
            DO NOT DISPOSE OF CONNECTION/TRANSACTION - UP TO THE CALLER.
            </summary>
            <param name="dbConnection"> The database connection. </param>
            <param name="dbTransaction"> An optional local database transaction. </param>
            <param name="commandType"> The type of the command. </param>
            <param name="commandText"> The SQL text or stored procedure name. </param>
            <param name="commandParameters"> The parameters to use during the operation. </param>
            <param name="recordsAffected"> The output count of records affected. </param>
            <returns> A list of dictionary instances, containing key/value pairs of schema metadata. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.IAdoNetFascade.ExecuteSchema(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Action{System.Int32})">
            <summary>
            Execute a command against a data source, mapping the data reader GetSchemaTable() result to an enumerable of dictionaries.
            This overload is for backwards compatability; this overload perfoms LAZY LOADING/DEFERRED EXECUTION.
            DO NOT DISPOSE OF CONNECTION/TRANSACTION - UP TO THE CALLER.
            </summary>
            <param name="dbConnection"> The database connection. </param>
            <param name="dbTransaction"> An optional local database transaction. </param>
            <param name="commandType"> The type of the command. </param>
            <param name="commandText"> The SQL text or stored procedure name. </param>
            <param name="commandParameters"> The parameters to use during the operation. </param>
            <param name="recordsAffectedCallback"> Executed when the output count of records affected is available to return (post enumeration). </param>
            <returns> An enumerable of dictionary instances, containing key/value pairs of schema metadata. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.IAdoNetFascade.GetEnumerableDictionary(System.Data.IDataReader,System.Action{System.Int32})">
            <summary>
            Execute a command against a data source, mapping the data reader to an enumerable of dictionaries.
            This state machine method (yield return) perfoms LAZY LOADING/DEFERRED EXECUTION.
            THE DATA READER WILL BE DISPOSED UPON ENUMERATION OR FOREACH BRANCH OUT.
            </summary>
            <param name="dataReader"> The target data reader. </param>
            <param name="recordsAffectedCallback"> Executed when the output count of records affected is available to return (post enumeration). </param>
            <returns> An enumerable of dictionary instances, containing key/value pairs of data. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.IAdoNetFascade.GetSchemaEnumerableDictionary(System.Data.IDataReader,System.Action{System.Int32})">
            <summary>
            Execute a command against a data source, mapping the data reader GetSchemaTable() result to an enumerable of dictionaries.
            This state machine method (yield return) perfoms LAZY LOADING/DEFERRED EXECUTION.
            THE DATA READER WILL BE DISPOSED UPON ENUMERATION OR FOREACH BRANCH OUT.
            </summary>
            <param name="dataReader"> The target data reader. </param>
            <param name="recordsAffectedCallback"> Executed when the output count of records affected is available to return (post enumeration). </param>
            <returns> An enumerable of dictionary instances, containing key/value pairs of schema metadata. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.IAdoNetFascade.InferDbTypeForClrType(System.Type)">
            <summary>
            Returns a DbType mapping for a Type.
            An InvalidOperationException is thrown for unmappable types.
            </summary>
            <param name="clrType"> The CLR type to map to a DbType. </param>
            <returns> The mapped DbType. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.AdoNetFascade.#ctor(LeastViable.Common.Fascades.Utilities.IReflectionFascade)">
            <summary>
            Initializes a new instance of the AdoNetFascade class.
            </summary>
            <param name="reflectionFascade"> The reflection instance to use. </param>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.AdoNetFascade.#ctor">
            <summary>
            Initializes a new instance of the AdoNetFascade class.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.AdoNetFascade.CreateParameter(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.ParameterDirection,System.Data.DbType,System.Int32,System.Byte,System.Byte,System.Boolean,System.String,System.Object)">
            <summary>
            Create a new data parameter from the data source.
            </summary>
            <param name="dbConnection"> The database connection. </param>
            <param name="dbTransaction"> An optional local database transaction. </param>
            <param name="parameterDirection"> Specifies the parameter direction. </param>
            <param name="parameterDbType"> Specifies the parameter provider-(in)dependent type. </param>
            <param name="parameterSize"> Specifies the parameter size. </param>
            <param name="parameterPrecision"> Specifies the parameter precision. </param>
            <param name="parameterScale"> Specifies the parameter scale. </param>
            <param name="parameterNullable"> Specifies the parameter nullable-ness. </param>
            <param name="parameterName"> Specifies the parameter name. </param>
            <param name="parameterValue"> Specifies the parameter value. </param>
            <returns> The data parameter with the specified properties set. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.AdoNetFascade.ExecuteDictionary(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Int32@)">
            <summary>
            Execute a command against a data source, mapping the data reader to a list of dictionaries.
            This overload is for backwards compatability; this overload perfoms EAGER LOADING.
            DO NOT DISPOSE OF CONNECTION/TRANSACTION - UP TO THE CALLER.
            </summary>
            <param name="dbConnection"> The database connection. </param>
            <param name="dbTransaction"> An optional local database transaction. </param>
            <param name="commandType"> The type of the command. </param>
            <param name="commandText"> The SQL text or stored procedure name. </param>
            <param name="commandParameters"> The parameters to use during the operation. </param>
            <param name="recordsAffected"> The output count of records affected. </param>
            <returns> A list of dictionary instances, containing key/value pairs of data. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.AdoNetFascade.ExecuteDictionary(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Action{System.Int32})">
            <summary>
            Execute a command against a data source, mapping the data reader to an enumerable of dictionaries.
            This overload is for backwards compatability; this overload perfoms LAZY LOADING/DEFERRED EXECUTION.
            DO NOT DISPOSE OF CONNECTION/TRANSACTION - UP TO THE CALLER.
            </summary>
            <param name="dbConnection"> The database connection. </param>
            <param name="dbTransaction"> An optional local database transaction. </param>
            <param name="commandType"> The type of the command. </param>
            <param name="commandText"> The SQL text or stored procedure name. </param>
            <param name="commandParameters"> The parameters to use during the operation. </param>
            <param name="recordsAffectedCallback"> Executed when the output count of records affected is available to return (post enumeration). </param>
            <returns> An enumerable of dictionary instances, containing key/value pairs of data. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.AdoNetFascade.ExecuteReader(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Data.CommandBehavior,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Executes a command, returning a data reader, against a data source.
            </summary>
            <param name="dbConnection"> The database connection. </param>
            <param name="dbTransaction"> An optional local database transaction. </param>
            <param name="commandType"> The type of the command. </param>
            <param name="commandText"> The SQL text or stored procedure name. </param>
            <param name="commandParameters"> The parameters to use during the operation. </param>
            <param name="commandBehavior"> The reader behavior. </param>
            <param name="commandTimeout"> The command timeout (use null for default). </param>
            <param name="commandPrepare"> Whether to prepare the command at the data source. </param>
            <returns> The data reader result. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.AdoNetFascade.ExecuteSchema(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Int32@)">
            <summary>
            Execute a command against a data source, mapping the data reader GetSchemaTable() result to a list of dictionaries.
            This overload is for backwards compatability; this overload perfoms EAGER LOADING.
            DO NOT DISPOSE OF CONNECTION/TRANSACTION - UP TO THE CALLER.
            </summary>
            <param name="dbConnection"> The database connection. </param>
            <param name="dbTransaction"> An optional local database transaction. </param>
            <param name="commandType"> The type of the command. </param>
            <param name="commandText"> The SQL text or stored procedure name. </param>
            <param name="commandParameters"> The parameters to use during the operation. </param>
            <param name="recordsAffected"> The output count of records affected. </param>
            <returns> A list of dictionary instances, containing key/value pairs of schema metadata. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.AdoNetFascade.ExecuteSchema(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Action{System.Int32})">
            <summary>
            Execute a command against a data source, mapping the data reader GetSchemaTable() result to an enumerable of dictionaries.
            This overload is for backwards compatability; this overload perfoms LAZY LOADING/DEFERRED EXECUTION.
            DO NOT DISPOSE OF CONNECTION/TRANSACTION - UP TO THE CALLER.
            </summary>
            <param name="dbConnection"> The database connection. </param>
            <param name="dbTransaction"> An optional local database transaction. </param>
            <param name="commandType"> The type of the command. </param>
            <param name="commandText"> The SQL text or stored procedure name. </param>
            <param name="commandParameters"> The parameters to use during the operation. </param>
            <param name="recordsAffectedCallback"> Executed when the output count of records affected is available to return (post enumeration). </param>
            <returns> An enumerable of dictionary instances, containing key/value pairs of schema metadata. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.AdoNetFascade.GetEnumerableDictionary(System.Data.IDataReader,System.Action{System.Int32})">
            <summary>
            Execute a command against a data source, mapping the data reader to an enumerable of dictionaries.
            This state machine method (yield return) perfoms LAZY LOADING/DEFERRED EXECUTION.
            THE DATA READER WILL BE DISPOSED UPON ENUMERATION OR FOREACH BRANCH OUT.
            </summary>
            <param name="dataReader"> The target data reader. </param>
            <param name="recordsAffectedCallback"> Executed when the output count of records affected is available to return (post enumeration). </param>
            <returns> An enumerable of dictionary instances, containing key/value pairs of data. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.AdoNetFascade.GetSchemaEnumerableDictionary(System.Data.IDataReader,System.Action{System.Int32})">
            <summary>
            Execute a command against a data source, mapping the data reader GetSchemaTable() result to an enumerable of dictionaries.
            This state machine method (yield return) perfoms LAZY LOADING/DEFERRED EXECUTION.
            THE DATA READER WILL BE DISPOSED UPON ENUMERATION OR FOREACH BRANCH OUT.
            </summary>
            <param name="dataReader"> The target data reader. </param>
            <param name="recordsAffectedCallback"> Executed when the output count of records affected is available to return (post enumeration). </param>
            <returns> An enumerable of dictionary instances, containing key/value pairs of schema metadata. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.AdoNetFascade.InferDbTypeForClrType(System.Type)">
            <summary>
            Returns a DbType mapping for a Type.
            An InvalidOperationException is thrown for unmappable types.
            </summary>
            <param name="clrType"> The CLR type to map to a DbType. </param>
            <returns> The mapped DbType. </returns>
        </member>
        <member name="T:LeastViable.Common.Fascades.AdoNet.UoW.AmbientUnitOfWorkScope">
            <summary>
            Represents an atomic scoped set of data operations on a single connection/transaction.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.AmbientUnitOfWorkScope.#ctor(LeastViable.Common.Fascades.AdoNet.UoW.IUnitOfWorkFactory,System.Boolean,System.Data.IsolationLevel)">
            <summary>
            Initializes a new instance of the AmbientUnitOfWorkScope class.
            </summary>
            <param name="unitOfWorkFactory"> The unit of work factory instance. </param>
            <param name="isolationLevel"> An optional isolation level for the unit of work transaction. </param>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.AmbientUnitOfWorkScope.Dispose">
            <summary>
            Ends the data source transaction scope and performs a commit or rollback.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.AmbientUnitOfWorkScope.ScopeComplete">
            <summary>
            Indicates that all operations within the unit of work scope have completed successfully. This method should only be called once.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.AmbientUnitOfWorkScope.ScopeDivergent">
            <summary>
            Indicates that at least one operation within the unit of work scope cause a failure in data concurrency or nullipotency. This forces the entire unit of work to yield an incomplete status. This method can be called any number of times.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.AdoNet.UoW.AmbientUnitOfWorkScope.Disposed">
            <summary>
            Gets a value indicating whether the current instance has been disposed.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.IUnitOfWork.Complete">
            <summary>
            Indicates that all operations within the unit of work have completed successfully. This method should only be called once.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.IUnitOfWork.Divergent">
            <summary>
            Indicates that at least one operation within the unit of work cause a failure in data concurrency or nullipotency. This forces the entire unit of work to yield an incomplete status. This method can be called any number of times.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.AdoNet.UoW.IUnitOfWork.Completed">
            <summary>
            Gets a value indicating whether the current instance has been completed.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.AdoNet.UoW.IUnitOfWork.Connection">
            <summary>
            Gets the underlying ADO.NET connection.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.AdoNet.UoW.IUnitOfWork.Disposed">
            <summary>
            Gets a value indicating whether the current instance has been disposed.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.AdoNet.UoW.IUnitOfWork.Diverged">
            <summary>
            Gets a value indicating whether the current instance has been diverged.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.AdoNet.UoW.IUnitOfWork.Transaction">
            <summary>
            Gets the underlying ADO.NET transaction.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.AdoNet.UoW.IUnitOfWork.Context">
            <summary>
            Gets the context object.
            </summary>
        </member>
        <member name="T:LeastViable.Common.Fascades.AdoNet.UoW.UnitOfWork">
            <summary>
            Represents an atomic set of data operations on a single connection/transaction.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.UnitOfWork.#ctor(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Initializes a new instance of the unitOfWork class.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.UnitOfWork.Create(System.Type,System.String,System.Boolean,System.Data.IsolationLevel)">
            <summary>
            Creates a new unit of work (and opens the underlying connection) for the given connection type and connection string with an optional transaction started.
            </summary>
            <param name="connectionType"> The run-time type of the connection to use. </param>
            <param name="connectionString"> The ADO.NET provider connection string to use. </param>
            <param name="transactional"> A value indicating whether a new local data source transaction isstarted on the connection. </param>
            <param name="isolationLevel"> A value indicating the transaction isolation level. </param>
            <returns> An instance of teh unitOfWork ready for execution of operations. This should be wrapped in a using(...){} block for an optimal usage scenario. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.UnitOfWork.Adjudicate">
            <summary>
            Contains the logic to 'adjudicate' or realize a transaction based on state of the current unit of work instance.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.UnitOfWork.Complete">
            <summary>
            Indicates that all operations within the unit of work have completed successfully. This method should only be called once.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.UnitOfWork.Dispose">
            <summary>
            Dispose of the unit of work.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.AdoNet.UoW.UnitOfWork.Divergent">
            <summary>
            Indicates that at least one operation within the unit of work cause a failure in data concurrency or nullipotency. This forces the entire unit of work to yield an incomplete status. This method can be called any number of times.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.AdoNet.UoW.UnitOfWork.Current">
            <summary>
            Gets the current ambient unit of work active on the current thread and application domain.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.AdoNet.UoW.UnitOfWork.Connection">
            <summary>
            Gets the underlying ADO.NET connection.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.AdoNet.UoW.UnitOfWork.Transaction">
            <summary>
            Gets the underlying ADO.NET transaction.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.AdoNet.UoW.UnitOfWork.Completed">
            <summary>
            Gets a value indicating whether the current instance has been completed.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.AdoNet.UoW.UnitOfWork.Context">
            <summary>
            Gets the context object.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.AdoNet.UoW.UnitOfWork.Disposed">
            <summary>
            Gets a value indicating whether the current instance has been disposed.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.AdoNet.UoW.UnitOfWork.Diverged">
            <summary>
            Gets a value indicating whether the current instance has been diverged.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.Application.ExecutableApplicationFascade.EntryPoint(System.String[])">
            <summary>
            The indirect entry point method for this application. Code is wrapped in this method to leverage the 'TryStartup'/'Startup' pattern. This method, if used, wraps the Startup() method in an exception handler. The handler will catch all exceptions and report a full detailed stack trace to the Console.Error stream; -1 is then returned as the exit code. Otherwise, if no exception is thrown, the exit code returned is that which is returned by Startup().
            </summary>
            <param name="args"> The command line arguments passed from the executing environment. </param>
            <returns> The resulting exit code. </returns>
        </member>
        <member name="P:LeastViable.Common.Fascades.Application.ExecutableApplicationFascade.Disposed">
            <summary>
            Gets a value indicating whether the current instance has been disposed.
            </summary>
        </member>
        <member name="T:LeastViable.Common.Fascades.Utilities.AppConfigFascade">
            <summary>
            Provides static helper and/or extension methods for strongly typed read access to an app.config or web.config file.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IAppConfigFascade.GetAppSetting``1(System.String)">
            <summary>
            Gets the value of an app settings for the current application's default configuration. A ConfigurationErrorsException is thrown if the key does not exist.
            </summary>
            <typeparam name="TValue"> The type to convert the app settings value. </typeparam>
            <param name="key"> The key to get a value. </param>
            <returns> The app settings as type TValue. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IAppConfigFascade.GetAppSetting(System.Type,System.String)">
            <summary>
            Gets the value of an app settings for the current application's default configuration. A ConfigurationErrorsException is thrown if the key does not exist.
            </summary>
            <param name="valueType"> The type to convert the app settings value. </param>
            <param name="key"> The key to get a value. </param>
            <returns> The app settings as a string. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IAppConfigFascade.GetConnectionProvider(System.String)">
            <summary>
            Gets the value of a connection provider for the current application's default configuration. A ConfigurationErrorsException is thrown if the name does not exist.
            </summary>
            <param name="name"> The name to get a value. </param>
            <returns> The connection provider. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IAppConfigFascade.GetConnectionString(System.String)">
            <summary>
            Gets the value of a connection string for the current application's default configuration. A ConfigurationErrorsException is thrown if the name does not exist.
            </summary>
            <param name="name"> The name to get a value. </param>
            <returns> The connection string. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IAppConfigFascade.HasAppSetting(System.String)">
            <summary>
            Checks to see if an app settings key exists for the current application's default configuration.
            </summary>
            <param name="key"> The key to check. </param>
            <returns> A boolean value indicating the app setting key presence. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IAppConfigFascade.HasConnectionString(System.String)">
            <summary>
            Checks to see if a connection string name exists for the current application's default configuration.
            </summary>
            <param name="name"> The name to check. </param>
            <returns> A boolean value indicating the connection string name presence. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IAppConfigFascade.ParseCommandLineArguments(System.String[])">
            <summary>
            Given a string array of command line arguments, this method will parse the arguments using a well know pattern match to obtain a loosely typed dictionary of key/multi-value pairs for use by applications.
            </summary>
            <param name="args"> The command line argument array to parse. </param>
            <returns> A loosely typed dictionary of key/multi-value pairs. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IAppConfigFascade.TryParseCommandLineArgumentProperty(System.String,System.String@,System.String@)">
            <summary>
            Given a string property, this method will parse the property using a well know pattern match to obtain an output key/value pair for use by applications.
            </summary>
            <param name="arg"> The property to parse. </param>
            <param name="key"> The output property key. </param>
            <param name="value"> The output property value. </param>
            <returns> A value indicating if the parse was successful or not. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.AppConfigFascade.#ctor(LeastViable.Common.Fascades.Utilities.IDataTypeFascade)">
            <summary>
            Initializes a new instance of the AppConfigFascade class.
            </summary>
            <param name="dataTypeFascade"> The data type instance to use. </param>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.AppConfigFascade.#ctor">
            <summary>
            Initializes a new instance of the AppConfigFascade class.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.AppConfigFascade.GetAppSetting``1(System.String)">
            <summary>
            Gets the value of an app settings for the current application's default configuration. A ConfigurationErrorsException is thrown if the key does not exist.
            </summary>
            <typeparam name="TValue"> The type to convert the app settings value. </typeparam>
            <param name="key"> The key to get a value. </param>
            <returns> The app settings as type TValue. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.AppConfigFascade.GetAppSetting(System.Type,System.String)">
            <summary>
            Gets the value of an app settings for the current application's default configuration. A ConfigurationErrorsException is thrown if the key does not exist.
            </summary>
            <param name="valueType"> The type to convert the app settings value. </param>
            <param name="key"> The key to get a value. </param>
            <returns> The app settings as a string. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.AppConfigFascade.GetConnectionProvider(System.String)">
            <summary>
            Gets the value of a connection provider for the current application's default configuration. A ConfigurationErrorsException is thrown if the name does not exist.
            </summary>
            <param name="name"> The name to get a value. </param>
            <returns> The connection provider. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.AppConfigFascade.GetConnectionString(System.String)">
            <summary>
            Gets the value of a connection string for the current application's default configuration. A ConfigurationErrorsException is thrown if the name does not exist.
            </summary>
            <param name="name"> The name to get a value. </param>
            <returns> The connection string. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.AppConfigFascade.HasAppSetting(System.String)">
            <summary>
            Checks to see if an app settings key exists for the current application's default configuration.
            </summary>
            <param name="key"> The key to check. </param>
            <returns> A boolean value indicating the app setting key presence. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.AppConfigFascade.HasConnectionString(System.String)">
            <summary>
            Checks to see if a connection string name exists for the current application's default configuration.
            </summary>
            <param name="name"> The name to check. </param>
            <returns> A boolean value indicating the connection string name presence. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.AppConfigFascade.ParseCommandLineArguments(System.String[])">
            <summary>
            Given a string array of command line arguments, this method will parse the arguments using a well know pattern match to obtain a loosely typed dictionary of key/multi-value pairs for use by applications.
            </summary>
            <param name="args"> The command line argument array to parse. </param>
            <returns> A loosely typed dictionary of key/multi-value pairs. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.AppConfigFascade.TryParseCommandLineArgumentProperty(System.String,System.String@,System.String@)">
            <summary>
            Given a string property, this method will parse the property using a well know pattern match to obtain an output key/value pair for use by applications.
            </summary>
            <param name="arg"> The property to parse. </param>
            <param name="key"> The output property key. </param>
            <param name="value"> The output property value. </param>
            <returns> A value indicating if the parse was successful or not. </returns>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.AppConfigFascade.ArgsRegEx">
            <summary>
            Gets the regular expression pattern for arguments.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.AppConfigFascade.PropsRegEx">
            <summary>
            Gets the regular expression pattern for properties.
            </summary>
        </member>
        <member name="T:LeastViable.Common.Fascades.Utilities.AssemblyInformationFascade">
            <summary>
            Provides easy access assembly related attribute data.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.IAssemblyInformationFascade.AssemblyVersion">
            <summary>
            Gets the assembly version.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.IAssemblyInformationFascade.Company">
            <summary>
            Gets the assembly company.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.IAssemblyInformationFascade.Configuration">
            <summary>
            Gets the assembly configuration.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.IAssemblyInformationFascade.Copyright">
            <summary>
            Gets the assembly copyright.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.IAssemblyInformationFascade.Description">
            <summary>
            Gets the assembly description.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.IAssemblyInformationFascade.InformationalVersion">
            <summary>
            Gets the assembly informational version.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.IAssemblyInformationFascade.Product">
            <summary>
            Gets the assembly product.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.IAssemblyInformationFascade.Title">
            <summary>
            Gets the assembly title.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.IAssemblyInformationFascade.Trademark">
            <summary>
            Gets the assembly trademark.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.IAssemblyInformationFascade.Win32FileVersion">
            <summary>
            Gets the assembly Win32 file version.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.AssemblyInformationFascade.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the AssemblyInformationFascade class.
            </summary>
            <param name="assembly"> The target assembly to examine for information. </param>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.AssemblyInformationFascade.#ctor(LeastViable.Common.Fascades.Utilities.IReflectionFascade,System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the AssemblyInformationFascade class.
            </summary>
            <param name="reflectionFascade"> The reflectionFascade instance to use. </param>
            <param name="assembly"> The target assembly to examine for information. </param>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.AssemblyInformationFascade.AssemblyVersion">
            <summary>
            Gets the assembly version.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.AssemblyInformationFascade.Company">
            <summary>
            Gets the assembly company.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.AssemblyInformationFascade.Configuration">
            <summary>
            Gets the assembly configuration.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.AssemblyInformationFascade.Copyright">
            <summary>
            Gets the assembly copyright.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.AssemblyInformationFascade.Description">
            <summary>
            Gets the assembly description.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.AssemblyInformationFascade.InformationalVersion">
            <summary>
            Gets the assembly informational version.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.AssemblyInformationFascade.Product">
            <summary>
            Gets the assembly product.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.AssemblyInformationFascade.Title">
            <summary>
            Gets the assembly title.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.AssemblyInformationFascade.Trademark">
            <summary>
            Gets the assembly trademark.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Fascades.Utilities.AssemblyInformationFascade.Win32FileVersion">
            <summary>
            Gets the assembly Win32 file version.
            </summary>
        </member>
        <member name="T:LeastViable.Common.Fascades.Utilities.DataTypeFascade">
            <summary>
            Provides static helper and/or extension methods for core data type functionality such as validation and parsing.
            </summary>
            <summary>
            Provides static helper and/or extension methods for core data type functionality such as validation and parsing.
            </summary>
        </member>
        <member name="T:LeastViable.Common.Fascades.Utilities.IDataTypeFascade">
            <summary>
            Provides easier easier facilities for core data type functionality such as validation and parsing.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IDataTypeFascade.ChangeType``1(System.Object)">
            <summary>
            Performs a run-time type change on a given value.
            </summary>
            <typeparam name="T"> The type to change value to. </typeparam>
            <param name="value"> The value to change type. </param>
            <returns> A value changed to the given type. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IDataTypeFascade.ChangeType(System.Object,System.Type)">
            <summary>
            Performs a run-time type change on a given value.
            </summary>
            <param name="value"> The value to change type. </param>
            <param name="conversionType"> The type to change value to. </param>
            <returns> A value changed to the given type. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IDataTypeFascade.DefaultValue(System.Type)">
            <summary>
            Obtains the default value for a given type using reflection.
            </summary>
            <param name="targetType"> The target type. </param>
            <returns> The default value for the target type. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IDataTypeFascade.IsNullOrEmpty(System.String)">
            <summary>
            Determines if a string value is null or zero length.
            </summary>
            <param name="value"> The string value to check. </param>
            <returns> A boolean value indicating whether the value is null or zero length. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IDataTypeFascade.IsNullOrWhiteSpace(System.String)">
            <summary>
            Determines if a string value is null, zero length, or only contains white space.
            </summary>
            <param name="value"> The string value to check. </param>
            <returns> A boolean value indicating whether the value is null, zero length, or only contains white space. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IDataTypeFascade.IsValidEmailAddress(System.String)">
            <summary>
            Determines if a string value is a valid email address.
            </summary>
            <param name="value"> The string value to check. </param>
            <returns> A boolean value indicating whether the value is a valid email address. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IDataTypeFascade.IsWhiteSpace(System.String)">
            <summary>
            Determines if a string value is zero length or only contains white space.
            </summary>
            <param name="value"> The string value to check. </param>
            <returns> A boolean value indicating whether the value is zero length or only contains white space. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IDataTypeFascade.ObjectsEqualValueSemantics(System.Object,System.Object)">
            <summary>
            Checks whether two object instances are equal using the Object.Equals() method. Value coercion is performed.
            </summary>
            <param name="objA"> An object instance or null. </param>
            <param name="objB"> Another object instance or null. </param>
            <returns> A value indicating whether the two object instances are equal. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IDataTypeFascade.SafeToString``1(``0)">
            <summary>
            Returns a string that represents the specified type with the format specification. If the value is null, then the default value of a zero length string is returned.
            </summary>
            <typeparam name="TValue"> The type of the value to obtain a string representation. </typeparam>
            <param name="value"> The target value. </param>
            <returns> A formatted string value if the value is not null; otherwise the default value specified. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IDataTypeFascade.SafeToString``1(``0,System.String)">
            <summary>
            Returns a string that represents the specified type with the format specification. If the value is null, then the default value of a zero length string is returned. No trimming is performed.
            </summary>
            <typeparam name="TValue"> The type of the value to obtain a string representation. </typeparam>
            <param name="value"> The target value. </param>
            <param name="format"> The string specifying the format to use or null to use the default format defined for the type of the IFormattable implementation. </param>
            <returns> A formatted string value if the value is not null; otherwise the default value specified. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IDataTypeFascade.SafeToString``1(``0,System.String,System.String)">
            <summary>
            Returns a string that represents the specified type with the format specification. If the value is null, then the default value is returned. No trimming is performed.
            </summary>
            <typeparam name="TValue"> The type of the value to obtain a string representation. </typeparam>
            <param name="value"> The target value. </param>
            <param name="format"> The string specifying the format to use or null to use the default format defined for the type of the IFormattable implementation. </param>
            <param name="default"> The default value to return if the value is null. </param>
            <returns> A formatted string value if the value is not null; otherwise the default value specified. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IDataTypeFascade.SafeToString``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            Returns a string that represents the specified type with the format specification. If the value is null, then the default value is returned. No trimming is performed.
            </summary>
            <typeparam name="TValue"> The type of the value to obtain a string representation. </typeparam>
            <param name="value"> The target value. </param>
            <param name="format"> The string specifying the format to use or null to use the default format defined for the type of the IFormattable implementation. </param>
            <param name="default"> The default value to return if the value is null. </param>
            <param name="dofvisnow"> Use default value if the formatted value is null or whotespace. </param>
            <returns> A formatted string value if the value is not null; otherwise the default value specified. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IDataTypeFascade.TryParse(System.Type,System.String,System.Object@)">
            <summary>
            Converts the specified string representation to its valueType equivalent and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="valueType"> The type to convert the string value. </param>
            <param name="value"> A string containing a valueType to convert. </param>
            <param name="result"> When this method returns, contains the valueType value equivalent contained in value, if the conversion succeeded, or null if the conversion failed. The conversion fails if the value parameter is null, is an empty string, or does not contain a valid string representation of an valueType. This parameter is passed uninitialized. </param>
            <returns> A boolean value of true if the value was converted successfully; otherwise, false. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IDataTypeFascade.TryParse``1(System.String,``0@)">
            <summary>
            Converts the specified string representation to its TValue equivalent and returns a value that indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TValue"> The type to parse the string value. </typeparam>
            <param name="value"> A string containing a TValue to convert. </param>
            <param name="result"> When this method returns, contains the TValue value equivalent contained in value, if the conversion succeeded, or default(TValue) if the conversion failed. The conversion fails if the value parameter is null, is an empty string, or does not contain a valid string representation of a TValue. This parameter is passed uninitialized. </param>
            <returns> A boolean value of true if the value was converted successfully; otherwise, false. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.DataTypeFascade.ChangeType``1(System.Object)">
            <summary>
            Performs a run-time type change on a given value.
            </summary>
            <typeparam name="T"> The type to change value to. </typeparam>
            <param name="value"> The value to change type. </param>
            <returns> A value changed to the given type. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.DataTypeFascade.ChangeType(System.Object,System.Type)">
            <summary>
            Performs a run-time type change on a given value.
            </summary>
            <param name="value"> The value to change type. </param>
            <param name="conversionType"> The type to change value to. </param>
            <returns> A value changed to the given type. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.DataTypeFascade.DefaultValue(System.Type)">
            <summary>
            Obtains the default value for a given type using reflection.
            </summary>
            <param name="targetType"> The target type. </param>
            <returns> The default value for the target type. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.DataTypeFascade.IsNullOrEmpty(System.String)">
            <summary>
            Determines if a string value is null or zero length.
            </summary>
            <param name="value"> The string value to check. </param>
            <returns> A boolean value indicating whether the value is null or zero length. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.DataTypeFascade.IsNullOrWhiteSpace(System.String)">
            <summary>
            Determines if a string value is null, zero length, or only contains white space.
            </summary>
            <param name="value"> The string value to check. </param>
            <returns> A boolean value indicating whether the value is null, zero length, or only contains white space. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.DataTypeFascade.IsValidEmailAddress(System.String)">
            <summary>
            Determines if a string value is a valid email address.
            </summary>
            <param name="value"> The string value to check. </param>
            <returns> A boolean value indicating whether the value is a valid email address. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.DataTypeFascade.IsWhiteSpace(System.String)">
            <summary>
            Determines if a string value is zero length or only contains white space.
            </summary>
            <param name="value"> The string value to check. </param>
            <returns> A boolean value indicating whether the value is zero length or only contains white space. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.DataTypeFascade.ObjectsEqualValueSemantics(System.Object,System.Object)">
            <summary>
            Checks whether two object instances are equal using the Object.Equals() method. Value coercion is performed.
            </summary>
            <param name="objA"> An object instance or null. </param>
            <param name="objB"> Another object instance or null. </param>
            <returns> A value indicating whether the two object instances are equal. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.DataTypeFascade.SafeToString``1(``0)">
            <summary>
            Returns a string that represents the specified type with the format specification. If the value is null, then the default value of a zero length string is returned.
            </summary>
            <typeparam name="TValue"> The type of the value to obtain a string representation. </typeparam>
            <param name="value"> The target value. </param>
            <returns> A formatted string value if the value is not null; otherwise the default value specified. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.DataTypeFascade.SafeToString``1(``0,System.String)">
            <summary>
            Returns a string that represents the specified type with the format specification. If the value is null, then the default value of a zero length string is returned. No trimming is performed.
            </summary>
            <typeparam name="TValue"> The type of the value to obtain a string representation. </typeparam>
            <param name="value"> The target value. </param>
            <param name="format"> The string specifying the format to use or null to use the default format defined for the type of the IFormattable implementation. </param>
            <returns> A formatted string value if the value is not null; otherwise the default value specified. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.DataTypeFascade.SafeToString``1(``0,System.String,System.String)">
            <summary>
            Returns a string that represents the specified type with the format specification. If the value is null, then the default value is returned. No trimming is performed.
            </summary>
            <typeparam name="TValue"> The type of the value to obtain a string representation. </typeparam>
            <param name="value"> The target value. </param>
            <param name="format"> The string specifying the format to use or null to use the default format defined for the type of the IFormattable implementation. </param>
            <param name="default"> The default value to return if the value is null. </param>
            <returns> A formatted string value if the value is not null; otherwise the default value specified. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.DataTypeFascade.SafeToString``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            Returns a string that represents the specified type with the format specification. If the value is null, then the default value is returned. No trimming is performed.
            </summary>
            <typeparam name="TValue"> The type of the value to obtain a string representation. </typeparam>
            <param name="value"> The target value. </param>
            <param name="format"> The string specifying the format to use or null to use the default format defined for the type of the IFormattable implementation. </param>
            <param name="default"> The default value to return if the value is null. </param>
            <param name="dofvisnow"> Use default value if the formatted value is null or whotespace. </param>
            <returns> A formatted string value if the value is not null; otherwise the default value specified. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.DataTypeFascade.TryParse(System.Type,System.String,System.Object@)">
            <summary>
            Converts the specified string representation to its valueType equivalent and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="valueType"> The type to convert the string value. </param>
            <param name="value"> A string containing a valueType to convert. </param>
            <param name="result"> When this method returns, contains the valueType value equivalent contained in value, if the conversion succeeded, or null if the conversion failed. The conversion fails if the value parameter is null, is an empty string, or does not contain a valid string representation of an valueType. This parameter is passed uninitialized. </param>
            <returns> A boolean value of true if the value was converted successfully; otherwise, false. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.DataTypeFascade.TryParse``1(System.String,``0@)">
            <summary>
            Converts the specified string representation to its TValue equivalent and returns a value that indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TValue"> The type to parse the string value. </typeparam>
            <param name="value"> A string containing a TValue to convert. </param>
            <param name="result"> When this method returns, contains the TValue value equivalent contained in value, if the conversion succeeded, or default(TValue) if the conversion failed. The conversion fails if the value parameter is null, is an empty string, or does not contain a valid string representation of a TValue. This parameter is passed uninitialized. </param>
            <returns> A boolean value of true if the value was converted successfully; otherwise, false. </returns>
        </member>
        <member name="T:LeastViable.Common.Fascades.Utilities.IReflectionFascade">
            <summary>
            Provides easier reflection facilities.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IReflectionFascade.GetAllAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Gets all custom attributes of the specified type. If no custom attributes of the specified type are defined, then null is returned.
            </summary>
            <typeparam name="TAttribute"> The target ICustomAttributeProvider (Assembly, Type, MemberInfo, etc.) </typeparam>
            <param name="target"> The target object. </param>
            <returns> The custom attributes array or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IReflectionFascade.GetErrors(System.Exception,System.Int32)">
            <summary>
            Returns the concatenation of error messages from an exception object. All inner exceptions and collected exceptions (public properties implementing IEnumerable&lt;Exception&gt;) are returned.
            </summary>
            <param name="exception"> The root exception to get errors. </param>
            <param name="indent"> The indent level count. </param>
            <returns> A string concatenation of error messages delimited by newlines. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IReflectionFascade.GetLogicalPropertyType(System.Object,System.String,System.Type@)">
            <summary>
            Attempts to get the property type for a logical property (CLR, associative, etc.).
            </summary>
            <param name="targetInstance"> The target instance to search for a logical property. </param>
            <param name="propertyName"> The logical property name to get the type for. </param>
            <param name="propertyType"> An output run-time type of the logical property or null if the logical property lookup failed. </param>
            <returns> A value indicating whether the logical property name lookup was successful or not. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IReflectionFascade.GetLogicalPropertyValue(System.Object,System.String,System.Object@)">
            <summary>
            Attempts to get the property value for a logical property (CLR, associative, etc.).
            </summary>
            <param name="targetInstance"> The target instance to search for a logical property. </param>
            <param name="propertyName"> The logical property name to get the value for. </param>
            <param name="propertyValue"> An output run-time value of the logical property or null if the logical property lookup failed. </param>
            <returns> A value indicating whether the logical property name lookup was successful or not. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IReflectionFascade.GetLowestProperty(System.Type,System.String)">
            <summary>
            Used to obtain the least-derived public, instance property of a given name.
            </summary>
            <param name="propertyType"> The property type to interogate. </param>
            <param name="propertyName"> The property name to lookup. </param>
            <returns> A PropertyInfo for the least-derived public, instance property by the given name or null if none were found. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IReflectionFascade.GetOneAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Get the single custom attribute of the attribute specified type. If more than one custom attribute exists for the requested type, an InvalidOperationException is thrown. If no custom attributes of the specified type are defined, then null is returned.
            </summary>
            <typeparam name="TAttribute"> The custom attribute type. </typeparam>
            <param name="target"> The target ICustomAttributeProvider (Assembly, Type, MemberInfo, etc.) </param>
            <returns> The single custom attribute or null if none are defined. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IReflectionFascade.GetZeroAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Asserts that the custom attribute is not defined on the target. If more than zero custom attributes exist for the requested type, an InvalidOperationException is thrown.
            </summary>
            <typeparam name="TAttribute"> The custom attribute type. </typeparam>
            <param name="target"> The target ICustomAttributeProvider (Assembly, Type, MemberInfo, etc.) </param>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IReflectionFascade.MakeNonNullableType(System.Type)">
            <summary>
            Transforms a nullable type to its underlying non-nullable equivalent.
            Simply returns an existing reference type
            </summary>
            <param name="conversionType"> The nullable run-time type to transform. </param>
            <returns> The non-nullbale run-time type. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IReflectionFascade.MakeNullableType(System.Type)">
            <summary>
            Transforms a nullable type to its underlying non-nullable equivalent.
            </summary>
            <param name="conversionType"> The nullable run-time type to transform. </param>
            <returns> The non-nullbale run-time type. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IReflectionFascade.SetLogicalPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Attempts to set the property value for a logical property (CLR, associative, etc.). This overload assume stayHard=false and makeSoft=true semantics.
            </summary>
            <param name="targetInstance"> The target instance to search for a logical property. </param>
            <param name="propertyName"> The logical property name to set the value for. </param>
            <param name="propertyValue"> The value of the logical property to set or null. </param>
            <returns> A value indicating whether the logical property name lookup was successful or not. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.IReflectionFascade.SetLogicalPropertyValue(System.Object,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Attempts to set the property value for a logical property (CLR, associative, etc.).
            </summary>
            <param name="targetInstance"> The target instance to search for a logical property. </param>
            <param name="propertyName"> The logical property name to set the value for. </param>
            <param name="propertyValue"> The value of the logical property to set or null. </param>
            <param name="stayHard"> Force only 'hard' object semantics and not use associative lookup (i.e. the target instance must be a real CLR object). </param>
            <param name="makeSoft"> Allow making 'soft' object semantics (i.e. the target instance could be an associative object). </param>
            <returns> A value indicating whether the logical property name lookup was successful or not; lookup respects the 'stayHard' and 'makeSoft' flags. </returns>
        </member>
        <member name="T:LeastViable.Common.Fascades.Utilities.ReflectionFascade">
            <summary>
            Provides easier reflection facilities.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.ReflectionFascade.#ctor(LeastViable.Common.Fascades.Utilities.IDataTypeFascade)">
            <summary>
            Initializes a new instance of the ReflectionFascade class.
            </summary>
            <param name="dataTypeFascade"> The data type instance to use. </param>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.ReflectionFascade.#ctor">
            <summary>
            Initializes a new instance of the ReflectionFascade class.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.ReflectionFascade.GetAllAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Gets all custom attributes of the specified type. If no custom attributes of the specified type are defined, then null is returned.
            </summary>
            <typeparam name="TAttribute"> The target ICustomAttributeProvider (Assembly, Type, MemberInfo, etc.) </typeparam>
            <param name="target"> The target object. </param>
            <returns> The custom attributes array or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.ReflectionFascade.GetErrors(System.Exception,System.Int32)">
            <summary>
            Returns the concatenation of error messages from an exception object. All inner exceptions and collected exceptions (public properties implementing IEnumerable&lt;Exception&gt;) are returned.
            </summary>
            <param name="exception"> The root exception to get errors. </param>
            <param name="indent"> The indent level count. </param>
            <returns> A string concatenation of error messages delimited by newlines. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.ReflectionFascade.GetLogicalPropertyType(System.Object,System.String,System.Type@)">
            <summary>
            Attempts to get the property type for a logical property (CLR, associative, etc.).
            </summary>
            <param name="targetInstance"> The target instance to search for a logical property. </param>
            <param name="propertyName"> The logical property name to get the type for. </param>
            <param name="propertyType"> An output run-time type of the logical property or null if the logical property lookup failed. </param>
            <returns> A value indicating whether the logical property name lookup was successful or not. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.ReflectionFascade.GetLogicalPropertyValue(System.Object,System.String,System.Object@)">
            <summary>
            Attempts to get the property value for a logical property (CLR, associative, etc.).
            </summary>
            <param name="targetInstance"> The target instance to search for a logical property. </param>
            <param name="propertyName"> The logical property name to get the value for. </param>
            <param name="propertyValue"> An output run-time value of the logical property or null if the logical property lookup failed. </param>
            <returns> A value indicating whether the logical property name lookup was successful or not. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.ReflectionFascade.GetLowestProperty(System.Type,System.String)">
            <summary>
            Used to obtain the least-derived public, instance property of a given name.
            </summary>
            <param name="propertyType"> The property type to interogate. </param>
            <param name="propertyName"> The property name to lookup. </param>
            <returns> A PropertyInfo for the least-derived public, instance property by the given name or null if none were found. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.ReflectionFascade.GetOneAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Get the single custom attribute of the attribute specified type. If more than one custom attribute exists for the requested type, an InvalidOperationException is thrown. If no custom attributes of the specified type are defined, then null is returned.
            </summary>
            <typeparam name="TAttribute"> The custom attribute type. </typeparam>
            <param name="target"> The target ICustomAttributeProvider (Assembly, Type, MemberInfo, etc.) </param>
            <returns> The single custom attribute or null if none are defined. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.ReflectionFascade.GetZeroAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Asserts that the custom attribute is not defined on the target. If more than zero custom attributes exist for the requested type, an InvalidOperationException is thrown.
            </summary>
            <typeparam name="TAttribute"> The custom attribute type. </typeparam>
            <param name="target"> The target ICustomAttributeProvider (Assembly, Type, MemberInfo, etc.) </param>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.ReflectionFascade.MakeNonNullableType(System.Type)">
            <summary>
            Transforms a nullable type to its underlying non-nullable equivalent.
            Simply returns an existing reference type
            </summary>
            <param name="conversionType"> The nullable run-time type to transform. </param>
            <returns> The non-nullbale run-time type. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.ReflectionFascade.MakeNullableType(System.Type)">
            <summary>
            Transforms a nullable type to its underlying non-nullable equivalent.
            </summary>
            <param name="conversionType"> The nullable run-time type to transform. </param>
            <returns> The non-nullbale run-time type. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.ReflectionFascade.SetLogicalPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Attempts to set the property value for a logical property (CLR, associative, etc.). This overload assume stayHard=false and makeSoft=true semantics.
            </summary>
            <param name="targetInstance"> The target instance to search for a logical property. </param>
            <param name="propertyName"> The logical property name to set the value for. </param>
            <param name="propertyValue"> The value of the logical property to set or null. </param>
            <returns> A value indicating whether the logical property name lookup was successful or not. </returns>
        </member>
        <member name="M:LeastViable.Common.Fascades.Utilities.ReflectionFascade.SetLogicalPropertyValue(System.Object,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Attempts to set the property value for a logical property (CLR, associative, etc.).
            </summary>
            <param name="targetInstance"> The target instance to search for a logical property. </param>
            <param name="propertyName"> The logical property name to set the value for. </param>
            <param name="propertyValue"> The value of the logical property to set or null. </param>
            <param name="stayHard"> Force only 'hard' object semantics and not use associative lookup (i.e. the target instance must be a real CLR object). </param>
            <param name="makeSoft"> Allow making 'soft' object semantics (i.e. the target instance could be an associative object). </param>
            <returns> A value indicating whether the logical property name lookup was successful or not; lookup respects the 'stayHard' and 'makeSoft' flags. </returns>
        </member>
        <member name="T:LeastViable.Common.Strategies.ContextualStorage.DefaultContextualStorageFactory">
            <summary>
            Manages execution path storage of objects in a manner which is safe in standard executables, libraries, ASP.NET, and WCF code.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Strategies.ContextualStorage.HttpContextContextualStorageStrategy.IsInHttpContext">
            <summary>
            Gets a value indicating if the current application domain is running under ASP.NET.
            </summary>
        </member>
        <member name="P:LeastViable.Common.Strategies.ContextualStorage.WcfContextContextualStorageStrategy.IsInWcfContext">
            <summary>
            Gets a value indicating if the current application domain is running under WCF.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ExtensionMethods.TryGetFromAssemblyResource``1(System.Type,System.String,``0@)">
            <summary>
            Deserializes an object from an assembly manifest resource.
            </summary>
            <typeparam name="TObject"> The run-time type of the object root to deserialize. </typeparam>
            <param name="resourceType"> A type within the source assembly where the manifest resource lives. </param>
            <param name="resourceName"> The fully qualified manifest resource name to load. </param>
            <param name="result"> A valid object of the specified type or null if the manifest resource name was not found in the assembly of the resource type. </param>
            <returns> A value indicating whether the manifest resource name was found in the target type's assembly. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ExtensionMethods.TryGetFromAssemblyResource``1(LeastViable.Common.Strategies.Serialization.ISerializationStrategy,System.Type,System.String,``0@)">
            <summary>
            Deserializes an object from an assembly manifest resource.
            </summary>
            <typeparam name="TObject"> The run-time type of the object root to deserialize. </typeparam>
            <param name="resourceType"> A type within the source assembly where the manifest resource lives. </param>
            <param name="resourceName"> The fully qualified manifest resource name to load. </param>
            <param name="result"> A valid object of the specified type or null if the manifest resource name was not found in the assembly of the resource type. </param>
            <returns> A value indicating whether the manifest resource name was found in the target type's assembly. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ExtensionMethods.TryGetStringFromAssemblyResource(System.Type,System.String,System.String@)">
            <summary>
            Deserializes a string from an assembly manifest resource.
            </summary>
            <param name="resourceType"> A type within the source assembly where the manifest resource lives. </param>
            <param name="resourceName"> The fully qualified manifest resource name to load. </param>
            <param name="result"> A valid string or null if the manifest resource name was not found in the assembly of the resource type. </param>
            <returns> A value indicating whether the manifest resource name was found in the target type's assembly. </returns>
        </member>
        <member name="T:LeastViable.Common.Strategies.Serialization.IBinarySerializationStrategy">
            <summary>
            Provides a strategy pattern around serializing and deserializing objects using binary semantics.
            </summary>
        </member>
        <member name="T:LeastViable.Common.Strategies.Serialization.ISerializationStrategy">
            <summary>
            Provides a strategy pattern around serializing and deserializing objects.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ISerializationStrategy.GetObjectFromFile(System.String,System.Type)">
            <summary>
            Deserializes an object from the specified input file.
            </summary>
            <param name="inputFilePath"> The input file path to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ISerializationStrategy.GetObjectFromFile``1(System.String)">
            <summary>
            Deserializes an object from the specified input file. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="inputFilePath"> The input file path to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ISerializationStrategy.GetObjectFromStream(System.IO.Stream,System.Type)">
            <summary>
            Deserializes an object from the specified readable stream.
            </summary>
            <param name="stream"> The readable stream to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ISerializationStrategy.GetObjectFromStream``1(System.IO.Stream)">
            <summary>
            Deserializes an object from the specified readable stream. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="stream"> The readable stream to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ISerializationStrategy.SetObjectToFile``1(System.String,``0)">
            <summary>
            Serializes an object to the specified output file.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the object graph to serialize. </typeparam>
            <param name="outputFilePath"> The output file path to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ISerializationStrategy.SetObjectToFile(System.String,System.Type,System.Object)">
            <summary>
            Serializes an object to the specified output file.
            </summary>
            <param name="outputFilePath"> The output file path to serialize. </param>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ISerializationStrategy.SetObjectToStream(System.IO.Stream,System.Type,System.Object)">
            <summary>
            Serializes an object to the specified writable stream.
            </summary>
            <param name="stream"> The writable stream to serialize. </param>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ISerializationStrategy.SetObjectToStream``1(System.IO.Stream,``0)">
            <summary>
            Serializes an object to the specified writable stream.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the object graph to serialize. </typeparam>
            <param name="stream"> The writable stream to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.IBinarySerializationStrategy.GetObjectFromBytes(System.Byte[],System.Type)">
            <summary>
            Deserializes an object from the specified byte array value.
            </summary>
            <param name="value"> The byte array value to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.IBinarySerializationStrategy.GetObjectFromBytes``1(System.Byte[])">
            <summary>
            Deserializes an object from the specified byte array value. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="value"> The byte array value to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.IBinarySerializationStrategy.GetObjectFromReader(System.IO.BinaryReader,System.Type)">
            <summary>
            Deserializes an object from the specified binary reader.
            </summary>
            <param name="binaryReader"> The binary reader to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.IBinarySerializationStrategy.GetObjectFromReader``1(System.IO.BinaryReader)">
            <summary>
            Deserializes an object from the specified binary reader. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="binaryReader"> The binary reader to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.IBinarySerializationStrategy.SetObjectToBytes(System.Type,System.Object)">
            <summary>
            Serializes an object to a byte array value.
            </summary>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
            <returns> A byte array representation of the object graph. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.IBinarySerializationStrategy.SetObjectToBytes``1(``0)">
            <summary>
            Serializes an object to a byte array value. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the object graph to serialize. </typeparam>
            <param name="obj"> The object graph to serialize. </param>
            <returns> A byte array representation of the object graph. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.IBinarySerializationStrategy.SetObjectToWriter(System.IO.BinaryWriter,System.Type,System.Object)">
            <summary>
            Serializes an object to the specified binary writer.
            </summary>
            <param name="binaryWriter"> The binary writer to serialize. </param>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.IBinarySerializationStrategy.SetObjectToWriter``1(System.IO.BinaryWriter,``0)">
            <summary>
            Serializes an object to the specified binary writer. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the object graph to serialize. </typeparam>
            <param name="binaryWriter"> The binary writer to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="T:LeastViable.Common.Strategies.Serialization.ITextSerializationStrategy">
            <summary>
            Provides a strategy pattern around serializing and deserializing objects using text semantics.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ITextSerializationStrategy.GetObjectFromReader(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes an object from the specified text reader.
            </summary>
            <param name="textReader"> The text reader to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ITextSerializationStrategy.GetObjectFromReader``1(System.IO.TextReader)">
            <summary>
            Deserializes an object from the specified text reader. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="textReader"> The text reader to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ITextSerializationStrategy.GetObjectFromString(System.String,System.Type)">
            <summary>
            Deserializes an object from the specified string value.
            </summary>
            <param name="value"> The string value to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ITextSerializationStrategy.GetObjectFromString``1(System.String)">
            <summary>
            Deserializes an object from the specified text value. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="value"> The string value to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ITextSerializationStrategy.SetObjectToString(System.Type,System.Object)">
            <summary>
            Serializes an object to a string value.
            </summary>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
            <returns> A string representation of the object graph. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ITextSerializationStrategy.SetObjectToString``1(``0)">
            <summary>
            Serializes an object to a string value. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the object graph to serialize. </typeparam>
            <param name="obj"> The object graph to serialize. </param>
            <returns> A string representation of the object graph. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ITextSerializationStrategy.SetObjectToWriter(System.IO.TextWriter,System.Type,System.Object)">
            <summary>
            Serializes an object to the specified text writer.
            </summary>
            <param name="textWriter"> The text writer to serialize. </param>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.ITextSerializationStrategy.SetObjectToWriter``1(System.IO.TextWriter,``0)">
            <summary>
            Serializes an object to the specified text writer. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the object graph to serialize. </typeparam>
            <param name="textWriter"> The text writer to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="T:LeastViable.Common.Strategies.Serialization.IXmlSerializationStrategy">
            <summary>
            Provides a strategy pattern around serializing and deserializing objects using XML semantics.
            </summary>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.IXmlSerializationStrategy.GetObjectFromReader(System.Xml.XmlReader,System.Type)">
            <summary>
            Deserializes an object from the specified xml reader.
            </summary>
            <param name="xmlReader"> The xml reader to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.IXmlSerializationStrategy.GetObjectFromReader``1(System.Xml.XmlReader)">
            <summary>
            Deserializes an object from the specified xml reader. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="xmlReader"> The xml reader to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.IXmlSerializationStrategy.SetObjectToWriter(System.Xml.XmlWriter,System.Type,System.Object)">
            <summary>
            Serializes an object to the specified xml writer.
            </summary>
            <param name="xmlWriter"> The xml writer to serialize. </param>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.IXmlSerializationStrategy.SetObjectToWriter``1(System.Xml.XmlWriter,``0)">
            <summary>
            Serializes an object to the specified xml writer. This is the generic overload.
            </summary>
            <param name="xmlWriter"> The xml writer to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.GetObjectFromBytes(System.Byte[],System.Type)">
            <summary>
            Deserializes an object from the specified byte array value.
            </summary>
            <param name="value"> The byte array value to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.GetObjectFromBytes``1(System.Byte[])">
            <summary>
            Deserializes an object from the specified byte array value. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="value"> The byte array value to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.GetObjectFromFile(System.String,System.Type)">
            <summary>
            Deserializes an object from the specified input file.
            </summary>
            <param name="inputFilePath"> The input file path to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.GetObjectFromFile``1(System.String)">
            <summary>
            Deserializes an object from the specified input file. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="inputFilePath"> The input file path to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.GetObjectFromReader(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes an object from the specified text reader.
            </summary>
            <param name="textReader"> The text reader to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.GetObjectFromReader``1(System.IO.TextReader)">
            <summary>
            Deserializes an object from the specified text reader. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="textReader"> The text reader to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.GetObjectFromReader(System.IO.BinaryReader,System.Type)">
            <summary>
            Deserializes an object from the specified binary reader.
            </summary>
            <param name="binaryReader"> The binary reader to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.GetObjectFromReader``1(System.IO.BinaryReader)">
            <summary>
            Deserializes an object from the specified binary reader. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="binaryReader"> The binary reader to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.GetObjectFromStream(System.IO.Stream,System.Type)">
            <summary>
            Deserializes an object from the specified readable stream.
            </summary>
            <param name="stream"> The readable stream to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.GetObjectFromStream``1(System.IO.Stream)">
            <summary>
            Deserializes an object from the specified readable stream. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="stream"> The readable stream to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.GetObjectFromString(System.String,System.Type)">
            <summary>
            Deserializes an object from the specified string value.
            </summary>
            <param name="value"> The string value to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.GetObjectFromString``1(System.String)">
            <summary>
            Deserializes an object from the specified text value. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="value"> The string value to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.SetObjectToBytes(System.Type,System.Object)">
            <summary>
            Serializes an object to a byte array value.
            </summary>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
            <returns> A byte array representation of the object graph. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.SetObjectToBytes``1(``0)">
            <summary>
            Serializes an object to a byte array value. This is the generic overload.
            </summary>
            <param name="obj"> The object graph to serialize. </param>
            <returns> A byte array representation of the object graph. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.SetObjectToFile``1(System.String,``0)">
            <summary>
            Serializes an object to the specified output file.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the object graph to serialize. </typeparam>
            <param name="outputFilePath"> The output file path to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.SetObjectToFile(System.String,System.Type,System.Object)">
            <summary>
            Serializes an object to the specified output file.
            </summary>
            <param name="outputFilePath"> The output file path to serialize. </param>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.SetObjectToStream``1(System.IO.Stream,``0)">
            <summary>
            Serializes an object to the specified writable stream.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the object graph to serialize. </typeparam>
            <param name="stream"> The writable stream to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.SetObjectToStream(System.IO.Stream,System.Type,System.Object)">
            <summary>
            Serializes an object to the specified writable stream.
            </summary>
            <param name="stream"> The writable stream to serialize. </param>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.SetObjectToString(System.Type,System.Object)">
            <summary>
            Serializes an object to a string value.
            </summary>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
            <returns> A string representation of the object graph. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.SetObjectToString``1(``0)">
            <summary>
            Serializes an object to a string value. This is the generic overload.
            </summary>
            <param name="obj"> The object graph to serialize. </param>
            <returns> A string representation of the object graph. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.SetObjectToWriter(System.IO.TextWriter,System.Type,System.Object)">
            <summary>
            Serializes an object to the specified text writer.
            </summary>
            <param name="textWriter"> The text writer to serialize. </param>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.SetObjectToWriter``1(System.IO.TextWriter,``0)">
            <summary>
            Serializes an object to the specified text writer. This is the generic overload.
            </summary>
            <param name="textWriter"> The text writer to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.SetObjectToWriter``1(System.IO.BinaryWriter,``0)">
            <summary>
            Serializes an object to the specified binary writer. This is the generic overload.
            </summary>
            <param name="binaryWriter"> The binary writer to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.JsonSerializationStrategy.SetObjectToWriter(System.IO.BinaryWriter,System.Type,System.Object)">
            <summary>
            Serializes an object to the specified binary writer.
            </summary>
            <param name="binaryWriter"> The binary writer to serialize. </param>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.GetObjectFromFile(System.String,System.Type)">
            <summary>
            Deserializes an object from the specified input file.
            </summary>
            <param name="inputFilePath"> The input file path to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.GetObjectFromFile``1(System.String)">
            <summary>
            Deserializes an object from the specified input file. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="inputFilePath"> The input file path to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.GetObjectFromReader(System.Xml.XmlReader,System.Type)">
            <summary>
            Deserializes an object from the specified xml reader.
            </summary>
            <param name="xmlReader"> The xml reader to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.GetObjectFromReader``1(System.Xml.XmlReader)">
            <summary>
            Deserializes an object from the specified xml reader. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="xmlReader"> The xml reader to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.GetObjectFromReader(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes an object from the specified text reader.
            </summary>
            <param name="textReader"> The text reader to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.GetObjectFromReader``1(System.IO.TextReader)">
            <summary>
            Deserializes an object from the specified text reader. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="textReader"> The text reader to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.GetObjectFromStream(System.IO.Stream,System.Type)">
            <summary>
            Deserializes an object from the specified readable stream.
            </summary>
            <param name="stream"> The readable stream to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.GetObjectFromStream``1(System.IO.Stream)">
            <summary>
            Deserializes an object from the specified readable stream. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="stream"> The readable stream to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.GetObjectFromString(System.String,System.Type)">
            <summary>
            Deserializes an object from the specified string value.
            </summary>
            <param name="value"> The string value to deserialize. </param>
            <param name="targetType"> The target run-time type of the root of the deserialized object graph. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.GetObjectFromString``1(System.String)">
            <summary>
            Deserializes an object from the specified text value. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the deserialized object graph. </typeparam>
            <param name="value"> The string value to deserialize. </param>
            <returns> An object of the target type or null. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.SetObjectToFile``1(System.String,``0)">
            <summary>
            Serializes an object to the specified output file.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the object graph to serialize. </typeparam>
            <param name="outputFilePath"> The output file path to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.SetObjectToFile(System.String,System.Type,System.Object)">
            <summary>
            Serializes an object to the specified output file.
            </summary>
            <param name="outputFilePath"> The output file path to serialize. </param>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.SetObjectToStream``1(System.IO.Stream,``0)">
            <summary>
            Serializes an object to the specified writable stream.
            </summary>
            <typeparam name="TObject"> The target run-time type of the root of the object graph to serialize. </typeparam>
            <param name="stream"> The writable stream to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.SetObjectToStream(System.IO.Stream,System.Type,System.Object)">
            <summary>
            Serializes an object to the specified writable stream.
            </summary>
            <param name="stream"> The writable stream to serialize. </param>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.SetObjectToString(System.Type,System.Object)">
            <summary>
            Serializes an object to a string value.
            </summary>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
            <returns> A string representation of the object graph. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.SetObjectToString``1(``0)">
            <summary>
            Serializes an object to a string value. This is the generic overload.
            </summary>
            <param name="obj"> The object graph to serialize. </param>
            <returns> A string representation of the object graph. </returns>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.SetObjectToWriter(System.Xml.XmlWriter,System.Type,System.Object)">
            <summary>
            Serializes an object to the specified xml writer.
            </summary>
            <param name="xmlWriter"> The xml writer to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.SetObjectToWriter``1(System.Xml.XmlWriter,``0)">
            <summary>
            Serializes an object to the specified xml writer. This is the generic overload.
            </summary>
            <param name="xmlWriter"> The xml writer to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.SetObjectToWriter(System.IO.TextWriter,System.Type,System.Object)">
            <summary>
            Serializes an object to the specified text writer.
            </summary>
            <param name="textWriter"> The text writer to serialize. </param>
            <param name="targetType"> The target run-time type of the root of the object graph to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="M:LeastViable.Common.Strategies.Serialization.XmlSerializationStrategy.SetObjectToWriter``1(System.IO.TextWriter,``0)">
            <summary>
            Serializes an object to the specified text writer. This is the generic overload.
            </summary>
            <param name="textWriter"> The text writer to serialize. </param>
            <param name="obj"> The object graph to serialize. </param>
        </member>
        <member name="T:LeastViable.Common.ValueObjects.IListItem">
            <summary>
            Represents a list item.
            </summary>
        </member>
        <member name="P:LeastViable.Common.ValueObjects.IListItem.Text">
            <summary>
            Gets the list item text.
            </summary>
        </member>
        <member name="P:LeastViable.Common.ValueObjects.IListItem.Value">
            <summary>
            Gets the list item value.
            </summary>
        </member>
        <member name="T:LeastViable.Common.ValueObjects.IListItem`1">
            <summary>
            Represents a list item with a strongly typed value.
            </summary>
            <typeparam name="TValue"> The type of the list item value. </typeparam>
        </member>
        <member name="P:LeastViable.Common.ValueObjects.IListItem`1.Value">
            <summary>
            Gets the list item value.
            </summary>
        </member>
        <member name="T:LeastViable.Common.ValueObjects.ListItem">
            <summary>
            Represents a list item.
            </summary>
        </member>
        <member name="M:LeastViable.Common.ValueObjects.ListItem.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the ListItem class.
            </summary>
            <param name="value"> The value of the list item. </param>
            <param name="text"> The text of the list item. </param>
        </member>
        <member name="M:LeastViable.Common.ValueObjects.ListItem.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:LeastViable.Common.ValueObjects.ListItem.Empty">
            <summary>
            Gets the singleton 'empty' instance.
            </summary>
        </member>
        <member name="P:LeastViable.Common.ValueObjects.ListItem.Text">
            <summary>
            Gets the list item text.
            </summary>
        </member>
        <member name="P:LeastViable.Common.ValueObjects.ListItem.Value">
            <summary>
            Gets the list item value.
            </summary>
        </member>
        <member name="T:LeastViable.Common.ValueObjects.ListItem`1">
            <summary>
            Represents a list item with a strongly typed value.
            </summary>
        </member>
        <member name="M:LeastViable.Common.ValueObjects.ListItem`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the ListItem`1 class.
            </summary>
            <param name="value"> The value of the list item. </param>
            <param name="text"> The text of the list item. </param>
        </member>
        <member name="M:LeastViable.Common.ValueObjects.ListItem`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:LeastViable.Common.ValueObjects.ListItem`1.Empty">
            <summary>
            Gets the singleton 'empty' instance.
            </summary>
        </member>
        <member name="P:LeastViable.Common.ValueObjects.ListItem`1.Value">
            <summary>
            Gets the list item value.
            </summary>
        </member>
        <member name="M:LeastViable.Common.ValueObjects.IValidate.Validate">
            <summary>
            Validates this instance.
            </summary>
            <returns> A enumerable of zero or more messages. </returns>
        </member>
        <member name="T:LeastViable.Common.ValueObjects.Message">
            <summary>
            Represents a message with a category, description, and severity.
            </summary>
        </member>
        <member name="M:LeastViable.Common.ValueObjects.Message.#ctor(System.String,System.String,LeastViable.Common.ValueObjects.Severity)">
            <summary>
            Initializes a new instance of the Message class.
            </summary>
            <param name="category"> The category of the message. </param>
            <param name="description"> The description of the message. </param>
            <param name="severity"> The severity of the message. </param>
        </member>
        <member name="M:LeastViable.Common.ValueObjects.Message.#ctor">
            <summary>
            Initializes a new instance of the Message class.
            </summary>
        </member>
        <member name="P:LeastViable.Common.ValueObjects.Message.Category">
            <summary>
            Gets the message category.
            </summary>
        </member>
        <member name="P:LeastViable.Common.ValueObjects.Message.Description">
            <summary>
            Gets the message description.
            </summary>
        </member>
        <member name="P:LeastViable.Common.ValueObjects.Message.Severity">
            <summary>
            Gets the message severity.
            </summary>
        </member>
        <member name="T:LeastViable.Common.ValueObjects.Severity">
            <summary>
            Specifies the severity of a message.
            </summary>
        </member>
        <member name="F:LeastViable.Common.ValueObjects.Severity.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:LeastViable.Common.ValueObjects.Severity.Information">
            <summary>
            Information.
            </summary>
        </member>
        <member name="F:LeastViable.Common.ValueObjects.Severity.Warning">
            <summary>
            Warning.
            </summary>
        </member>
        <member name="F:LeastViable.Common.ValueObjects.Severity.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:LeastViable.Common.ValueObjects.Severity.Hit">
            <summary>
            Hit.
            </summary>
        </member>
        <member name="F:LeastViable.Common.ValueObjects.Severity.Debug">
            <summary>
            Debug.
            </summary>
        </member>
    </members>
</doc>
